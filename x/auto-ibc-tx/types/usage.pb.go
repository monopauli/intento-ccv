// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trst/autoibctx/v1beta1/usage.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AutoTxIbcUsage struct {
	Address string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Txs     []*AutoIbcTxAck `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *AutoTxIbcUsage) Reset()         { *m = AutoTxIbcUsage{} }
func (m *AutoTxIbcUsage) String() string { return proto.CompactTextString(m) }
func (*AutoTxIbcUsage) ProtoMessage()    {}
func (*AutoTxIbcUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_327550fdb19cc005, []int{0}
}
func (m *AutoTxIbcUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoTxIbcUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoTxIbcUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoTxIbcUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoTxIbcUsage.Merge(m, src)
}
func (m *AutoTxIbcUsage) XXX_Size() int {
	return m.Size()
}
func (m *AutoTxIbcUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoTxIbcUsage.DiscardUnknown(m)
}

var xxx_messageInfo_AutoTxIbcUsage proto.InternalMessageInfo

func (m *AutoTxIbcUsage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AutoTxIbcUsage) GetTxs() []*AutoIbcTxAck {
	if m != nil {
		return m.Txs
	}
	return nil
}

type AutoIbcTxAck struct {
	Coin         types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	ConnectionId string     `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *AutoIbcTxAck) Reset()         { *m = AutoIbcTxAck{} }
func (m *AutoIbcTxAck) String() string { return proto.CompactTextString(m) }
func (*AutoIbcTxAck) ProtoMessage()    {}
func (*AutoIbcTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_327550fdb19cc005, []int{1}
}
func (m *AutoIbcTxAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoIbcTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoIbcTxAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoIbcTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoIbcTxAck.Merge(m, src)
}
func (m *AutoIbcTxAck) XXX_Size() int {
	return m.Size()
}
func (m *AutoIbcTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoIbcTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_AutoIbcTxAck proto.InternalMessageInfo

func (m *AutoIbcTxAck) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *AutoIbcTxAck) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func init() {
	proto.RegisterType((*AutoTxIbcUsage)(nil), "trst.autoibctx.v1beta1.AutoTxIbcUsage")
	proto.RegisterType((*AutoIbcTxAck)(nil), "trst.autoibctx.v1beta1.AutoIbcTxAck")
}

func init() {
	proto.RegisterFile("trst/autoibctx/v1beta1/usage.proto", fileDescriptor_327550fdb19cc005)
}

var fileDescriptor_327550fdb19cc005 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0xef, 0x80, 0x68, 0x2c, 0xe8, 0x70, 0x31, 0xe6, 0x64, 0xa8, 0x04, 0x1d, 0x18, 0xa4,
	0x0d, 0x90, 0xb8, 0x83, 0x89, 0x09, 0x2b, 0xc1, 0xc5, 0xc5, 0xb4, 0xbd, 0xe6, 0x68, 0x94, 0x7b,
	0x84, 0xbe, 0x33, 0xf5, 0x5b, 0xf8, 0xb1, 0x18, 0x19, 0x9d, 0x8c, 0x81, 0x2f, 0x62, 0x5a, 0x14,
	0x1d, 0xdc, 0x5e, 0x5f, 0x7f, 0xfd, 0xf7, 0x97, 0x3f, 0x69, 0xe3, 0xd2, 0x22, 0x17, 0x25, 0x82,
	0x91, 0x0a, 0x1d, 0x7f, 0xe9, 0x49, 0x8d, 0xa2, 0xc7, 0x4b, 0x2b, 0x72, 0xcd, 0x16, 0x4b, 0x40,
	0x48, 0xce, 0x3c, 0xc3, 0xf6, 0x0c, 0xfb, 0x66, 0x9a, 0xa7, 0x39, 0xe4, 0x10, 0x10, 0xee, 0xa7,
	0x1d, 0xdd, 0xa4, 0x0a, 0xec, 0x1c, 0x2c, 0x97, 0xc2, 0xea, 0x7d, 0x9c, 0x02, 0x53, 0xec, 0xee,
	0xdb, 0x92, 0x9c, 0x0c, 0x4b, 0x84, 0xa9, 0x1b, 0x4b, 0x75, 0xef, 0x7f, 0x49, 0x52, 0x72, 0x28,
	0xb2, 0x6c, 0xa9, 0xad, 0x4d, 0xe3, 0x56, 0xdc, 0x39, 0x9a, 0xfc, 0x1c, 0x93, 0x1b, 0x52, 0x45,
	0x67, 0xd3, 0x4a, 0xab, 0xda, 0xa9, 0xf7, 0xaf, 0xd8, 0xff, 0x1e, 0xcc, 0xc7, 0x8d, 0xa5, 0x9a,
	0xba, 0xa1, 0x7a, 0x9a, 0xf8, 0x07, 0xed, 0x19, 0x69, 0xfc, 0x5d, 0x26, 0x03, 0x52, 0xf3, 0x06,
	0x21, 0xbe, 0xde, 0x3f, 0x67, 0x3b, 0x45, 0xe6, 0x15, 0xf7, 0x29, 0xb7, 0x60, 0x8a, 0x51, 0x6d,
	0xf5, 0x71, 0x11, 0x4d, 0x02, 0x9c, 0x5c, 0x92, 0x63, 0x05, 0x45, 0xa1, 0x15, 0x1a, 0x28, 0x1e,
	0x4d, 0x96, 0x56, 0x82, 0x5c, 0xe3, 0x77, 0x39, 0xce, 0x46, 0x77, 0xab, 0x0d, 0x8d, 0xd7, 0x1b,
	0x1a, 0x7f, 0x6e, 0x68, 0xfc, 0xb6, 0xa5, 0xd1, 0x7a, 0x4b, 0xa3, 0xf7, 0x2d, 0x8d, 0x1e, 0xae,
	0x73, 0x83, 0xb3, 0x52, 0x32, 0x05, 0x73, 0xee, 0xc5, 0x9f, 0x85, 0xb4, 0x61, 0xe0, 0x2e, 0xf4,
	0xdd, 0x35, 0x52, 0x75, 0xd1, 0x71, 0x7c, 0x5d, 0x68, 0x2b, 0x0f, 0x42, 0x39, 0x83, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa4, 0xcc, 0xcd, 0x75, 0x90, 0x01, 0x00, 0x00,
}

func (m *AutoTxIbcUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoTxIbcUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoTxIbcUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoIbcTxAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoIbcTxAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoIbcTxAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUsage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AutoTxIbcUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func (m *AutoIbcTxAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovUsage(uint64(l))
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	return n
}

func sovUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoTxIbcUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoTxIbcUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoTxIbcUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &AutoIbcTxAck{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoIbcTxAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoIbcTxAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoIbcTxAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsage = fmt.Errorf("proto: unexpected end of group")
)
