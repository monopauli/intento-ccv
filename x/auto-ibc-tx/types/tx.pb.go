// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auto-ibc-tx/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAccount registers an interchain account for the given owner over the specified connection pair
type MsgRegisterAccount struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
	Version      string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgRegisterAccount) Reset()         { *m = MsgRegisterAccount{} }
func (m *MsgRegisterAccount) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAccount) ProtoMessage()    {}
func (*MsgRegisterAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{0}
}
func (m *MsgRegisterAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAccount.Merge(m, src)
}
func (m *MsgRegisterAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAccount proto.InternalMessageInfo

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
type MsgRegisterAccountResponse struct {
}

func (m *MsgRegisterAccountResponse) Reset()         { *m = MsgRegisterAccountResponse{} }
func (m *MsgRegisterAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAccountResponse) ProtoMessage()    {}
func (*MsgRegisterAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{1}
}
func (m *MsgRegisterAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAccountResponse.Merge(m, src)
}
func (m *MsgRegisterAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAccountResponse proto.InternalMessageInfo

// MsgSubmitTx creates and submits an arbitrary transaction msg to be executed locally or using an interchain account
type MsgSubmitTx struct {
	Owner        string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string     `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
	Msg          *types.Any `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *MsgSubmitTx) Reset()         { *m = MsgSubmitTx{} }
func (m *MsgSubmitTx) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTx) ProtoMessage()    {}
func (*MsgSubmitTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{2}
}
func (m *MsgSubmitTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTx.Merge(m, src)
}
func (m *MsgSubmitTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTx proto.InternalMessageInfo

// MsgSubmitTxResponse defines the MsgSubmitTx response type
type MsgSubmitTxResponse struct {
}

func (m *MsgSubmitTxResponse) Reset()         { *m = MsgSubmitTxResponse{} }
func (m *MsgSubmitTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTxResponse) ProtoMessage()    {}
func (*MsgSubmitTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{3}
}
func (m *MsgSubmitTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTxResponse.Merge(m, src)
}
func (m *MsgSubmitTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTxResponse proto.InternalMessageInfo

// MsgSubmitAutoTx creates, submits and schedules an arbitrary transaction msg to be executed locally or using an interchain account
type MsgSubmitAutoTx struct {
	Owner        string       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string       `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
	Label        string       `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Msgs         []*types.Any `protobuf:"bytes,4,rep,name=msgs,proto3" json:"msgs,omitempty"`
	// duration defines the time that the code should run for
	Duration string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// start_at when set as a unix time after block inclusion, creates a custom start time for execution
	StartAt uint64 `protobuf:"varint,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	//interval defines the interval between auto_msg calls
	Interval string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	//optional fees to be used for auto tx execution limiting the amount of fees incurred
	FeeFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=fee_funds,json=feeFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_funds" yaml:"fee_funds"`
	//optional array of dependent txs that should be executed before execution is allowed
	DependsOnTxIds []uint64 `protobuf:"varint,9,rep,packed,name=depends_on_tx_ids,json=dependsOnTxIds,proto3" json:"depends_on_tx_ids,omitempty"`
}

func (m *MsgSubmitAutoTx) Reset()         { *m = MsgSubmitAutoTx{} }
func (m *MsgSubmitAutoTx) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitAutoTx) ProtoMessage()    {}
func (*MsgSubmitAutoTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{4}
}
func (m *MsgSubmitAutoTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitAutoTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitAutoTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitAutoTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitAutoTx.Merge(m, src)
}
func (m *MsgSubmitAutoTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitAutoTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitAutoTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitAutoTx proto.InternalMessageInfo

// MsgSubmitTxResponse defines the MsgSubmitTx response type
type MsgSubmitAutoTxResponse struct {
}

func (m *MsgSubmitAutoTxResponse) Reset()         { *m = MsgSubmitAutoTxResponse{} }
func (m *MsgSubmitAutoTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitAutoTxResponse) ProtoMessage()    {}
func (*MsgSubmitAutoTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{5}
}
func (m *MsgSubmitAutoTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitAutoTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitAutoTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitAutoTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitAutoTxResponse.Merge(m, src)
}
func (m *MsgSubmitAutoTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitAutoTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitAutoTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitAutoTxResponse proto.InternalMessageInfo

// MsgRegisterAccountAndSubmitAutoTx creates an interchain account, submits and schedules an arbitrary transaction msg to be executed by this interchain account
type MsgRegisterAccountAndSubmitAutoTx struct {
	Owner        string       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string       `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
	Label        string       `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Msgs         []*types.Any `protobuf:"bytes,4,rep,name=msgs,proto3" json:"msgs,omitempty"`
	// duration defines the time that the code should run for
	Duration string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// start_at when set as a unix time after block inclusion, creates a custom start time for execution
	StartAt uint64 `protobuf:"varint,6,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	//interval defines the interval between auto_msg calls
	Interval string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	//optional fees to be used for auto tx execution limiting the amount of fees incurred
	FeeFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=fee_funds,json=feeFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_funds" yaml:"fee_funds"`
	//optional array of dependent txs that should be executed before execution is allowed
	DependsOnTxIds []uint64 `protobuf:"varint,9,rep,packed,name=depends_on_tx_ids,json=dependsOnTxIds,proto3" json:"depends_on_tx_ids,omitempty"`
	Version        string   `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgRegisterAccountAndSubmitAutoTx) Reset()         { *m = MsgRegisterAccountAndSubmitAutoTx{} }
func (m *MsgRegisterAccountAndSubmitAutoTx) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAccountAndSubmitAutoTx) ProtoMessage()    {}
func (*MsgRegisterAccountAndSubmitAutoTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{6}
}
func (m *MsgRegisterAccountAndSubmitAutoTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAccountAndSubmitAutoTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAccountAndSubmitAutoTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTx.Merge(m, src)
}
func (m *MsgRegisterAccountAndSubmitAutoTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAccountAndSubmitAutoTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTx proto.InternalMessageInfo

// MsgRegisterAccountAndSubmitAutoTxResponse defines the MsgSubmitTx response type
type MsgRegisterAccountAndSubmitAutoTxResponse struct {
}

func (m *MsgRegisterAccountAndSubmitAutoTxResponse) Reset() {
	*m = MsgRegisterAccountAndSubmitAutoTxResponse{}
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgRegisterAccountAndSubmitAutoTxResponse) ProtoMessage() {}
func (*MsgRegisterAccountAndSubmitAutoTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{7}
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTxResponse.Merge(m, src)
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAccountAndSubmitAutoTxResponse proto.InternalMessageInfo

// MsgUpdateAutoTx updates an arbitrary transaction msg to be executed locally or using an interchain account
type MsgUpdateAutoTx struct {
	Owner        string       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	TxId         uint64       `protobuf:"varint,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ConnectionId string       `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
	Label        string       `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Msgs         []*types.Any `protobuf:"bytes,5,rep,name=msgs,proto3" json:"msgs,omitempty"`
	// end_time when set defines the time that the code should run for
	EndTime uint64 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// start_at when set as a unix time after block inclusion, creates a custom start time for execution
	StartAt uint64 `protobuf:"varint,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	//interval defines the interval between auto_msg calls
	Interval string `protobuf:"bytes,8,opt,name=interval,proto3" json:"interval,omitempty"`
	//optional fees to be used for auto tx execution limiting the amount of fees incurred
	FeeFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=fee_funds,json=feeFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_funds" yaml:"fee_funds"`
	//optional array of dependent txs that should be executed before execution is allowed
	DependsOnTxIds []uint64 `protobuf:"varint,10,rep,packed,name=depends_on_tx_ids,json=dependsOnTxIds,proto3" json:"depends_on_tx_ids,omitempty"`
}

func (m *MsgUpdateAutoTx) Reset()         { *m = MsgUpdateAutoTx{} }
func (m *MsgUpdateAutoTx) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAutoTx) ProtoMessage()    {}
func (*MsgUpdateAutoTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{8}
}
func (m *MsgUpdateAutoTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAutoTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAutoTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAutoTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAutoTx.Merge(m, src)
}
func (m *MsgUpdateAutoTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAutoTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAutoTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAutoTx proto.InternalMessageInfo

// MsgUpdateTxResponse defines the MsgUpdateTx response type
type MsgUpdateAutoTxResponse struct {
}

func (m *MsgUpdateAutoTxResponse) Reset()         { *m = MsgUpdateAutoTxResponse{} }
func (m *MsgUpdateAutoTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAutoTxResponse) ProtoMessage()    {}
func (*MsgUpdateAutoTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdde4ef8283f3f94, []int{9}
}
func (m *MsgUpdateAutoTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAutoTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAutoTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAutoTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAutoTxResponse.Merge(m, src)
}
func (m *MsgUpdateAutoTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAutoTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAutoTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAutoTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAccount)(nil), "trst.x.autoibctx.v1beta1.MsgRegisterAccount")
	proto.RegisterType((*MsgRegisterAccountResponse)(nil), "trst.x.autoibctx.v1beta1.MsgRegisterAccountResponse")
	proto.RegisterType((*MsgSubmitTx)(nil), "trst.x.autoibctx.v1beta1.MsgSubmitTx")
	proto.RegisterType((*MsgSubmitTxResponse)(nil), "trst.x.autoibctx.v1beta1.MsgSubmitTxResponse")
	proto.RegisterType((*MsgSubmitAutoTx)(nil), "trst.x.autoibctx.v1beta1.MsgSubmitAutoTx")
	proto.RegisterType((*MsgSubmitAutoTxResponse)(nil), "trst.x.autoibctx.v1beta1.MsgSubmitAutoTxResponse")
	proto.RegisterType((*MsgRegisterAccountAndSubmitAutoTx)(nil), "trst.x.autoibctx.v1beta1.MsgRegisterAccountAndSubmitAutoTx")
	proto.RegisterType((*MsgRegisterAccountAndSubmitAutoTxResponse)(nil), "trst.x.autoibctx.v1beta1.MsgRegisterAccountAndSubmitAutoTxResponse")
	proto.RegisterType((*MsgUpdateAutoTx)(nil), "trst.x.autoibctx.v1beta1.MsgUpdateAutoTx")
	proto.RegisterType((*MsgUpdateAutoTxResponse)(nil), "trst.x.autoibctx.v1beta1.MsgUpdateAutoTxResponse")
}

func init() { proto.RegisterFile("auto-ibc-tx/v1beta1/tx.proto", fileDescriptor_bdde4ef8283f3f94) }

var fileDescriptor_bdde4ef8283f3f94 = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4b, 0x6f, 0xeb, 0x44,
	0x14, 0x8e, 0xaf, 0x93, 0x26, 0x99, 0x5e, 0xb8, 0xe0, 0x1b, 0x84, 0x63, 0x55, 0x4e, 0x30, 0xea,
	0x25, 0xd5, 0xbd, 0xb6, 0xd5, 0x52, 0x58, 0xf0, 0x58, 0x24, 0x45, 0x48, 0x5d, 0x14, 0x24, 0x53,
	0x36, 0x6c, 0x2c, 0x3f, 0x26, 0xc6, 0x6a, 0x3c, 0x13, 0x79, 0xc6, 0xc5, 0x91, 0x58, 0xc1, 0x06,
	0xb1, 0x42, 0x62, 0xc5, 0x9e, 0x05, 0x62, 0xc3, 0x86, 0x7f, 0xc0, 0xa6, 0x62, 0x55, 0xc1, 0x06,
	0x09, 0xa9, 0x94, 0x94, 0x5f, 0xd0, 0x5f, 0x80, 0x3c, 0x7e, 0x90, 0x57, 0x93, 0x14, 0x54, 0x09,
	0x24, 0x56, 0xf5, 0xe9, 0xf9, 0xce, 0xcc, 0x37, 0xe7, 0xfb, 0xe6, 0x4c, 0xc0, 0x96, 0x15, 0x51,
	0xac, 0xfa, 0xb6, 0xa3, 0xd2, 0x58, 0x3f, 0xdd, 0xb5, 0x21, 0xb5, 0x76, 0x75, 0x1a, 0x6b, 0xc3,
	0x10, 0x53, 0x2c, 0x88, 0x34, 0x24, 0x54, 0x8b, 0xb5, 0x04, 0xe4, 0xdb, 0x0e, 0x8d, 0xb5, 0x0c,
	0x22, 0x35, 0x3c, 0xec, 0x61, 0x06, 0xd2, 0x93, 0xaf, 0x14, 0x2f, 0x35, 0x3d, 0x8c, 0xbd, 0x01,
	0xd4, 0x59, 0x64, 0x47, 0x7d, 0xdd, 0x42, 0xa3, 0x2c, 0xb5, 0x95, 0xa5, 0xac, 0xa1, 0xaf, 0x5b,
	0x08, 0x61, 0x6a, 0x51, 0x1f, 0x23, 0x92, 0x65, 0x65, 0x07, 0x93, 0x00, 0x13, 0xdd, 0xb6, 0x08,
	0x2c, 0x68, 0x38, 0xd8, 0x47, 0xf9, 0xc2, 0x69, 0xde, 0x4c, 0x77, 0x4c, 0x83, 0x34, 0xa5, 0x7c,
	0xca, 0x01, 0xe1, 0x88, 0x78, 0x06, 0xf4, 0x7c, 0x42, 0x61, 0xd8, 0x75, 0x1c, 0x1c, 0x21, 0x2a,
	0x34, 0x40, 0x05, 0x7f, 0x84, 0x60, 0x28, 0x72, 0x6d, 0xae, 0x53, 0x37, 0xd2, 0x40, 0x78, 0x13,
	0x3c, 0xe5, 0x60, 0x84, 0xa0, 0x93, 0x6c, 0x6e, 0xfa, 0xae, 0x78, 0x2f, 0xc9, 0xf6, 0xc4, 0xeb,
	0x8b, 0x56, 0x63, 0x64, 0x05, 0x83, 0xd7, 0x94, 0xa9, 0xb4, 0x62, 0xdc, 0xff, 0x2b, 0x3e, 0x74,
	0x05, 0x11, 0x54, 0x4f, 0x61, 0x48, 0x7c, 0x8c, 0x44, 0x9e, 0x2d, 0x9b, 0x87, 0xca, 0x16, 0x90,
	0xe6, 0x49, 0x18, 0x90, 0x0c, 0x31, 0x22, 0x50, 0xf9, 0x9c, 0x03, 0x9b, 0x47, 0xc4, 0x7b, 0x2f,
	0xb2, 0x03, 0x9f, 0x1e, 0xc7, 0x77, 0x43, 0xee, 0x11, 0xe0, 0x03, 0xe2, 0x31, 0x62, 0x9b, 0x7b,
	0x0d, 0x2d, 0xed, 0xb7, 0x96, 0x4b, 0xa1, 0x75, 0xd1, 0xc8, 0x48, 0x00, 0xca, 0x73, 0xe0, 0xe1,
	0x04, 0x97, 0x82, 0xe3, 0x77, 0x3c, 0x78, 0x50, 0xfc, 0xbf, 0x1b, 0x51, 0x7c, 0x57, 0x3c, 0x1b,
	0xa0, 0x32, 0xb0, 0x6c, 0x38, 0xc8, 0x5a, 0x98, 0x06, 0xc2, 0x2b, 0xa0, 0x1c, 0x10, 0x8f, 0x88,
	0xe5, 0x36, 0x7f, 0x13, 0xfd, 0xde, 0xe6, 0x8f, 0xdf, 0xab, 0x55, 0xe2, 0x9e, 0x68, 0x49, 0xab,
	0x19, 0x5c, 0x90, 0x40, 0xcd, 0x8d, 0x42, 0xe6, 0x25, 0xb1, 0xc2, 0xd6, 0x2b, 0x62, 0xa1, 0x09,
	0x6a, 0x84, 0x5a, 0x21, 0x35, 0x2d, 0x2a, 0x6e, 0xb4, 0xb9, 0x4e, 0xd9, 0xa8, 0xb2, 0xb8, 0x4b,
	0x93, 0x32, 0x1f, 0x51, 0x18, 0x9e, 0x5a, 0x03, 0xb1, 0x9a, 0x96, 0xe5, 0xb1, 0xf0, 0x31, 0xa8,
	0xf7, 0x21, 0x34, 0xfb, 0x11, 0x72, 0x89, 0x58, 0x63, 0x74, 0x9a, 0x5a, 0x66, 0xb9, 0xc4, 0x9f,
	0xf9, 0x1d, 0xd0, 0x0e, 0xb0, 0x8f, 0x7a, 0x6f, 0x9d, 0x5d, 0xb4, 0x4a, 0xd7, 0x17, 0xad, 0x67,
	0xd2, 0x93, 0x17, 0x95, 0xca, 0xb7, 0xbf, 0xb5, 0x3a, 0x9e, 0x4f, 0x3f, 0x8c, 0x6c, 0xcd, 0xc1,
	0x41, 0xe6, 0xd9, 0xec, 0x8f, 0x4a, 0xdc, 0x13, 0x9d, 0x8e, 0x86, 0x90, 0xb0, 0x45, 0x88, 0x51,
	0xeb, 0x43, 0xf8, 0x76, 0x52, 0x26, 0xec, 0x80, 0x67, 0x5d, 0x38, 0x84, 0xc8, 0x25, 0x26, 0x46,
	0x26, 0x8d, 0x4d, 0xdf, 0x25, 0x62, 0xbd, 0xcd, 0x77, 0xca, 0xc6, 0xd3, 0x59, 0xe2, 0x5d, 0x74,
	0x1c, 0x1f, 0xba, 0x44, 0x69, 0x82, 0xe7, 0x67, 0x04, 0x2b, 0xc4, 0xfc, 0x95, 0x07, 0x2f, 0xcc,
	0xfb, 0xb1, 0x8b, 0xdc, 0xff, 0xe5, 0xfd, 0xaf, 0xc8, 0x3b, 0x39, 0x6c, 0xc0, 0xf4, 0xb0, 0x79,
	0x0c, 0x76, 0x56, 0x8a, 0x5b, 0x58, 0xe1, 0x87, 0xf4, 0x5e, 0xbf, 0x3f, 0x74, 0x2d, 0x0a, 0x97,
	0x0a, 0xff, 0x10, 0x54, 0x18, 0x21, 0x26, 0x78, 0xd9, 0x28, 0xd3, 0xf8, 0xd0, 0x9d, 0x77, 0x03,
	0xff, 0xf7, 0xdc, 0x50, 0x5e, 0xe4, 0x86, 0xca, 0xed, 0xdc, 0xd0, 0x04, 0x35, 0x88, 0x5c, 0x93,
	0xfa, 0x01, 0xcc, 0x15, 0x87, 0xc8, 0x3d, 0xf6, 0x03, 0x38, 0x65, 0x86, 0xea, 0xcd, 0x66, 0xa8,
	0x2d, 0x33, 0x43, 0xfd, 0x5f, 0x61, 0x06, 0xb0, 0xe4, 0xae, 0x4f, 0x8a, 0x98, 0x0b, 0xbc, 0xf7,
	0xd3, 0x06, 0xe0, 0x8f, 0x88, 0x27, 0x7c, 0xcd, 0x81, 0x07, 0xb3, 0xaf, 0xe0, 0x13, 0xed, 0xa6,
	0x17, 0x5c, 0x9b, 0x77, 0x90, 0xb4, 0x7f, 0x1b, 0x74, 0x61, 0x30, 0xf5, 0x93, 0x9f, 0xff, 0xf8,
	0xf2, 0xde, 0x4b, 0xca, 0xb6, 0xbe, 0xe8, 0xb7, 0x44, 0x98, 0x55, 0xa9, 0x56, 0x46, 0xe9, 0x33,
	0x0e, 0xd4, 0x8a, 0x87, 0x70, 0x7b, 0xe9, 0x8e, 0x39, 0x4c, 0x52, 0xd7, 0x82, 0x15, 0x8c, 0x1e,
	0x31, 0x46, 0x6d, 0x45, 0x5e, 0xc8, 0x88, 0x30, 0xb8, 0x4a, 0x63, 0xe1, 0x2b, 0x0e, 0xdc, 0x9f,
	0x1a, 0x88, 0x3b, 0x6b, 0xec, 0x93, 0x42, 0xa5, 0xdd, 0xb5, 0xa1, 0x05, 0xad, 0xc7, 0x8c, 0xd6,
	0xb6, 0xf2, 0xe2, 0x32, 0x5a, 0x2c, 0x45, 0x63, 0xe1, 0x92, 0x03, 0xf2, 0x8a, 0xf1, 0xfd, 0xfa,
	0x6d, 0xe4, 0x9a, 0x29, 0x96, 0x0e, 0xfe, 0x41, 0x71, 0x71, 0xa2, 0x37, 0xd8, 0x89, 0x5e, 0x55,
	0xf6, 0xd7, 0x92, 0x5e, 0x9d, 0x39, 0x62, 0xd2, 0xfe, 0xa9, 0xb1, 0xb4, 0xbc, 0xfd, 0x93, 0xd0,
	0x15, 0xed, 0x5f, 0x74, 0x4f, 0x56, 0xb4, 0x3f, 0x62, 0x25, 0x39, 0xb7, 0xde, 0x3b, 0x67, 0xbf,
	0xcb, 0xa5, 0x6f, 0xc6, 0x32, 0x77, 0x36, 0x96, 0xb9, 0xf3, 0xb1, 0xcc, 0x5d, 0x8e, 0x65, 0xee,
	0x8b, 0x2b, 0xb9, 0x74, 0x7e, 0x25, 0x97, 0x7e, 0xb9, 0x92, 0x4b, 0x1f, 0x3c, 0x99, 0xb8, 0xf0,
	0x09, 0x97, 0x81, 0x65, 0x13, 0xf6, 0xa1, 0xc7, 0x53, 0x1b, 0xb0, 0xab, 0x6f, 0x6f, 0xb0, 0xd9,
	0xf6, 0xf2, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x76, 0x7b, 0xa6, 0x02, 0x70, 0x0b, 0x00, 0x00,
}

func (this *MsgRegisterAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterAccount)
	if !ok {
		that2, ok := that.(MsgRegisterAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MsgRegisterAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterAccountResponse)
	if !ok {
		that2, ok := that.(MsgRegisterAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgSubmitTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSubmitTx)
	if !ok {
		that2, ok := that.(MsgSubmitTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *MsgSubmitTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSubmitTxResponse)
	if !ok {
		that2, ok := that.(MsgSubmitTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgSubmitAutoTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSubmitAutoTx)
	if !ok {
		that2, ok := that.(MsgSubmitAutoTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.StartAt != that1.StartAt {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if len(this.FeeFunds) != len(that1.FeeFunds) {
		return false
	}
	for i := range this.FeeFunds {
		if !this.FeeFunds[i].Equal(&that1.FeeFunds[i]) {
			return false
		}
	}
	if len(this.DependsOnTxIds) != len(that1.DependsOnTxIds) {
		return false
	}
	for i := range this.DependsOnTxIds {
		if this.DependsOnTxIds[i] != that1.DependsOnTxIds[i] {
			return false
		}
	}
	return true
}
func (this *MsgSubmitAutoTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSubmitAutoTxResponse)
	if !ok {
		that2, ok := that.(MsgSubmitAutoTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRegisterAccountAndSubmitAutoTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterAccountAndSubmitAutoTx)
	if !ok {
		that2, ok := that.(MsgRegisterAccountAndSubmitAutoTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.StartAt != that1.StartAt {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if len(this.FeeFunds) != len(that1.FeeFunds) {
		return false
	}
	for i := range this.FeeFunds {
		if !this.FeeFunds[i].Equal(&that1.FeeFunds[i]) {
			return false
		}
	}
	if len(this.DependsOnTxIds) != len(that1.DependsOnTxIds) {
		return false
	}
	for i := range this.DependsOnTxIds {
		if this.DependsOnTxIds[i] != that1.DependsOnTxIds[i] {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *MsgRegisterAccountAndSubmitAutoTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterAccountAndSubmitAutoTxResponse)
	if !ok {
		that2, ok := that.(MsgRegisterAccountAndSubmitAutoTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgUpdateAutoTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateAutoTx)
	if !ok {
		that2, ok := that.(MsgUpdateAutoTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.TxId != that1.TxId {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.StartAt != that1.StartAt {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if len(this.FeeFunds) != len(that1.FeeFunds) {
		return false
	}
	for i := range this.FeeFunds {
		if !this.FeeFunds[i].Equal(&that1.FeeFunds[i]) {
			return false
		}
	}
	if len(this.DependsOnTxIds) != len(that1.DependsOnTxIds) {
		return false
	}
	for i := range this.DependsOnTxIds {
		if this.DependsOnTxIds[i] != that1.DependsOnTxIds[i] {
			return false
		}
	}
	return true
}
func (this *MsgUpdateAutoTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateAutoTxResponse)
	if !ok {
		that2, ok := that.(MsgUpdateAutoTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Register defines a rpc handler for MsgRegisterAccount
	RegisterAccount(ctx context.Context, in *MsgRegisterAccount, opts ...grpc.CallOption) (*MsgRegisterAccountResponse, error)
	SubmitTx(ctx context.Context, in *MsgSubmitTx, opts ...grpc.CallOption) (*MsgSubmitTxResponse, error)
	SubmitAutoTx(ctx context.Context, in *MsgSubmitAutoTx, opts ...grpc.CallOption) (*MsgSubmitAutoTxResponse, error)
	RegisterAccountAndSubmitAutoTx(ctx context.Context, in *MsgRegisterAccountAndSubmitAutoTx, opts ...grpc.CallOption) (*MsgRegisterAccountAndSubmitAutoTxResponse, error)
	UpdateAutoTx(ctx context.Context, in *MsgUpdateAutoTx, opts ...grpc.CallOption) (*MsgUpdateAutoTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAccount(ctx context.Context, in *MsgRegisterAccount, opts ...grpc.CallOption) (*MsgRegisterAccountResponse, error) {
	out := new(MsgRegisterAccountResponse)
	err := c.cc.Invoke(ctx, "/trst.x.autoibctx.v1beta1.Msg/RegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitTx(ctx context.Context, in *MsgSubmitTx, opts ...grpc.CallOption) (*MsgSubmitTxResponse, error) {
	out := new(MsgSubmitTxResponse)
	err := c.cc.Invoke(ctx, "/trst.x.autoibctx.v1beta1.Msg/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitAutoTx(ctx context.Context, in *MsgSubmitAutoTx, opts ...grpc.CallOption) (*MsgSubmitAutoTxResponse, error) {
	out := new(MsgSubmitAutoTxResponse)
	err := c.cc.Invoke(ctx, "/trst.x.autoibctx.v1beta1.Msg/SubmitAutoTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAccountAndSubmitAutoTx(ctx context.Context, in *MsgRegisterAccountAndSubmitAutoTx, opts ...grpc.CallOption) (*MsgRegisterAccountAndSubmitAutoTxResponse, error) {
	out := new(MsgRegisterAccountAndSubmitAutoTxResponse)
	err := c.cc.Invoke(ctx, "/trst.x.autoibctx.v1beta1.Msg/RegisterAccountAndSubmitAutoTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAutoTx(ctx context.Context, in *MsgUpdateAutoTx, opts ...grpc.CallOption) (*MsgUpdateAutoTxResponse, error) {
	out := new(MsgUpdateAutoTxResponse)
	err := c.cc.Invoke(ctx, "/trst.x.autoibctx.v1beta1.Msg/UpdateAutoTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Register defines a rpc handler for MsgRegisterAccount
	RegisterAccount(context.Context, *MsgRegisterAccount) (*MsgRegisterAccountResponse, error)
	SubmitTx(context.Context, *MsgSubmitTx) (*MsgSubmitTxResponse, error)
	SubmitAutoTx(context.Context, *MsgSubmitAutoTx) (*MsgSubmitAutoTxResponse, error)
	RegisterAccountAndSubmitAutoTx(context.Context, *MsgRegisterAccountAndSubmitAutoTx) (*MsgRegisterAccountAndSubmitAutoTxResponse, error)
	UpdateAutoTx(context.Context, *MsgUpdateAutoTx) (*MsgUpdateAutoTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAccount(ctx context.Context, req *MsgRegisterAccount) (*MsgRegisterAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (*UnimplementedMsgServer) SubmitTx(ctx context.Context, req *MsgSubmitTx) (*MsgSubmitTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTx not implemented")
}
func (*UnimplementedMsgServer) SubmitAutoTx(ctx context.Context, req *MsgSubmitAutoTx) (*MsgSubmitAutoTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAutoTx not implemented")
}
func (*UnimplementedMsgServer) RegisterAccountAndSubmitAutoTx(ctx context.Context, req *MsgRegisterAccountAndSubmitAutoTx) (*MsgRegisterAccountAndSubmitAutoTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccountAndSubmitAutoTx not implemented")
}
func (*UnimplementedMsgServer) UpdateAutoTx(ctx context.Context, req *MsgUpdateAutoTx) (*MsgUpdateAutoTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trst.x.autoibctx.v1beta1.Msg/RegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAccount(ctx, req.(*MsgRegisterAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trst.x.autoibctx.v1beta1.Msg/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitTx(ctx, req.(*MsgSubmitTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitAutoTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitAutoTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitAutoTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trst.x.autoibctx.v1beta1.Msg/SubmitAutoTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitAutoTx(ctx, req.(*MsgSubmitAutoTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAccountAndSubmitAutoTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAccountAndSubmitAutoTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAccountAndSubmitAutoTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trst.x.autoibctx.v1beta1.Msg/RegisterAccountAndSubmitAutoTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAccountAndSubmitAutoTx(ctx, req.(*MsgRegisterAccountAndSubmitAutoTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAutoTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAutoTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAutoTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trst.x.autoibctx.v1beta1.Msg/UpdateAutoTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAutoTx(ctx, req.(*MsgUpdateAutoTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trst.x.autoibctx.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _Msg_RegisterAccount_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _Msg_SubmitTx_Handler,
		},
		{
			MethodName: "SubmitAutoTx",
			Handler:    _Msg_SubmitAutoTx_Handler,
		},
		{
			MethodName: "RegisterAccountAndSubmitAutoTx",
			Handler:    _Msg_RegisterAccountAndSubmitAutoTx_Handler,
		},
		{
			MethodName: "UpdateAutoTx",
			Handler:    _Msg_UpdateAutoTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auto-ibc-tx/v1beta1/tx.proto",
}

func (m *MsgRegisterAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitAutoTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitAutoTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitAutoTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DependsOnTxIds) > 0 {
		dAtA3 := make([]byte, len(m.DependsOnTxIds)*10)
		var j2 int
		for _, num := range m.DependsOnTxIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FeeFunds) > 0 {
		for iNdEx := len(m.FeeFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Interval) > 0 {
		i -= len(m.Interval)
		copy(dAtA[i:], m.Interval)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Interval)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StartAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitAutoTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitAutoTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitAutoTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAccountAndSubmitAutoTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAccountAndSubmitAutoTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAccountAndSubmitAutoTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DependsOnTxIds) > 0 {
		dAtA5 := make([]byte, len(m.DependsOnTxIds)*10)
		var j4 int
		for _, num := range m.DependsOnTxIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FeeFunds) > 0 {
		for iNdEx := len(m.FeeFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Interval) > 0 {
		i -= len(m.Interval)
		copy(dAtA[i:], m.Interval)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Interval)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StartAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAccountAndSubmitAutoTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAccountAndSubmitAutoTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAccountAndSubmitAutoTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAutoTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAutoTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAutoTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DependsOnTxIds) > 0 {
		dAtA7 := make([]byte, len(m.DependsOnTxIds)*10)
		var j6 int
		for _, num := range m.DependsOnTxIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTx(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FeeFunds) > 0 {
		for iNdEx := len(m.FeeFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Interval) > 0 {
		i -= len(m.Interval)
		copy(dAtA[i:], m.Interval)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Interval)))
		i--
		dAtA[i] = 0x42
	}
	if m.StartAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TxId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TxId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAutoTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAutoTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAutoTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitAutoTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovTx(uint64(m.StartAt))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FeeFunds) > 0 {
		for _, e := range m.FeeFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.DependsOnTxIds) > 0 {
		l = 0
		for _, e := range m.DependsOnTxIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgSubmitAutoTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterAccountAndSubmitAutoTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovTx(uint64(m.StartAt))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FeeFunds) > 0 {
		for _, e := range m.FeeFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.DependsOnTxIds) > 0 {
		l = 0
		for _, e := range m.DependsOnTxIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAccountAndSubmitAutoTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAutoTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TxId != 0 {
		n += 1 + sovTx(uint64(m.TxId))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.EndTime != 0 {
		n += 1 + sovTx(uint64(m.EndTime))
	}
	if m.StartAt != 0 {
		n += 1 + sovTx(uint64(m.StartAt))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.FeeFunds) > 0 {
		for _, e := range m.FeeFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.DependsOnTxIds) > 0 {
		l = 0
		for _, e := range m.DependsOnTxIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUpdateAutoTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitAutoTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitAutoTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitAutoTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeFunds = append(m.FeeFunds, types1.Coin{})
			if err := m.FeeFunds[len(m.FeeFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOnTxIds = append(m.DependsOnTxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOnTxIds) == 0 {
					m.DependsOnTxIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOnTxIds = append(m.DependsOnTxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOnTxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitAutoTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitAutoTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitAutoTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAccountAndSubmitAutoTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAccountAndSubmitAutoTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAccountAndSubmitAutoTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeFunds = append(m.FeeFunds, types1.Coin{})
			if err := m.FeeFunds[len(m.FeeFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOnTxIds = append(m.DependsOnTxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOnTxIds) == 0 {
					m.DependsOnTxIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOnTxIds = append(m.DependsOnTxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOnTxIds", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAccountAndSubmitAutoTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAccountAndSubmitAutoTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAccountAndSubmitAutoTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAutoTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAutoTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAutoTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeFunds = append(m.FeeFunds, types1.Coin{})
			if err := m.FeeFunds[len(m.FeeFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOnTxIds = append(m.DependsOnTxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOnTxIds) == 0 {
					m.DependsOnTxIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOnTxIds = append(m.DependsOnTxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOnTxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAutoTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAutoTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAutoTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
