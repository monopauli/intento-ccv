// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auto-ibc-tx/v1beta1/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AutoTxInfo stores the info for the auto executing interchain accounts transaction
type AutoTxInfo struct {
	TxID          uint64                                        `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Address       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Owner         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Data          []byte                                        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Duration      time.Duration                                 `protobuf:"bytes,5,opt,name=duration,proto3,stdduration" json:"duration,omitempty"`
	Interval      time.Duration                                 `protobuf:"bytes,6,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	StartTime     time.Time                                     `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	ExecTime      time.Time                                     `protobuf:"bytes,8,opt,name=exec_time,json=execTime,proto3,stdtime" json:"exec_time"`
	EndTime       time.Time                                     `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	AutoTxHistory []*AutoTxHistoryEntry                         `protobuf:"bytes,10,rep,name=auto_tx_history,json=autoTxHistory,proto3" json:"auto_tx_history,omitempty"`
	PortID        string                                        `protobuf:"bytes,11,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ConnectionID  string                                        `protobuf:"bytes,12,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	//optional array of dependent txs that should be executed before execution is allowed
	DependsOnTxIds []uint64 `protobuf:"varint,15,rep,packed,name=depends_on_tx_ids,json=dependsOnTxIds,proto3" json:"depends_on_tx_ids,omitempty"`
	//if execution of depended tx has not happend yet
	MaxRetries uint64 `protobuf:"varint,16,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
}

func (m *AutoTxInfo) Reset()         { *m = AutoTxInfo{} }
func (m *AutoTxInfo) String() string { return proto.CompactTextString(m) }
func (*AutoTxInfo) ProtoMessage()    {}
func (*AutoTxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe2123042bf7364, []int{0}
}
func (m *AutoTxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoTxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoTxInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoTxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoTxInfo.Merge(m, src)
}
func (m *AutoTxInfo) XXX_Size() int {
	return m.Size()
}
func (m *AutoTxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoTxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AutoTxInfo proto.InternalMessageInfo

// AutoTxHistoryEntry provides a the history of AutoTx interchain tx call
type AutoTxHistoryEntry struct {
	ScheduledExecTime time.Time  `protobuf:"bytes,1,opt,name=scheduled_exec_time,json=scheduledExecTime,proto3,stdtime" json:"scheduled_exec_time"`
	ActualExecTime    time.Time  `protobuf:"bytes,2,opt,name=actual_exec_time,json=actualExecTime,proto3,stdtime" json:"actual_exec_time"`
	ExecFee           types.Coin `protobuf:"bytes,3,opt,name=exec_fee,json=execFee,proto3" json:"exec_fee"`
	ExecutedOnHost    bool       `protobuf:"varint,4,opt,name=executed_on_host,json=executedOnHost,proto3" json:"executed_on_host,omitempty"`
	Error             string     `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Retries           uint64     `protobuf:"varint,6,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (m *AutoTxHistoryEntry) Reset()         { *m = AutoTxHistoryEntry{} }
func (m *AutoTxHistoryEntry) String() string { return proto.CompactTextString(m) }
func (*AutoTxHistoryEntry) ProtoMessage()    {}
func (*AutoTxHistoryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe2123042bf7364, []int{1}
}
func (m *AutoTxHistoryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoTxHistoryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoTxHistoryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoTxHistoryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoTxHistoryEntry.Merge(m, src)
}
func (m *AutoTxHistoryEntry) XXX_Size() int {
	return m.Size()
}
func (m *AutoTxHistoryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoTxHistoryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AutoTxHistoryEntry proto.InternalMessageInfo

// Params defines the params for activeness of AutoTxs on governance proposals.
type Params struct {
	AutoTxFundsCommission      int64 `protobuf:"varint,1,opt,name=AutoTxFundsCommission,proto3" json:"AutoTxFundsCommission,omitempty"`
	AutoTxFlexFeeMul           int64 `protobuf:"varint,2,opt,name=AutoTxFlexFeeMul,proto3" json:"AutoTxFlexFeeMul,omitempty"`
	AutoTxConstantFee          int64 `protobuf:"varint,3,opt,name=AutoTxConstantFee,proto3" json:"AutoTxConstantFee,omitempty"`
	RecurringAutoTxConstantFee int64 `protobuf:"varint,4,opt,name=RecurringAutoTxConstantFee,proto3" json:"RecurringAutoTxConstantFee,omitempty"`
	//  Maximum period for self-executing AutoTx
	MaxAutoTxDuration time.Duration `protobuf:"bytes,5,opt,name=MaxAutoTxDuration,proto3,stdduration" json:"max_auto_tx_duration,omitempty"`
	//  Minimum period for self-executing AutoTx
	MinAutoTxDuration time.Duration `protobuf:"bytes,6,opt,name=MinAutoTxDuration,proto3,stdduration" json:"min_auto_tx_duration,omitempty"`
	//  Minimum period for self-executing AutoTx
	MinAutoTxInterval time.Duration `protobuf:"bytes,8,opt,name=MinAutoTxInterval,proto3,stdduration" json:"min_auto_tx_interval,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fe2123042bf7364, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AutoTxInfo)(nil), "trst.x.autoibctx.v1beta1.AutoTxInfo")
	proto.RegisterType((*AutoTxHistoryEntry)(nil), "trst.x.autoibctx.v1beta1.AutoTxHistoryEntry")
	proto.RegisterType((*Params)(nil), "trst.x.autoibctx.v1beta1.Params")
}

func init() { proto.RegisterFile("auto-ibc-tx/v1beta1/types.proto", fileDescriptor_1fe2123042bf7364) }

var fileDescriptor_1fe2123042bf7364 = []byte{
	// 882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0xe3, 0xc6, 0xcd, 0xcb, 0xb4, 0xdb, 0x4d, 0x87, 0x45, 0x32, 0x95, 0xb0, 0xa3, 0x72,
	0x09, 0xab, 0xd6, 0x56, 0x17, 0xb8, 0xec, 0x01, 0xd4, 0x24, 0x5b, 0xd6, 0x42, 0xfb, 0xa2, 0x51,
	0xb8, 0x70, 0xb1, 0x26, 0x9e, 0x69, 0x6a, 0x11, 0xcf, 0x44, 0x33, 0xe3, 0xc5, 0xfd, 0x16, 0x7b,
	0xdc, 0x23, 0x47, 0xbe, 0x04, 0xf7, 0x8a, 0x53, 0x8f, 0x9c, 0x02, 0xa4, 0x37, 0x3e, 0x02, 0x27,
	0x34, 0x63, 0x3b, 0x5b, 0x1a, 0x0a, 0x4d, 0x4f, 0x19, 0x3f, 0x2f, 0xbf, 0x27, 0xfe, 0xcf, 0xf3,
	0x3c, 0x06, 0x1e, 0xce, 0x14, 0x3f, 0x4c, 0xc6, 0xf1, 0xa1, 0xca, 0x83, 0x37, 0x47, 0x63, 0xaa,
	0xf0, 0x51, 0xa0, 0xce, 0x67, 0x54, 0xfa, 0x33, 0xc1, 0x15, 0x87, 0x8e, 0x12, 0x52, 0xf9, 0xb9,
	0xaf, 0xe3, 0x92, 0x71, 0xac, 0x72, 0xbf, 0x8c, 0xda, 0x7b, 0x34, 0xe1, 0x13, 0x6e, 0x82, 0x02,
	0x7d, 0x2a, 0xe2, 0xf7, 0xbc, 0x09, 0xe7, 0x93, 0x29, 0x0d, 0xcc, 0xd3, 0x38, 0x3b, 0x0d, 0x54,
	0x92, 0x52, 0xa9, 0x70, 0x3a, 0x2b, 0x03, 0xdc, 0x9b, 0x01, 0x24, 0x13, 0x58, 0x25, 0x9c, 0x55,
	0xfe, 0x98, 0xcb, 0x94, 0xcb, 0x60, 0x8c, 0x25, 0x5d, 0xfe, 0xa3, 0x98, 0x27, 0xa5, 0x7f, 0xff,
	0x97, 0x06, 0x00, 0xc7, 0x99, 0xe2, 0xa3, 0x3c, 0x64, 0xa7, 0x1c, 0x7e, 0x0c, 0x36, 0x55, 0x1e,
	0x25, 0xc4, 0xb1, 0xba, 0x56, 0xcf, 0xee, 0xb7, 0x16, 0x73, 0xcf, 0x1e, 0xe5, 0xe1, 0x10, 0xd9,
	0x2a, 0x0f, 0x09, 0xfc, 0x06, 0x34, 0x31, 0x21, 0x82, 0x4a, 0xe9, 0x6c, 0x74, 0xad, 0xde, 0x76,
	0xff, 0xe8, 0xaf, 0xb9, 0x77, 0x38, 0x49, 0xd4, 0x59, 0x36, 0xf6, 0x63, 0x9e, 0x06, 0x65, 0xb5,
	0xe2, 0xe7, 0x50, 0x92, 0xef, 0xcb, 0xb7, 0x3f, 0x8e, 0xe3, 0xe3, 0x22, 0x11, 0x55, 0x04, 0xf8,
	0x35, 0xd8, 0xe4, 0x3f, 0x30, 0x2a, 0x9c, 0xfa, 0x7d, 0x51, 0x45, 0x3e, 0x84, 0xc0, 0x26, 0x58,
	0x61, 0xc7, 0xd6, 0x1c, 0x64, 0xce, 0xf0, 0x5b, 0xd0, 0xaa, 0x94, 0x70, 0x36, 0xbb, 0x56, 0x6f,
	0xeb, 0xc9, 0x47, 0x7e, 0x21, 0x95, 0x5f, 0x49, 0xe5, 0x0f, 0xcb, 0x80, 0xbe, 0x7b, 0x31, 0xf7,
	0x6a, 0x7f, 0xce, 0x3d, 0x58, 0xa5, 0x1c, 0xf0, 0x34, 0x51, 0x34, 0x9d, 0xa9, 0xf3, 0x77, 0xbf,
	0x79, 0x16, 0x5a, 0xa2, 0x34, 0x36, 0x61, 0x8a, 0x8a, 0x37, 0x78, 0xea, 0x34, 0xee, 0x8c, 0xad,
	0x52, 0x6e, 0x62, 0x2b, 0x3b, 0x1c, 0x00, 0x20, 0x15, 0x16, 0x2a, 0xd2, 0xd7, 0xeb, 0x34, 0x0d,
	0x78, 0x6f, 0x05, 0x3c, 0xaa, 0xee, 0xbe, 0xdf, 0xd2, 0xe4, 0xb7, 0x9a, 0xd1, 0x36, 0x79, 0xda,
	0x03, 0x8f, 0x41, 0x9b, 0xe6, 0x34, 0x2e, 0x18, 0xad, 0x35, 0x18, 0x2d, 0x9d, 0x66, 0x10, 0x5f,
	0x81, 0x16, 0x65, 0xa4, 0x20, 0xb4, 0xd7, 0x20, 0x34, 0x29, 0x23, 0x06, 0x30, 0x02, 0x0f, 0x75,
	0x6b, 0x47, 0x2a, 0x8f, 0xce, 0x12, 0xa9, 0xb8, 0x38, 0x77, 0x40, 0xb7, 0xde, 0xdb, 0x7a, 0x72,
	0xe0, 0xdf, 0xd6, 0xf9, 0x7e, 0xd1, 0x7e, 0xcf, 0x8b, 0xf0, 0x67, 0x4c, 0x89, 0x73, 0xf4, 0x00,
	0x5f, 0xb7, 0xc1, 0x4f, 0x40, 0x73, 0xc6, 0x85, 0xd2, 0x7d, 0xb9, 0xd5, 0xb5, 0x7a, 0xed, 0x3e,
	0x58, 0xcc, 0xbd, 0xc6, 0x6b, 0x2e, 0x54, 0x38, 0x44, 0x0d, 0xed, 0x0a, 0x09, 0xfc, 0x02, 0x3c,
	0x88, 0x39, 0x63, 0x34, 0xd6, 0xda, 0xeb, 0xd0, 0x6d, 0x13, 0xda, 0x59, 0xcc, 0xbd, 0xed, 0xc1,
	0xd2, 0x11, 0x0e, 0xd1, 0xf6, 0xfb, 0xb0, 0x90, 0xc0, 0x4f, 0xc1, 0x2e, 0xa1, 0x33, 0xca, 0x88,
	0x8c, 0x38, 0x8b, 0x4c, 0xf3, 0x4b, 0xe7, 0x61, 0xb7, 0xde, 0xb3, 0xd1, 0x4e, 0xe9, 0x78, 0xc5,
	0x46, 0x79, 0x48, 0x24, 0xf4, 0xc0, 0x56, 0x8a, 0xf3, 0x48, 0x50, 0x25, 0x12, 0x2a, 0x9d, 0x8e,
	0x1e, 0x11, 0x04, 0x52, 0x9c, 0xa3, 0xc2, 0xb2, 0x7f, 0xb9, 0x01, 0xe0, 0xea, 0xdb, 0xc0, 0x11,
	0xf8, 0x40, 0xc6, 0x67, 0x94, 0x64, 0x53, 0x4a, 0xa2, 0xf7, 0x57, 0x64, 0xad, 0x21, 0xf0, 0xee,
	0x12, 0xf0, 0xac, 0xba, 0xab, 0x97, 0xa0, 0x83, 0x63, 0x95, 0xe1, 0xe9, 0x35, 0xe4, 0xc6, 0x1a,
	0xc8, 0x9d, 0x22, 0x7b, 0xc9, 0x7b, 0x0a, 0x4c, 0x1f, 0x44, 0xa7, 0x94, 0x9a, 0x89, 0xd4, 0xad,
	0x5d, 0x0c, 0x9f, 0xaf, 0x97, 0xc7, 0xf2, 0xba, 0x06, 0x3c, 0x61, 0x7d, 0x5b, 0x63, 0x50, 0x53,
	0x27, 0x9c, 0x50, 0x0a, 0x7b, 0xa0, 0xa3, 0x8f, 0x99, 0xa2, 0x44, 0xab, 0x78, 0xc6, 0xa5, 0x32,
	0xd3, 0xd8, 0x42, 0x3b, 0x95, 0xfd, 0x15, 0x7b, 0xce, 0xa5, 0x82, 0x8f, 0xc0, 0x26, 0x15, 0x82,
	0x0b, 0x33, 0x94, 0x6d, 0x54, 0x3c, 0x40, 0x07, 0x34, 0x2b, 0x55, 0x1b, 0x46, 0xd5, 0xea, 0x71,
	0xff, 0x67, 0x1b, 0x34, 0x5e, 0x63, 0x81, 0x53, 0x09, 0x3f, 0x07, 0x1f, 0x16, 0xe2, 0x9e, 0x64,
	0x8c, 0xc8, 0x01, 0x4f, 0xd3, 0x44, 0x4a, 0x3d, 0xdf, 0x5a, 0xc8, 0x3a, 0xfa, 0x77, 0x27, 0x7c,
	0x0c, 0x3a, 0xa5, 0x63, 0x4a, 0xf3, 0x13, 0x4a, 0x5f, 0x64, 0x53, 0x23, 0x53, 0x1d, 0xad, 0xd8,
	0xe1, 0x01, 0xd8, 0x2d, 0x6c, 0x03, 0xce, 0xa4, 0xc2, 0x4c, 0x9d, 0x94, 0x5a, 0xd4, 0xd1, 0xaa,
	0x03, 0x7e, 0x09, 0xf6, 0x10, 0x8d, 0x33, 0x21, 0x12, 0x36, 0x59, 0x4d, 0xb3, 0x4d, 0xda, 0x7f,
	0x44, 0x40, 0x09, 0x76, 0x5f, 0xe0, 0xbc, 0xb0, 0x0f, 0xef, 0xbc, 0xab, 0x1e, 0x97, 0x4b, 0xc5,
	0xd5, 0xad, 0x58, 0xcd, 0xda, 0x2d, 0x7b, 0x6b, 0x95, 0x6f, 0x8a, 0x26, 0xec, 0x46, 0xd1, 0xc6,
	0xdd, 0x8b, 0x26, 0xec, 0xff, 0x8b, 0xde, 0xe4, 0xff, 0xa3, 0x68, 0x58, 0xad, 0xcf, 0xd6, 0xbd,
	0x8a, 0xde, 0xb2, 0x4a, 0x57, 0xf9, 0x4f, 0xed, 0x77, 0x3f, 0x7a, 0xb5, 0xfe, 0xcb, 0x8b, 0x3f,
	0xdc, 0xda, 0x4f, 0x0b, 0xd7, 0xba, 0x58, 0xb8, 0xd6, 0xe5, 0xc2, 0xb5, 0x7e, 0x5f, 0xb8, 0xd6,
	0xdb, 0x2b, 0xb7, 0x76, 0x79, 0xe5, 0xd6, 0x7e, 0xbd, 0x72, 0x6b, 0xdf, 0x1d, 0x5c, 0xfb, 0xe6,
	0xe8, 0x1d, 0x35, 0xc5, 0x63, 0x69, 0x0e, 0x41, 0x1e, 0x5c, 0xff, 0x9c, 0x9b, 0xaf, 0xcf, 0xb8,
	0x61, 0xfe, 0xe7, 0x67, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x66, 0x79, 0x21, 0xea, 0x07,
	0x00, 0x00,
}

func (this *AutoTxInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoTxInfo)
	if !ok {
		that2, ok := that.(AutoTxInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxID != that1.TxID {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.ExecTime.Equal(that1.ExecTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if len(this.AutoTxHistory) != len(that1.AutoTxHistory) {
		return false
	}
	for i := range this.AutoTxHistory {
		if !this.AutoTxHistory[i].Equal(that1.AutoTxHistory[i]) {
			return false
		}
	}
	if this.PortID != that1.PortID {
		return false
	}
	if this.ConnectionID != that1.ConnectionID {
		return false
	}
	if len(this.DependsOnTxIds) != len(that1.DependsOnTxIds) {
		return false
	}
	for i := range this.DependsOnTxIds {
		if this.DependsOnTxIds[i] != that1.DependsOnTxIds[i] {
			return false
		}
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	return true
}
func (this *AutoTxHistoryEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoTxHistoryEntry)
	if !ok {
		that2, ok := that.(AutoTxHistoryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduledExecTime.Equal(that1.ScheduledExecTime) {
		return false
	}
	if !this.ActualExecTime.Equal(that1.ActualExecTime) {
		return false
	}
	if !this.ExecFee.Equal(&that1.ExecFee) {
		return false
	}
	if this.ExecutedOnHost != that1.ExecutedOnHost {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Retries != that1.Retries {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutoTxFundsCommission != that1.AutoTxFundsCommission {
		return false
	}
	if this.AutoTxFlexFeeMul != that1.AutoTxFlexFeeMul {
		return false
	}
	if this.AutoTxConstantFee != that1.AutoTxConstantFee {
		return false
	}
	if this.RecurringAutoTxConstantFee != that1.RecurringAutoTxConstantFee {
		return false
	}
	if this.MaxAutoTxDuration != that1.MaxAutoTxDuration {
		return false
	}
	if this.MinAutoTxDuration != that1.MinAutoTxDuration {
		return false
	}
	if this.MinAutoTxInterval != that1.MinAutoTxInterval {
		return false
	}
	return true
}
func (m *AutoTxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoTxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoTxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRetries != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRetries))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.DependsOnTxIds) > 0 {
		dAtA2 := make([]byte, len(m.DependsOnTxIds)*10)
		var j1 int
		for _, num := range m.DependsOnTxIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ConnectionID) > 0 {
		i -= len(m.ConnectionID)
		copy(dAtA[i:], m.ConnectionID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConnectionID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AutoTxHistory) > 0 {
		for iNdEx := len(m.AutoTxHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoTxHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExecTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExecTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTypes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x3a
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTypes(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintTypes(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TxID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AutoTxHistoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoTxHistoryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoTxHistoryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retries != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExecutedOnHost {
		i--
		if m.ExecutedOnHost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.ExecFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ActualExecTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualExecTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintTypes(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x12
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ScheduledExecTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ScheduledExecTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintTypes(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n11, err11 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MinAutoTxInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinAutoTxInterval):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintTypes(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x42
	n12, err12 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MinAutoTxDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinAutoTxDuration):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintTypes(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x32
	n13, err13 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxAutoTxDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxAutoTxDuration):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintTypes(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x2a
	if m.RecurringAutoTxConstantFee != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RecurringAutoTxConstantFee))
		i--
		dAtA[i] = 0x20
	}
	if m.AutoTxConstantFee != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoTxConstantFee))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoTxFlexFeeMul != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoTxFlexFeeMul))
		i--
		dAtA[i] = 0x10
	}
	if m.AutoTxFundsCommission != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoTxFundsCommission))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AutoTxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxID != 0 {
		n += 1 + sovTypes(uint64(m.TxID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExecTime)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTypes(uint64(l))
	if len(m.AutoTxHistory) > 0 {
		for _, e := range m.AutoTxHistory {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ConnectionID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DependsOnTxIds) > 0 {
		l = 0
		for _, e := range m.DependsOnTxIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.MaxRetries != 0 {
		n += 2 + sovTypes(uint64(m.MaxRetries))
	}
	return n
}

func (m *AutoTxHistoryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ScheduledExecTime)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualExecTime)
	n += 1 + l + sovTypes(uint64(l))
	l = m.ExecFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.ExecutedOnHost {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Retries != 0 {
		n += 1 + sovTypes(uint64(m.Retries))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoTxFundsCommission != 0 {
		n += 1 + sovTypes(uint64(m.AutoTxFundsCommission))
	}
	if m.AutoTxFlexFeeMul != 0 {
		n += 1 + sovTypes(uint64(m.AutoTxFlexFeeMul))
	}
	if m.AutoTxConstantFee != 0 {
		n += 1 + sovTypes(uint64(m.AutoTxConstantFee))
	}
	if m.RecurringAutoTxConstantFee != 0 {
		n += 1 + sovTypes(uint64(m.RecurringAutoTxConstantFee))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxAutoTxDuration)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinAutoTxDuration)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinAutoTxInterval)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoTxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoTxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoTxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			m.TxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTxHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoTxHistory = append(m.AutoTxHistory, &AutoTxHistoryEntry{})
			if err := m.AutoTxHistory[len(m.AutoTxHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DependsOnTxIds = append(m.DependsOnTxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DependsOnTxIds) == 0 {
					m.DependsOnTxIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DependsOnTxIds = append(m.DependsOnTxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DependsOnTxIds", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoTxHistoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoTxHistoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoTxHistoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ScheduledExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ActualExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedOnHost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecutedOnHost = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTxFundsCommission", wireType)
			}
			m.AutoTxFundsCommission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoTxFundsCommission |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTxFlexFeeMul", wireType)
			}
			m.AutoTxFlexFeeMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoTxFlexFeeMul |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTxConstantFee", wireType)
			}
			m.AutoTxConstantFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoTxConstantFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecurringAutoTxConstantFee", wireType)
			}
			m.RecurringAutoTxConstantFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecurringAutoTxConstantFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAutoTxDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxAutoTxDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAutoTxDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MinAutoTxDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAutoTxInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MinAutoTxInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
