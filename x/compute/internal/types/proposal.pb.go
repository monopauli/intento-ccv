// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compute/v1beta1/proposal.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoreCodeProposal gov proposal content type to submit WASM code to the system
type StoreCodeProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the contract's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// WASMByteCode can be raw or gzip compressed
	WASMByteCode []byte `protobuf:"bytes,4,opt,name=wasm_byte_code,json=wasmByteCode,proto3" json:"wasm_byte_code,omitempty"`
	// ContractTitle is a short summary
	ContractTitle string `protobuf:"bytes,5,opt,name=contract_title,json=contractTitle,proto3" json:"contract_title,omitempty"`
	// Description is a human readable text
	ContractDescription string `protobuf:"bytes,6,opt,name=contract_description,json=contractDescription,proto3" json:"contract_description,omitempty"`
	// contract_duration is the max duration of the contract
	ContractDuration string `protobuf:"bytes,7,opt,name=contract_duration,json=contractDuration,proto3" json:"contract_duration,omitempty"`
}

func (m *StoreCodeProposal) Reset()      { *m = StoreCodeProposal{} }
func (*StoreCodeProposal) ProtoMessage() {}
func (*StoreCodeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab99009f5724d2c, []int{0}
}
func (m *StoreCodeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreCodeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreCodeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreCodeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreCodeProposal.Merge(m, src)
}
func (m *StoreCodeProposal) XXX_Size() int {
	return m.Size()
}
func (m *StoreCodeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreCodeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_StoreCodeProposal proto.InternalMessageInfo

// InstantiateContractProposal gov proposal content type to instantiate a
// contract.
type InstantiateContractProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the contract's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// Proposer is the address that is verified for the sender signature in the enclave
	Proposer string `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// CodeID is the reference to the stored WASM code
	CodeID uint64 `protobuf:"varint,5,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// Contract_id is optional metadata to be stored with a constract instance.
	ContractId string `protobuf:"bytes,6,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// Msg json encoded message to be passed to the contract on instantiation
	InitMsg []byte `protobuf:"bytes,7,opt,name=init_msg,json=initMsg,proto3" json:"init_msg,omitempty"`
	// AutoMsg json encoded message to be passed to the contract on instantiation
	AutoMsg []byte `protobuf:"bytes,8,opt,name=auto_msg,json=autoMsg,proto3" json:"auto_msg,omitempty"`
	// Funds coins that are transferred to the contract on instantiation
	InitFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=init_funds,json=initFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"init_funds"`
}

func (m *InstantiateContractProposal) Reset()      { *m = InstantiateContractProposal{} }
func (*InstantiateContractProposal) ProtoMessage() {}
func (*InstantiateContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab99009f5724d2c, []int{1}
}
func (m *InstantiateContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstantiateContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstantiateContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstantiateContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstantiateContractProposal.Merge(m, src)
}
func (m *InstantiateContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *InstantiateContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InstantiateContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InstantiateContractProposal proto.InternalMessageInfo

// ExecuteContractProposal gov proposal content type to call execute on a
// contract.
type ExecuteContractProposal struct {
	// Title is a short summary
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description is a human readable text
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// RunAs is the address that is passed to the contract's environment as sender
	RunAs string `protobuf:"bytes,3,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// Proposer is the address that is verified for the sender signature in the enclave
	Proposer string `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// Contract is the address of the smart contract
	Contract string `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	// Msg json encoded message to be passed to the contract as execute
	Msg []byte `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	// Funds coins that are transferred to the contract on instantiation
	SentFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=sent_funds,json=sentFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"sent_funds"`
}

func (m *ExecuteContractProposal) Reset()      { *m = ExecuteContractProposal{} }
func (*ExecuteContractProposal) ProtoMessage() {}
func (*ExecuteContractProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab99009f5724d2c, []int{2}
}
func (m *ExecuteContractProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteContractProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteContractProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteContractProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteContractProposal.Merge(m, src)
}
func (m *ExecuteContractProposal) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteContractProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteContractProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteContractProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreCodeProposal)(nil), "trst.x.compute.v1beta1.StoreCodeProposal")
	proto.RegisterType((*InstantiateContractProposal)(nil), "trst.x.compute.v1beta1.InstantiateContractProposal")
	proto.RegisterType((*ExecuteContractProposal)(nil), "trst.x.compute.v1beta1.ExecuteContractProposal")
}

func init() { proto.RegisterFile("compute/v1beta1/proposal.proto", fileDescriptor_eab99009f5724d2c) }

var fileDescriptor_eab99009f5724d2c = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0x93, 0x6e, 0x4b, 0x5b, 0xb7, 0xdf, 0xd4, 0xe5, 0x2b, 0xd0, 0x15, 0xc9, 0xad, 0x8a,
	0x90, 0x2a, 0x21, 0x12, 0x0a, 0x12, 0xf7, 0xeb, 0x06, 0x52, 0x2f, 0x26, 0xa1, 0x0c, 0x69, 0x12,
	0x37, 0x91, 0x93, 0x98, 0x62, 0x68, 0xed, 0xc8, 0x76, 0xa0, 0x7d, 0x0b, 0x9e, 0x00, 0x89, 0x3b,
	0xc4, 0x93, 0xf4, 0x72, 0x97, 0xbb, 0x2a, 0x2c, 0x7d, 0x01, 0x1e, 0x01, 0xd9, 0x4e, 0xba, 0xbe,
	0xc0, 0xc4, 0x55, 0x7d, 0xce, 0xff, 0x7f, 0x4e, 0x8e, 0x7f, 0x3d, 0x32, 0x80, 0x31, 0x9b, 0xa7,
	0x99, 0xc4, 0xfe, 0xe7, 0x51, 0x84, 0x25, 0x1a, 0xf9, 0x29, 0x67, 0x29, 0x13, 0x68, 0xe6, 0xa5,
	0x9c, 0x49, 0xe6, 0xde, 0x97, 0x5c, 0x48, 0x6f, 0xe1, 0x15, 0x36, 0xaf, 0xb0, 0x75, 0xdb, 0x53,
	0x36, 0x65, 0xda, 0xe2, 0xab, 0x93, 0x71, 0x77, 0x61, 0xcc, 0xc4, 0x9c, 0x09, 0x3f, 0x42, 0xe2,
	0xb6, 0x63, 0xcc, 0x08, 0x35, 0xfa, 0xe0, 0x7b, 0x05, 0x1c, 0x5d, 0x48, 0xc6, 0xf1, 0x29, 0x4b,
	0xf0, 0x9b, 0xe2, 0x4b, 0x6e, 0x1b, 0x1c, 0x48, 0x22, 0x67, 0xb8, 0x63, 0xf7, 0xed, 0x61, 0x3d,
	0x30, 0x81, 0xdb, 0x07, 0x8d, 0x04, 0x8b, 0x98, 0x93, 0x54, 0x12, 0x46, 0x3b, 0x15, 0xad, 0xed,
	0xa6, 0xdc, 0x7b, 0xc0, 0xe1, 0x19, 0x0d, 0x91, 0xe8, 0xec, 0x99, 0x42, 0x9e, 0xd1, 0x13, 0xe1,
	0xbe, 0x04, 0x87, 0x5f, 0x90, 0x98, 0x87, 0xd1, 0x52, 0xe2, 0x30, 0x66, 0x09, 0xee, 0xec, 0xf7,
	0xed, 0x61, 0x73, 0xdc, 0xca, 0xd7, 0xbd, 0xe6, 0xe5, 0xc9, 0xc5, 0xf9, 0x78, 0x29, 0xf5, 0x00,
	0x41, 0x53, 0xf9, 0xca, 0xc8, 0x7d, 0x0c, 0x0e, 0x63, 0x46, 0x25, 0x47, 0xb1, 0x0c, 0xcd, 0x3c,
	0x07, 0xba, 0xed, 0x7f, 0x65, 0xf6, 0xad, 0x9e, 0x6b, 0x04, 0xda, 0x5b, 0xdb, 0xee, 0x80, 0x8e,
	0x36, 0xff, 0x5f, 0x6a, 0x67, 0x3b, 0x83, 0x3e, 0x01, 0x47, 0xb7, 0x25, 0x19, 0x47, 0xda, 0x5f,
	0xd5, 0xfe, 0xd6, 0xd6, 0x5f, 0xe4, 0x07, 0x7f, 0x2a, 0xe0, 0xe1, 0x84, 0x0a, 0x89, 0xa8, 0x24,
	0x48, 0x8d, 0x66, 0xf4, 0xbb, 0xa2, 0xd5, 0x05, 0x35, 0xf3, 0x97, 0x63, 0xae, 0x39, 0xd5, 0x83,
	0x6d, 0xec, 0x3e, 0x02, 0x55, 0xc5, 0x2f, 0x24, 0x89, 0x46, 0xb1, 0x3f, 0x06, 0xf9, 0xba, 0xe7,
	0x28, 0x58, 0x93, 0xb3, 0xc0, 0x51, 0xd2, 0x24, 0x71, 0x7b, 0xa0, 0xb1, 0xbd, 0x1c, 0x49, 0x0a,
	0x0c, 0xa0, 0x4c, 0x4d, 0x12, 0xf7, 0x18, 0xd4, 0x08, 0x25, 0x32, 0x9c, 0x8b, 0xa9, 0xbe, 0x74,
	0x33, 0xa8, 0xaa, 0xf8, 0x5c, 0x4c, 0x95, 0x84, 0x32, 0xc9, 0xb4, 0x54, 0x33, 0x92, 0x8a, 0x95,
	0xf4, 0x11, 0x00, 0x5d, 0xf5, 0x3e, 0xa3, 0x89, 0xe8, 0xd4, 0xfb, 0x7b, 0xc3, 0xc6, 0xf3, 0x63,
	0xcf, 0xec, 0x97, 0xa7, 0xf6, 0xab, 0x5c, 0x45, 0xef, 0x94, 0x11, 0x3a, 0x7e, 0xb6, 0x5a, 0xf7,
	0xac, 0x9f, 0xbf, 0x7a, 0xc3, 0x29, 0x91, 0x1f, 0xb2, 0x48, 0xed, 0xab, 0x5f, 0x2c, 0xa3, 0xf9,
	0x79, 0x2a, 0x92, 0x4f, 0xbe, 0x5c, 0xa6, 0x58, 0xe8, 0x02, 0x11, 0xd4, 0x55, 0xfb, 0xd7, 0xaa,
	0xfb, 0xe0, 0x5b, 0x05, 0x3c, 0x78, 0xb5, 0xc0, 0x71, 0xf6, 0x6f, 0x71, 0x77, 0x41, 0xad, 0xc4,
	0x56, 0xac, 0xde, 0x36, 0x76, 0x5b, 0x60, 0x4f, 0x41, 0x72, 0x34, 0x24, 0x75, 0x54, 0x80, 0x04,
	0xa6, 0x25, 0xa0, 0xea, 0x1d, 0x00, 0x52, 0xed, 0x35, 0xa0, 0xf1, 0xe5, 0xea, 0x06, 0x5a, 0xd7,
	0x37, 0xd0, 0xfa, 0x91, 0x43, 0x7b, 0x95, 0x43, 0xfb, 0x2a, 0x87, 0xf6, 0xef, 0x1c, 0xda, 0x5f,
	0x37, 0xd0, 0xba, 0xda, 0x40, 0xeb, 0x7a, 0x03, 0xad, 0x77, 0xa3, 0x9d, 0xd6, 0xea, 0xd9, 0x98,
	0xa1, 0x48, 0xe8, 0x83, 0xbf, 0xf0, 0xcb, 0x67, 0x86, 0x50, 0x89, 0x39, 0x45, 0x33, 0xf3, 0xa5,
	0xc8, 0xd1, 0xef, 0xc2, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xb4, 0x42, 0xcc, 0x87,
	0x04, 0x00, 0x00,
}

func (this *StoreCodeProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoreCodeProposal)
	if !ok {
		that2, ok := that.(StoreCodeProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if !bytes.Equal(this.WASMByteCode, that1.WASMByteCode) {
		return false
	}
	if this.ContractTitle != that1.ContractTitle {
		return false
	}
	if this.ContractDescription != that1.ContractDescription {
		return false
	}
	if this.ContractDuration != that1.ContractDuration {
		return false
	}
	return true
}
func (this *InstantiateContractProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InstantiateContractProposal)
	if !ok {
		that2, ok := that.(InstantiateContractProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.CodeID != that1.CodeID {
		return false
	}
	if this.ContractId != that1.ContractId {
		return false
	}
	if !bytes.Equal(this.InitMsg, that1.InitMsg) {
		return false
	}
	if !bytes.Equal(this.AutoMsg, that1.AutoMsg) {
		return false
	}
	if len(this.InitFunds) != len(that1.InitFunds) {
		return false
	}
	for i := range this.InitFunds {
		if !this.InitFunds[i].Equal(&that1.InitFunds[i]) {
			return false
		}
	}
	return true
}
func (this *ExecuteContractProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteContractProposal)
	if !ok {
		that2, ok := that.(ExecuteContractProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.Contract != that1.Contract {
		return false
	}
	if !bytes.Equal(this.Msg, that1.Msg) {
		return false
	}
	if len(this.SentFunds) != len(that1.SentFunds) {
		return false
	}
	for i := range this.SentFunds {
		if !this.SentFunds[i].Equal(&that1.SentFunds[i]) {
			return false
		}
	}
	return true
}
func (m *StoreCodeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreCodeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreCodeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractDuration) > 0 {
		i -= len(m.ContractDuration)
		copy(dAtA[i:], m.ContractDuration)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractDuration)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContractDescription) > 0 {
		i -= len(m.ContractDescription)
		copy(dAtA[i:], m.ContractDescription)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractDescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractTitle) > 0 {
		i -= len(m.ContractTitle)
		copy(dAtA[i:], m.ContractTitle)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WASMByteCode) > 0 {
		i -= len(m.WASMByteCode)
		copy(dAtA[i:], m.WASMByteCode)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.WASMByteCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstantiateContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiateContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstantiateContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitFunds) > 0 {
		for iNdEx := len(m.InitFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.AutoMsg) > 0 {
		i -= len(m.AutoMsg)
		copy(dAtA[i:], m.AutoMsg)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.AutoMsg)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InitMsg) > 0 {
		i -= len(m.InitMsg)
		copy(dAtA[i:], m.InitMsg)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.InitMsg)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0x32
	}
	if m.CodeID != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.CodeID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteContractProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteContractProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteContractProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SentFunds) > 0 {
		for iNdEx := len(m.SentFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunAs) > 0 {
		i -= len(m.RunAs)
		copy(dAtA[i:], m.RunAs)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RunAs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreCodeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.WASMByteCode)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractTitle)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractDescription)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ContractDuration)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *InstantiateContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.CodeID != 0 {
		n += 1 + sovProposal(uint64(m.CodeID))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.InitMsg)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.AutoMsg)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.InitFunds) > 0 {
		for _, e := range m.InitFunds {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *ExecuteContractProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.SentFunds) > 0 {
		for _, e := range m.SentFunds {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreCodeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreCodeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreCodeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WASMByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WASMByteCode = append(m.WASMByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.WASMByteCode == nil {
				m.WASMByteCode = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantiateContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiateContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiateContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeID", wireType)
			}
			m.CodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitMsg = append(m.InitMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.InitMsg == nil {
				m.InitMsg = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoMsg = append(m.AutoMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.AutoMsg == nil {
				m.AutoMsg = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitFunds = append(m.InitFunds, types.Coin{})
			if err := m.InitFunds[len(m.InitFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteContractProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteContractProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteContractProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentFunds = append(m.SentFunds, types.Coin{})
			if err := m.SentFunds[len(m.SentFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
