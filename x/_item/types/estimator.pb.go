// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item/v1beta1/estimator.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Profile struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// string username = 2;
	Estimations []*EstimationInfo `protobuf:"bytes,2,rep,name=estimations,proto3" json:"estimations,omitempty"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Profile) GetEstimations() []*EstimationInfo {
	if m != nil {
		return m.Estimations
	}
	return nil
}

type EstimationInfo struct {
	Itemid      uint64 `protobuf:"varint,1,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Interested  bool   `protobuf:"varint,2,opt,name=interested,proto3" json:"interested,omitempty"`
	ItemCreator string `protobuf:"bytes,3,opt,name=item_creator,json=itemCreator,proto3" json:"item_creator,omitempty"`
}

func (m *EstimationInfo) Reset()         { *m = EstimationInfo{} }
func (m *EstimationInfo) String() string { return proto.CompactTextString(m) }
func (*EstimationInfo) ProtoMessage()    {}
func (*EstimationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{1}
}
func (m *EstimationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimationInfo.Merge(m, src)
}
func (m *EstimationInfo) XXX_Size() int {
	return m.Size()
}
func (m *EstimationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EstimationInfo proto.InternalMessageInfo

func (m *EstimationInfo) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *EstimationInfo) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

func (m *EstimationInfo) GetItemCreator() string {
	if m != nil {
		return m.ItemCreator
	}
	return ""
}

type MsgCreateEstimation struct {
	Estimator   string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	EstimateMsg []byte `protobuf:"bytes,2,opt,name=estimate_msg,json=estimateMsg,proto3" json:"estimate_msg,omitempty"`
	Itemid      uint64 `protobuf:"varint,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Deposit     int64  `protobuf:"varint,4,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Interested  bool   `protobuf:"varint,5,opt,name=interested,proto3" json:"interested,omitempty"`
}

func (m *MsgCreateEstimation) Reset()         { *m = MsgCreateEstimation{} }
func (m *MsgCreateEstimation) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEstimation) ProtoMessage()    {}
func (*MsgCreateEstimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{2}
}
func (m *MsgCreateEstimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEstimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEstimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEstimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEstimation.Merge(m, src)
}
func (m *MsgCreateEstimation) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEstimation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEstimation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEstimation proto.InternalMessageInfo

func (m *MsgCreateEstimation) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgCreateEstimation) GetEstimateMsg() []byte {
	if m != nil {
		return m.EstimateMsg
	}
	return nil
}

func (m *MsgCreateEstimation) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgCreateEstimation) GetDeposit() int64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *MsgCreateEstimation) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

type MsgUpdateLike struct {
	Estimator  string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid     uint64 `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Interested bool   `protobuf:"varint,3,opt,name=interested,proto3" json:"interested,omitempty"`
}

func (m *MsgUpdateLike) Reset()         { *m = MsgUpdateLike{} }
func (m *MsgUpdateLike) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLike) ProtoMessage()    {}
func (*MsgUpdateLike) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{3}
}
func (m *MsgUpdateLike) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLike) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLike.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLike) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLike.Merge(m, src)
}
func (m *MsgUpdateLike) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLike) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLike.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLike proto.InternalMessageInfo

func (m *MsgUpdateLike) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgUpdateLike) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgUpdateLike) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

type MsgDeleteEstimation struct {
	Estimator string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid    uint64 `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	DeleteMsg []byte `protobuf:"bytes,3,opt,name=delete_msg,json=deleteMsg,proto3" json:"delete_msg,omitempty"`
}

func (m *MsgDeleteEstimation) Reset()         { *m = MsgDeleteEstimation{} }
func (m *MsgDeleteEstimation) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteEstimation) ProtoMessage()    {}
func (*MsgDeleteEstimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{4}
}
func (m *MsgDeleteEstimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteEstimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteEstimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteEstimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteEstimation.Merge(m, src)
}
func (m *MsgDeleteEstimation) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteEstimation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteEstimation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteEstimation proto.InternalMessageInfo

func (m *MsgDeleteEstimation) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgDeleteEstimation) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgDeleteEstimation) GetDeleteMsg() []byte {
	if m != nil {
		return m.DeleteMsg
	}
	return nil
}

type MsgFlagItem struct {
	Estimator string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid    uint64 `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	FlagMsg   []byte `protobuf:"bytes,3,opt,name=flag_msg,json=flagMsg,proto3" json:"flag_msg,omitempty"`
}

func (m *MsgFlagItem) Reset()         { *m = MsgFlagItem{} }
func (m *MsgFlagItem) String() string { return proto.CompactTextString(m) }
func (*MsgFlagItem) ProtoMessage()    {}
func (*MsgFlagItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3c2e04bce3c98c, []int{5}
}
func (m *MsgFlagItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFlagItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFlagItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFlagItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFlagItem.Merge(m, src)
}
func (m *MsgFlagItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgFlagItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFlagItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFlagItem proto.InternalMessageInfo

func (m *MsgFlagItem) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgFlagItem) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgFlagItem) GetFlagMsg() []byte {
	if m != nil {
		return m.FlagMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*Profile)(nil), "trstlabs.trst.item.v1beta1.Profile")
	proto.RegisterType((*EstimationInfo)(nil), "trstlabs.trst.item.v1beta1.EstimationInfo")
	proto.RegisterType((*MsgCreateEstimation)(nil), "trstlabs.trst.item.v1beta1.MsgCreateEstimation")
	proto.RegisterType((*MsgUpdateLike)(nil), "trstlabs.trst.item.v1beta1.MsgUpdateLike")
	proto.RegisterType((*MsgDeleteEstimation)(nil), "trstlabs.trst.item.v1beta1.MsgDeleteEstimation")
	proto.RegisterType((*MsgFlagItem)(nil), "trstlabs.trst.item.v1beta1.MsgFlagItem")
}

func init() { proto.RegisterFile("item/v1beta1/estimator.proto", fileDescriptor_bb3c2e04bce3c98c) }

var fileDescriptor_bb3c2e04bce3c98c = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0xee, 0x34, 0xf7, 0xde, 0xb6, 0x27, 0xd5, 0x45, 0x14, 0x89, 0x52, 0x43, 0x0c, 0x08, 0xc1,
	0x45, 0x42, 0xf5, 0x01, 0x04, 0xff, 0xa0, 0xd0, 0x80, 0x04, 0xdc, 0xb8, 0xb0, 0x24, 0xcd, 0xe9,
	0x38, 0x36, 0xc9, 0x84, 0xcc, 0xf8, 0xf7, 0x16, 0x3e, 0x86, 0x8f, 0xe2, 0xb2, 0x4b, 0x97, 0xd2,
	0xbe, 0x88, 0xcc, 0x34, 0x6d, 0xd3, 0x4a, 0x15, 0xef, 0x6e, 0xbe, 0x2f, 0x67, 0xce, 0xf7, 0x43,
	0x06, 0x46, 0x4c, 0x62, 0x11, 0x7e, 0x1a, 0xa7, 0x28, 0x93, 0x71, 0x88, 0x42, 0xb2, 0x22, 0x91,
	0xbc, 0x0e, 0xaa, 0x9a, 0x4b, 0x6e, 0xdd, 0x93, 0xb5, 0x90, 0x79, 0x92, 0x8a, 0x40, 0x1d, 0x02,
	0x35, 0x1b, 0x34, 0xb3, 0x5e, 0x01, 0xbd, 0xd7, 0x35, 0x5f, 0xb0, 0x1c, 0xad, 0xdb, 0x70, 0xc9,
	0x3f, 0x97, 0x58, 0xdb, 0xc4, 0x25, 0xfe, 0x20, 0xde, 0x02, 0x6b, 0x0a, 0x66, 0xb3, 0x8f, 0xf1,
	0x52, 0xd8, 0x5d, 0xd7, 0xf0, 0xcd, 0xc7, 0x8f, 0x82, 0xf3, 0x2b, 0x83, 0x97, 0xfb, 0xf1, 0x49,
	0xb9, 0xe0, 0x71, 0xfb, 0xba, 0xb7, 0x84, 0x9b, 0xc7, 0x9f, 0xad, 0x3b, 0x70, 0xa5, 0x6e, 0xb3,
	0x4c, 0xcb, 0x5e, 0xc4, 0x0d, 0xb2, 0x1c, 0x00, 0x56, 0x4a, 0xac, 0x51, 0x48, 0xcc, 0xec, 0xae,
	0x4b, 0xfc, 0x7e, 0xdc, 0x62, 0xac, 0x07, 0x30, 0x54, 0x93, 0xb3, 0x79, 0x8d, 0x2a, 0xaa, 0x6d,
	0x68, 0xd3, 0xa6, 0xe2, 0x9e, 0x6f, 0x29, 0xef, 0x3b, 0x81, 0x5b, 0x91, 0xa0, 0x1a, 0xe2, 0x41,
	0xd6, 0x1a, 0xc1, 0x60, 0x5f, 0x51, 0x13, 0xf6, 0x40, 0xa8, 0xc5, 0x0d, 0xc0, 0x59, 0x21, 0xa8,
	0x96, 0x1e, 0xee, 0x53, 0x60, 0x24, 0x68, 0xcb, 0xb3, 0x71, 0xe4, 0xd9, 0x86, 0x5e, 0x86, 0x15,
	0x17, 0x4c, 0xda, 0x17, 0x2e, 0xf1, 0x8d, 0x78, 0x07, 0x4f, 0xd2, 0x5c, 0x9e, 0xa6, 0xf1, 0x10,
	0x6e, 0x44, 0x82, 0xbe, 0xa9, 0xb2, 0x44, 0xe2, 0x94, 0x2d, 0xf1, 0x1f, 0x1e, 0x0f, 0x06, 0xba,
	0x7f, 0x29, 0xcd, 0xf8, 0x43, 0xe6, 0x83, 0x2e, 0xe4, 0x05, 0xe6, 0xf8, 0x1f, 0x85, 0x9c, 0x13,
	0xbb, 0x0f, 0x90, 0xe9, 0x4d, 0xba, 0x26, 0x43, 0xd7, 0x34, 0xd8, 0x32, 0x91, 0xa0, 0xde, 0x3b,
	0x30, 0x23, 0x41, 0x5f, 0xe5, 0x09, 0x9d, 0x48, 0x2c, 0xae, 0xa9, 0x71, 0x17, 0xfa, 0x8b, 0x3c,
	0xa1, 0x2d, 0x85, 0x9e, 0xc2, 0x91, 0xa0, 0xcf, 0x9e, 0xfe, 0x58, 0x3b, 0x64, 0xb5, 0x76, 0xc8,
	0xaf, 0xb5, 0x43, 0xbe, 0x6d, 0x9c, 0xce, 0x6a, 0xe3, 0x74, 0x7e, 0x6e, 0x9c, 0xce, 0xdb, 0x87,
	0x94, 0xc9, 0xf7, 0x1f, 0xd3, 0x60, 0xce, 0x8b, 0x70, 0xf7, 0x9f, 0xea, 0x43, 0xf8, 0x25, 0xd4,
	0x0f, 0x45, 0x7e, 0xad, 0x50, 0xa4, 0x57, 0xfa, 0x75, 0x3c, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x30, 0x95, 0x43, 0x3d, 0x03, 0x00, 0x00,
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Estimations) > 0 {
		for iNdEx := len(m.Estimations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Estimations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEstimator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemCreator) > 0 {
		i -= len(m.ItemCreator)
		copy(dAtA[i:], m.ItemCreator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.ItemCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Itemid != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEstimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEstimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEstimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Deposit != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x20
	}
	if m.Itemid != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EstimateMsg) > 0 {
		i -= len(m.EstimateMsg)
		copy(dAtA[i:], m.EstimateMsg)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.EstimateMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLike) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLike) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Itemid != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteEstimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteEstimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteEstimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteMsg) > 0 {
		i -= len(m.DeleteMsg)
		copy(dAtA[i:], m.DeleteMsg)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.DeleteMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Itemid != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFlagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFlagItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFlagItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlagMsg) > 0 {
		i -= len(m.FlagMsg)
		copy(dAtA[i:], m.FlagMsg)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.FlagMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Itemid != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEstimator(dAtA []byte, offset int, v uint64) int {
	offset -= sovEstimator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if len(m.Estimations) > 0 {
		for _, e := range m.Estimations {
			l = e.Size()
			n += 1 + l + sovEstimator(uint64(l))
		}
	}
	return n
}

func (m *EstimationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Itemid != 0 {
		n += 1 + sovEstimator(uint64(m.Itemid))
	}
	if m.Interested {
		n += 2
	}
	l = len(m.ItemCreator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	return n
}

func (m *MsgCreateEstimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = len(m.EstimateMsg)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovEstimator(uint64(m.Itemid))
	}
	if m.Deposit != 0 {
		n += 1 + sovEstimator(uint64(m.Deposit))
	}
	if m.Interested {
		n += 2
	}
	return n
}

func (m *MsgUpdateLike) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovEstimator(uint64(m.Itemid))
	}
	if m.Interested {
		n += 2
	}
	return n
}

func (m *MsgDeleteEstimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovEstimator(uint64(m.Itemid))
	}
	l = len(m.DeleteMsg)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	return n
}

func (m *MsgFlagItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovEstimator(uint64(m.Itemid))
	}
	l = len(m.FlagMsg)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	return n
}

func sovEstimator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEstimator(x uint64) (n int) {
	return sovEstimator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimations = append(m.Estimations, &EstimationInfo{})
			if err := m.Estimations[len(m.Estimations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEstimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEstimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEstimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimateMsg = append(m.EstimateMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.EstimateMsg == nil {
				m.EstimateMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteEstimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteEstimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteEstimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteMsg = append(m.DeleteMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.DeleteMsg == nil {
				m.DeleteMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFlagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFlagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFlagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagMsg = append(m.FlagMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.FlagMsg == nil {
				m.FlagMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEstimator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEstimator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEstimator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEstimator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEstimator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEstimator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEstimator = fmt.Errorf("proto: unexpected end of group")
)
