// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intento/intent/v1beta1/action.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types2 "github.com/trstlabs/intento/x/interchainquery/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Comparison operators that can be used for various types.
type ComparisonOperator int32

const (
	ComparisonOperator_EQUAL         ComparisonOperator = 0
	ComparisonOperator_CONTAINS      ComparisonOperator = 1
	ComparisonOperator_NOT_CONTAINS  ComparisonOperator = 2
	ComparisonOperator_SMALLER_THAN  ComparisonOperator = 3
	ComparisonOperator_LARGER_THAN   ComparisonOperator = 4
	ComparisonOperator_GREATER_EQUAL ComparisonOperator = 5
	ComparisonOperator_LESS_EQUAL    ComparisonOperator = 6
	ComparisonOperator_STARTS_WITH   ComparisonOperator = 7
	ComparisonOperator_ENDS_WITH     ComparisonOperator = 8
	ComparisonOperator_NOT_EQUAL     ComparisonOperator = 9
)

var ComparisonOperator_name = map[int32]string{
	0: "EQUAL",
	1: "CONTAINS",
	2: "NOT_CONTAINS",
	3: "SMALLER_THAN",
	4: "LARGER_THAN",
	5: "GREATER_EQUAL",
	6: "LESS_EQUAL",
	7: "STARTS_WITH",
	8: "ENDS_WITH",
	9: "NOT_EQUAL",
}

var ComparisonOperator_value = map[string]int32{
	"EQUAL":         0,
	"CONTAINS":      1,
	"NOT_CONTAINS":  2,
	"SMALLER_THAN":  3,
	"LARGER_THAN":   4,
	"GREATER_EQUAL": 5,
	"LESS_EQUAL":    6,
	"STARTS_WITH":   7,
	"ENDS_WITH":     8,
	"NOT_EQUAL":     9,
}

func (x ComparisonOperator) String() string {
	return proto.EnumName(ComparisonOperator_name, int32(x))
}

func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{0}
}

// ActionInfo stores the info for the action
type ActionInfo struct {
	ID            uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner         string                  `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Label         string                  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	FeeAddress    string                  `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	Msgs          []*types.Any            `protobuf:"bytes,5,rep,name=msgs,proto3" json:"msgs,omitempty"`
	Interval      time.Duration           `protobuf:"bytes,6,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	StartTime     time.Time               `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	ExecTime      time.Time               `protobuf:"bytes,8,opt,name=exec_time,json=execTime,proto3,stdtime" json:"exec_time"`
	EndTime       time.Time               `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	UpdateHistory []time.Time             `protobuf:"bytes,10,rep,name=update_history,json=updateHistory,proto3,stdtime" json:"update_history"`
	ICAConfig     *ICAConfig              `protobuf:"bytes,11,opt,name=ica_config,json=icaConfig,proto3" json:"ica_config,omitempty"`
	Configuration *ExecutionConfiguration `protobuf:"bytes,12,opt,name=configuration,proto3" json:"configuration,omitempty"`
	HostedConfig  *HostedConfig           `protobuf:"bytes,14,opt,name=hosted_config,json=hostedConfig,proto3" json:"hosted_config,omitempty"`
	Conditions    *ExecutionConditions    `protobuf:"bytes,15,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *ActionInfo) Reset()         { *m = ActionInfo{} }
func (m *ActionInfo) String() string { return proto.CompactTextString(m) }
func (*ActionInfo) ProtoMessage()    {}
func (*ActionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{0}
}
func (m *ActionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionInfo.Merge(m, src)
}
func (m *ActionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActionInfo proto.InternalMessageInfo

// config for self-hosted ICA
type ICAConfig struct {
	PortID           string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ConnectionID     string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	HostConnectionID string `protobuf:"bytes,3,opt,name=host_connection_id,json=hostConnectionId,proto3" json:"host_connection_id,omitempty"`
}

func (m *ICAConfig) Reset()         { *m = ICAConfig{} }
func (m *ICAConfig) String() string { return proto.CompactTextString(m) }
func (*ICAConfig) ProtoMessage()    {}
func (*ICAConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{1}
}
func (m *ICAConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICAConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICAConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICAConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICAConfig.Merge(m, src)
}
func (m *ICAConfig) XXX_Size() int {
	return m.Size()
}
func (m *ICAConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ICAConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ICAConfig proto.InternalMessageInfo

// config for hosted account
type HostedConfig struct {
	HostedAddress string      `protobuf:"bytes,1,opt,name=hosted_address,json=hostedAddress,proto3" json:"hosted_address,omitempty"`
	FeeCoinLimit  types1.Coin `protobuf:"bytes,3,opt,name=fee_coin_limit,json=feeCoinLimit,proto3" json:"fee_coin_limit"`
}

func (m *HostedConfig) Reset()         { *m = HostedConfig{} }
func (m *HostedConfig) String() string { return proto.CompactTextString(m) }
func (*HostedConfig) ProtoMessage()    {}
func (*HostedConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{2}
}
func (m *HostedConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostedConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostedConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostedConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostedConfig.Merge(m, src)
}
func (m *HostedConfig) XXX_Size() int {
	return m.Size()
}
func (m *HostedConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostedConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostedConfig proto.InternalMessageInfo

// ExecutionConfiguration provides the execution-related configuration of the
// action
type ExecutionConfiguration struct {
	// if true, the action response outputs are saved and can be used in logic
	SaveResponses bool `protobuf:"varint,1,opt,name=save_responses,json=saveResponses,proto3" json:"save_responses,omitempty"`
	// if true, the action is not updatable
	UpdatingDisabled bool `protobuf:"varint,2,opt,name=updating_disabled,json=updatingDisabled,proto3" json:"updating_disabled,omitempty"`
	// If true, will execute until we get a successful Action, if false/unset will
	// always execute
	StopOnSuccess bool `protobuf:"varint,3,opt,name=stop_on_success,json=stopOnSuccess,proto3" json:"stop_on_success,omitempty"`
	// If true, will execute until successful Action, if false/unset will always
	// execute
	StopOnFailure bool `protobuf:"varint,4,opt,name=stop_on_failure,json=stopOnFailure,proto3" json:"stop_on_failure,omitempty"`
	// If true, owner account balance is used when trigger account funds run out
	FallbackToOwnerBalance bool `protobuf:"varint,5,opt,name=fallback_to_owner_balance,json=fallbackToOwnerBalance,proto3" json:"fallback_to_owner_balance,omitempty"`
	// If true, allows the action to continue execution after an ibc channel times out (recommended)
	ReregisterICAAfterTimeout bool `protobuf:"varint,6,opt,name=reregister_ica_after_timeout,json=reregisterIcaAfterTimeout,proto3" json:"reregister_ica_after_timeout,omitempty"`
}

func (m *ExecutionConfiguration) Reset()         { *m = ExecutionConfiguration{} }
func (m *ExecutionConfiguration) String() string { return proto.CompactTextString(m) }
func (*ExecutionConfiguration) ProtoMessage()    {}
func (*ExecutionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{3}
}
func (m *ExecutionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionConfiguration.Merge(m, src)
}
func (m *ExecutionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionConfiguration proto.InternalMessageInfo

// ActionHistory execution history
type ActionHistory struct {
	History []ActionHistoryEntry `protobuf:"bytes,1,rep,name=history,proto3" json:"history"`
}

func (m *ActionHistory) Reset()         { *m = ActionHistory{} }
func (m *ActionHistory) String() string { return proto.CompactTextString(m) }
func (*ActionHistory) ProtoMessage()    {}
func (*ActionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{4}
}
func (m *ActionHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionHistory.Merge(m, src)
}
func (m *ActionHistory) XXX_Size() int {
	return m.Size()
}
func (m *ActionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ActionHistory proto.InternalMessageInfo

// ActionHistoryEntry provides a the history of action interchain tx call
type ActionHistoryEntry struct {
	ScheduledExecTime time.Time   `protobuf:"bytes,1,opt,name=scheduled_exec_time,json=scheduledExecTime,proto3,stdtime" json:"scheduled_exec_time"`
	ActualExecTime    time.Time   `protobuf:"bytes,2,opt,name=actual_exec_time,json=actualExecTime,proto3,stdtime" json:"actual_exec_time"`
	ExecFee           types1.Coin `protobuf:"bytes,3,opt,name=exec_fee,json=execFee,proto3" json:"exec_fee"`
	// whether all messages are executed, independent of succesfull result
	Executed bool `protobuf:"varint,4,opt,name=executed,proto3" json:"executed,omitempty"`
	// timed out from execution over IBC
	TimedOut bool `protobuf:"varint,5,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	// errors from execution, if executed and no error the execution was
	// succesfull
	Errors []string `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	// will be empty when save_responses is false
	MsgResponses []*types.Any `protobuf:"bytes,7,rep,name=msg_responses,json=msgResponses,proto3" json:"msg_responses,omitempty"`
	// will be empty when save_responses is false
	QueryResponses []string `protobuf:"bytes,8,rep,name=query_responses,json=queryResponses,proto3" json:"query_responses,omitempty"`
}

func (m *ActionHistoryEntry) Reset()         { *m = ActionHistoryEntry{} }
func (m *ActionHistoryEntry) String() string { return proto.CompactTextString(m) }
func (*ActionHistoryEntry) ProtoMessage()    {}
func (*ActionHistoryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{5}
}
func (m *ActionHistoryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionHistoryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionHistoryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionHistoryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionHistoryEntry.Merge(m, src)
}
func (m *ActionHistoryEntry) XXX_Size() int {
	return m.Size()
}
func (m *ActionHistoryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionHistoryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ActionHistoryEntry proto.InternalMessageInfo

// ExecutionConditions provides execution conditions for the action
type ExecutionConditions struct {
	// Replace value with value from message or response from another action’s
	// latest output
	FeedbackLoops []*FeedbackLoop `protobuf:"bytes,2,rep,name=feedback_loops,json=feedbackLoops,proto3" json:"feedback_loops,omitempty"`
	// Comparison with response response value
	Comparisons []*Comparison `protobuf:"bytes,1,rep,name=comparisons,proto3" json:"comparisons,omitempty"`
	// optional array of dependent intents that when executing succesfully, stops
	// execution
	StopOnSuccessOf []uint64 `protobuf:"varint,5,rep,packed,name=stop_on_success_of,json=stopOnSuccessOf,proto3" json:"stop_on_success_of,omitempty"`
	// optional array of dependent intents that when not executing succesfully,
	// stops execution
	StopOnFailureOf []uint64 `protobuf:"varint,6,rep,packed,name=stop_on_failure_of,json=stopOnFailureOf,proto3" json:"stop_on_failure_of,omitempty"`
	// optional array of dependent intents that should be executed succesfully
	// after their latest call before execution is allowed
	SkipOnFailureOf []uint64 `protobuf:"varint,7,rep,packed,name=skip_on_failure_of,json=skipOnFailureOf,proto3" json:"skip_on_failure_of,omitempty"`
	// optional array of dependent intents that should fail after their latest
	// call before execution is allowed
	SkipOnSuccessOf      []uint64 `protobuf:"varint,8,rep,packed,name=skip_on_success_of,json=skipOnSuccessOf,proto3" json:"skip_on_success_of,omitempty"`
	UseAndForComparisons bool     `protobuf:"varint,9,opt,name=use_and_for_comparisons,json=useAndForComparisons,proto3" json:"use_and_for_comparisons,omitempty"`
}

func (m *ExecutionConditions) Reset()         { *m = ExecutionConditions{} }
func (m *ExecutionConditions) String() string { return proto.CompactTextString(m) }
func (*ExecutionConditions) ProtoMessage()    {}
func (*ExecutionConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{6}
}
func (m *ExecutionConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionConditions.Merge(m, src)
}
func (m *ExecutionConditions) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionConditions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionConditions proto.InternalMessageInfo

// Replace value with value from message or response from another action’s
// latest output before execution
type FeedbackLoop struct {
	ActionID      uint64 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ResponseIndex uint32 `protobuf:"varint,3,opt,name=response_index,json=responseIndex,proto3" json:"response_index,omitempty"`
	ResponseKey   string `protobuf:"bytes,2,opt,name=response_key,json=responseKey,proto3" json:"response_key,omitempty"`
	MsgsIndex     uint32 `protobuf:"varint,4,opt,name=msgs_index,json=msgsIndex,proto3" json:"msgs_index,omitempty"`
	MsgKey        string `protobuf:"bytes,5,opt,name=msg_key,json=msgKey,proto3" json:"msg_key,omitempty"`
	ValueType     string `protobuf:"bytes,6,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	// string, []string, []sdk.Int
	CalculateDifference bool       `protobuf:"varint,7,opt,name=calculate_difference,json=calculateDifference,proto3" json:"calculate_difference,omitempty"`
	QueryId             string     `protobuf:"bytes,8,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ICQConfig           *ICQConfig `protobuf:"bytes,9,opt,name=icq_config,json=icqConfig,proto3" json:"icq_config,omitempty"`
}

func (m *FeedbackLoop) Reset()         { *m = FeedbackLoop{} }
func (m *FeedbackLoop) String() string { return proto.CompactTextString(m) }
func (*FeedbackLoop) ProtoMessage()    {}
func (*FeedbackLoop) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{7}
}
func (m *FeedbackLoop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedbackLoop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedbackLoop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedbackLoop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackLoop.Merge(m, src)
}
func (m *FeedbackLoop) XXX_Size() int {
	return m.Size()
}
func (m *FeedbackLoop) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackLoop.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackLoop proto.InternalMessageInfo

// Comparison is checked on the response in JSON before execution of
// action and outputs true or false
type Comparison struct {
	ActionID      uint64 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ResponseIndex uint32 `protobuf:"varint,2,opt,name=response_index,json=responseIndex,proto3" json:"response_index,omitempty"`
	ResponseKey   string `protobuf:"bytes,3,opt,name=response_key,json=responseKey,proto3" json:"response_key,omitempty"`
	ValueType     string `protobuf:"bytes,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	// string, []string, []sdk.Int
	Operator            ComparisonOperator `protobuf:"varint,5,opt,name=operator,proto3,enum=intento.intent.v1beta1.ComparisonOperator" json:"operator,omitempty"`
	Operand             string             `protobuf:"bytes,6,opt,name=operand,proto3" json:"operand,omitempty"`
	CalculateDifference bool               `protobuf:"varint,7,opt,name=calculate_difference,json=calculateDifference,proto3" json:"calculate_difference,omitempty"`
	QueryId             string             `protobuf:"bytes,8,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ICQConfig           *ICQConfig         `protobuf:"bytes,9,opt,name=icq_config,json=icqConfig,proto3" json:"icq_config,omitempty"`
}

func (m *Comparison) Reset()         { *m = Comparison{} }
func (m *Comparison) String() string { return proto.CompactTextString(m) }
func (*Comparison) ProtoMessage()    {}
func (*Comparison) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{8}
}
func (m *Comparison) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comparison) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comparison.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comparison) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comparison.Merge(m, src)
}
func (m *Comparison) XXX_Size() int {
	return m.Size()
}
func (m *Comparison) XXX_DiscardUnknown() {
	xxx_messageInfo_Comparison.DiscardUnknown(m)
}

var xxx_messageInfo_Comparison proto.InternalMessageInfo

// config for using interchain queries
type ICQConfig struct {
	ConnectionId    string               `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChainId         string               `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TimeoutPolicy   types2.TimeoutPolicy `protobuf:"varint,3,opt,name=timeout_policy,json=timeoutPolicy,proto3,enum=intento.interchainquery.v1.TimeoutPolicy" json:"timeout_policy,omitempty"`
	TimeoutDuration time.Duration        `protobuf:"bytes,4,opt,name=timeout_duration,json=timeoutDuration,proto3,stdduration" json:"timeout_duration"`
	QueryType       string               `protobuf:"bytes,5,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	QueryKey        string               `protobuf:"bytes,6,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	Response        []byte               `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ICQConfig) Reset()         { *m = ICQConfig{} }
func (m *ICQConfig) String() string { return proto.CompactTextString(m) }
func (*ICQConfig) ProtoMessage()    {}
func (*ICQConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_930e58a89aea21bf, []int{9}
}
func (m *ICQConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICQConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICQConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICQConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICQConfig.Merge(m, src)
}
func (m *ICQConfig) XXX_Size() int {
	return m.Size()
}
func (m *ICQConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ICQConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ICQConfig proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("intento.intent.v1beta1.ComparisonOperator", ComparisonOperator_name, ComparisonOperator_value)
	proto.RegisterType((*ActionInfo)(nil), "intento.intent.v1beta1.ActionInfo")
	proto.RegisterType((*ICAConfig)(nil), "intento.intent.v1beta1.ICAConfig")
	proto.RegisterType((*HostedConfig)(nil), "intento.intent.v1beta1.HostedConfig")
	proto.RegisterType((*ExecutionConfiguration)(nil), "intento.intent.v1beta1.ExecutionConfiguration")
	proto.RegisterType((*ActionHistory)(nil), "intento.intent.v1beta1.ActionHistory")
	proto.RegisterType((*ActionHistoryEntry)(nil), "intento.intent.v1beta1.ActionHistoryEntry")
	proto.RegisterType((*ExecutionConditions)(nil), "intento.intent.v1beta1.ExecutionConditions")
	proto.RegisterType((*FeedbackLoop)(nil), "intento.intent.v1beta1.FeedbackLoop")
	proto.RegisterType((*Comparison)(nil), "intento.intent.v1beta1.Comparison")
	proto.RegisterType((*ICQConfig)(nil), "intento.intent.v1beta1.ICQConfig")
}

func init() {
	proto.RegisterFile("intento/intent/v1beta1/action.proto", fileDescriptor_930e58a89aea21bf)
}

var fileDescriptor_930e58a89aea21bf = []byte{
	// 1699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0xdb, 0xc8,
	0x19, 0xb6, 0x24, 0x5b, 0x22, 0x5f, 0x4b, 0xb2, 0x32, 0x31, 0xb2, 0xb2, 0xb7, 0x2b, 0x79, 0x95,
	0x6e, 0xeb, 0x4d, 0x5a, 0x09, 0x4e, 0x91, 0xc3, 0xf6, 0x52, 0x48, 0xb2, 0xbc, 0x51, 0xe3, 0xb5,
	0x93, 0xb1, 0x16, 0x05, 0xba, 0x40, 0x89, 0x11, 0x39, 0x94, 0x09, 0x53, 0x1c, 0x85, 0x43, 0xba,
	0x11, 0xd0, 0x1f, 0xb1, 0x40, 0x2f, 0xbd, 0xf6, 0x56, 0x60, 0xaf, 0xfb, 0x17, 0x0a, 0x04, 0x3d,
	0xed, 0xad, 0x3d, 0xa9, 0xad, 0x02, 0xf4, 0xd0, 0x7f, 0xd0, 0x5b, 0x31, 0x1f, 0xa4, 0x28, 0x27,
	0x6e, 0x13, 0xf4, 0xd2, 0x93, 0xf8, 0x7e, 0x3c, 0x8f, 0x66, 0xde, 0xaf, 0x99, 0x81, 0xfb, 0x5e,
	0x10, 0xd1, 0x20, 0x62, 0x1d, 0xf5, 0xdb, 0xb9, 0x3e, 0x1a, 0xd3, 0x88, 0x1c, 0x75, 0x88, 0x1d,
	0x79, 0x2c, 0x68, 0xcf, 0x42, 0x16, 0x31, 0x74, 0x4f, 0x3b, 0xb5, 0xd5, 0x6f, 0x5b, 0x3b, 0xed,
	0x37, 0x6c, 0xc6, 0xa7, 0x8c, 0x77, 0xc6, 0x84, 0xd3, 0x14, 0x69, 0x33, 0x4f, 0xe3, 0xf6, 0xf7,
	0x94, 0xdd, 0x92, 0x52, 0x47, 0x09, 0xda, 0xb4, 0x3b, 0x61, 0x13, 0xa6, 0xf4, 0xe2, 0x2b, 0x01,
	0x4c, 0x18, 0x9b, 0xf8, 0xb4, 0x23, 0xa5, 0x71, 0xec, 0x76, 0x48, 0x30, 0xd7, 0xa6, 0xc6, 0x4d,
	0x93, 0x13, 0x87, 0x64, 0xb5, 0xc6, 0xfd, 0xe6, 0x4d, 0x7b, 0xe4, 0x4d, 0x29, 0x8f, 0xc8, 0x74,
	0xa6, 0x1d, 0x0e, 0xb3, 0x3b, 0x0d, 0xed, 0x4b, 0xe2, 0x05, 0x2f, 0x62, 0x1a, 0xce, 0x3b, 0xd7,
	0x47, 0x9d, 0x09, 0x0d, 0x28, 0xf7, 0xf4, 0xda, 0x5a, 0xff, 0x28, 0x02, 0x74, 0xe5, 0xfe, 0x87,
	0x81, 0xcb, 0xd0, 0x3d, 0xc8, 0x7b, 0x4e, 0x3d, 0x77, 0x90, 0x3b, 0xdc, 0xec, 0x15, 0x97, 0x8b,
	0x66, 0x7e, 0x78, 0x8c, 0xf3, 0x9e, 0x83, 0x76, 0x61, 0x8b, 0xfd, 0x3a, 0xa0, 0x61, 0x3d, 0x7f,
	0x90, 0x3b, 0x34, 0xb1, 0x12, 0x84, 0xd6, 0x27, 0x63, 0xea, 0xd7, 0x0b, 0x4a, 0x2b, 0x05, 0xd4,
	0x84, 0x6d, 0x97, 0x52, 0x8b, 0x38, 0x4e, 0x48, 0x39, 0xaf, 0x6f, 0x4a, 0x1b, 0xb8, 0x94, 0x76,
	0x95, 0x06, 0x3d, 0x86, 0xcd, 0x29, 0x9f, 0xf0, 0xfa, 0xd6, 0x41, 0xe1, 0x70, 0xfb, 0xd1, 0x6e,
	0x5b, 0xed, 0xa6, 0x9d, 0xec, 0xa6, 0xdd, 0x0d, 0xe6, 0xbd, 0xed, 0x3f, 0x7d, 0xfb, 0xe3, 0x12,
	0x77, 0xae, 0xda, 0x5f, 0xf0, 0x09, 0x96, 0xee, 0xe8, 0x4b, 0x30, 0xe4, 0x76, 0xae, 0x89, 0x5f,
	0x2f, 0x1e, 0xe4, 0x0e, 0xb7, 0x1f, 0xed, 0xbd, 0x01, 0x3d, 0xd6, 0x81, 0xea, 0x35, 0x5e, 0x2d,
	0x9a, 0x1b, 0xff, 0x5c, 0x34, 0x51, 0x02, 0xf9, 0x11, 0x9b, 0x7a, 0x11, 0x9d, 0xce, 0xa2, 0xf9,
	0xef, 0xfe, 0xda, 0xcc, 0xe1, 0x94, 0x0a, 0xf5, 0x01, 0x78, 0x44, 0xc2, 0xc8, 0x12, 0x41, 0xac,
	0x97, 0x24, 0xf1, 0xfe, 0x1b, 0xc4, 0xa3, 0x24, 0xc2, 0x3d, 0x43, 0x30, 0x7f, 0x2d, 0x38, 0x4c,
	0x89, 0x13, 0x16, 0xd4, 0x05, 0x93, 0xbe, 0xa4, 0xb6, 0xe2, 0x30, 0xde, 0x83, 0xc3, 0x10, 0x30,
	0x49, 0xf1, 0x33, 0x30, 0x68, 0xe0, 0x28, 0x06, 0xf3, 0x3d, 0x18, 0x4a, 0x34, 0x70, 0x24, 0xc1,
	0x53, 0xa8, 0xc6, 0x33, 0x87, 0x44, 0xd4, 0xba, 0xf4, 0x78, 0xc4, 0xc2, 0x79, 0x1d, 0x64, 0x80,
	0xdf, 0x8d, 0xa6, 0xa2, 0xb0, 0x4f, 0x14, 0x14, 0x9d, 0x03, 0x78, 0x36, 0xb1, 0x6c, 0x16, 0xb8,
	0xde, 0xa4, 0xbe, 0x2d, 0xd7, 0xf3, 0x71, 0xfb, 0xed, 0xbd, 0xd1, 0x1e, 0xf6, 0xbb, 0x7d, 0xe9,
	0xd8, 0xab, 0x2c, 0x17, 0x4d, 0x33, 0x15, 0xb1, 0xe9, 0xd9, 0x44, 0x7d, 0xa2, 0x11, 0x54, 0x14,
	0x99, 0xce, 0x50, 0xbd, 0x2c, 0x39, 0xdb, 0xb7, 0x71, 0x0e, 0x5e, 0x52, 0x3b, 0x16, 0x8e, 0xfd,
	0x2c, 0x0a, 0xaf, 0x93, 0xa0, 0xaf, 0xa0, 0x72, 0xc9, 0x78, 0x44, 0x9d, 0x64, 0xa5, 0x55, 0xc9,
	0xfa, 0xfd, 0xdb, 0x58, 0x9f, 0x48, 0x67, 0xbd, 0xd8, 0xda, 0x72, 0xd1, 0x2c, 0x67, 0x35, 0xb8,
	0x7c, 0x99, 0x91, 0xd0, 0x53, 0x00, 0x9b, 0x05, 0x8e, 0x27, 0xfe, 0x89, 0xd7, 0x77, 0x24, 0xf3,
	0xc3, 0x77, 0x59, 0xaf, 0x86, 0xe0, 0x0c, 0xbc, 0xf5, 0x4d, 0x0e, 0x56, 0x81, 0x41, 0xf7, 0xa1,
	0x34, 0x63, 0x61, 0x64, 0xe9, 0x66, 0x33, 0x7b, 0xb0, 0x5c, 0x34, 0x8b, 0xcf, 0x58, 0x18, 0x0d,
	0x8f, 0x71, 0x51, 0x98, 0x86, 0x0e, 0x7a, 0x2c, 0x43, 0x16, 0x50, 0xd9, 0x9e, 0xc2, 0x55, 0x36,
	0x9f, 0x5a, 0x76, 0x3f, 0x35, 0x0c, 0x8f, 0x71, 0x79, 0xe5, 0x36, 0x74, 0x50, 0x0f, 0x90, 0xd8,
	0x86, 0xb5, 0x8e, 0x95, 0x2d, 0xda, 0xdb, 0x5d, 0x2e, 0x9a, 0x35, 0xb1, 0xe5, 0x35, 0x7c, 0xed,
	0x72, 0x5d, 0xe3, 0xb4, 0x7e, 0x03, 0x6b, 0x81, 0x41, 0x9f, 0x40, 0x55, 0xc7, 0x39, 0x69, 0x6b,
	0xb9, 0x6c, 0xac, 0xa3, 0x9f, 0x74, 0xf6, 0x00, 0xaa, 0xa2, 0xf5, 0xc5, 0x58, 0xb4, 0x7c, 0x6f,
	0xea, 0x45, 0xf2, 0x6f, 0x45, 0xa3, 0xea, 0x81, 0x28, 0xa6, 0x67, 0x1a, 0xb2, 0x3e, 0xf3, 0x82,
	0xde, 0xa6, 0xa8, 0x40, 0x5c, 0x76, 0x29, 0x15, 0xe2, 0xa9, 0x00, 0xb5, 0xfe, 0x9c, 0x87, 0x7b,
	0x6f, 0xcf, 0xbf, 0x58, 0x08, 0x27, 0xd7, 0xd4, 0x0a, 0x29, 0x9f, 0xb1, 0x80, 0x53, 0xb5, 0x10,
	0x03, 0x57, 0x84, 0x16, 0x27, 0x4a, 0xf4, 0x10, 0xee, 0xc8, 0x7a, 0xf6, 0x82, 0x89, 0xe5, 0x78,
	0x9c, 0x8c, 0x7d, 0xaa, 0xc2, 0x67, 0xe0, 0x5a, 0x62, 0x38, 0xd6, 0x7a, 0xf4, 0x03, 0xd8, 0xe1,
	0x11, 0x9b, 0x59, 0x2c, 0xb0, 0x78, 0x6c, 0xdb, 0x62, 0x77, 0x05, 0x4d, 0x1a, 0xb1, 0xd9, 0x79,
	0x70, 0xa1, 0x94, 0x59, 0x3f, 0x97, 0x78, 0x7e, 0x1c, 0x52, 0x39, 0xdc, 0x52, 0xbf, 0x13, 0xa5,
	0x44, 0x9f, 0xc1, 0x9e, 0x4b, 0x7c, 0x7f, 0x4c, 0xec, 0x2b, 0x2b, 0x62, 0x96, 0x9c, 0x95, 0xd6,
	0x98, 0xf8, 0x24, 0xb0, 0x69, 0x7d, 0x4b, 0x22, 0xee, 0x25, 0x0e, 0x23, 0x76, 0x2e, 0xcc, 0x3d,
	0x65, 0x45, 0xbf, 0x82, 0xef, 0x85, 0x34, 0xa4, 0x13, 0x8f, 0x47, 0x34, 0xb4, 0x44, 0x07, 0x12,
	0x57, 0x7c, 0x89, 0xa9, 0xc0, 0xe2, 0x48, 0xce, 0x3d, 0xa3, 0xf7, 0xd1, 0x72, 0xd1, 0xdc, 0xc3,
	0xa9, 0xdf, 0xb0, 0xdf, 0xed, 0x0a, 0xaf, 0x91, 0x72, 0xc2, 0x7b, 0x2b, 0x8a, 0xa1, 0x4d, 0xb2,
	0xa6, 0xd6, 0x57, 0x50, 0x51, 0xd3, 0x3e, 0xe9, 0xf3, 0x9f, 0x43, 0x29, 0x99, 0x16, 0x39, 0x39,
	0x2d, 0x1e, 0xdc, 0x56, 0xe0, 0x6b, 0xb8, 0x41, 0x10, 0x85, 0x73, 0x9d, 0xbb, 0x84, 0xa0, 0xf5,
	0x4d, 0x01, 0xd0, 0x9b, 0x5e, 0x68, 0x04, 0x77, 0xb9, 0x7d, 0x49, 0x9d, 0xd8, 0xa7, 0x8e, 0xb5,
	0x9a, 0x92, 0xb9, 0xf7, 0x98, 0x71, 0x77, 0x52, 0x82, 0x41, 0x32, 0x2e, 0xcf, 0xa0, 0x46, 0xec,
	0x28, 0x26, 0x7e, 0x86, 0x32, 0xff, 0x1e, 0x94, 0x55, 0x85, 0x4e, 0xf9, 0x7e, 0x0a, 0x72, 0x14,
	0x5b, 0x2e, 0xa5, 0xef, 0x5a, 0xb4, 0x25, 0x01, 0x38, 0xa1, 0x14, 0xed, 0x2b, 0x6c, 0x1c, 0x51,
	0x47, 0x57, 0x44, 0x2a, 0xa3, 0x0f, 0xc1, 0x14, 0x6b, 0x73, 0x2c, 0x91, 0x3e, 0x95, 0x7c, 0x43,
	0x2a, 0xce, 0xe3, 0x08, 0xdd, 0x83, 0x22, 0x0d, 0x43, 0x16, 0xf2, 0x7a, 0xf1, 0xa0, 0x70, 0x68,
	0x62, 0x2d, 0xa1, 0xcf, 0xa0, 0x32, 0xe5, 0x93, 0x4c, 0x91, 0x97, 0x6e, 0x3f, 0x2a, 0x71, 0x79,
	0xca, 0x27, 0xab, 0xca, 0xff, 0x21, 0xec, 0xc8, 0xa3, 0x3e, 0x03, 0x36, 0x24, 0x77, 0x55, 0xaa,
	0x53, 0xc7, 0xd6, 0x6f, 0x0b, 0x70, 0xf7, 0x2d, 0x43, 0x4b, 0x1c, 0x23, 0x2e, 0xa5, 0x8e, 0xac,
	0x5e, 0x9f, 0xb1, 0x19, 0xaf, 0xe7, 0xe5, 0x9f, 0xdf, 0x3a, 0x53, 0x4f, 0xb4, 0xf7, 0x29, 0x63,
	0x33, 0x5c, 0x71, 0x33, 0x12, 0x47, 0xc7, 0xb0, 0x6d, 0xb3, 0xe9, 0x8c, 0x84, 0x1e, 0x17, 0x33,
	0x54, 0x95, 0x58, 0xeb, 0x36, 0xa6, 0x7e, 0xea, 0x8a, 0xb3, 0x30, 0xf4, 0x10, 0xd0, 0x8d, 0x06,
	0xb5, 0x98, 0x2b, 0xaf, 0x0f, 0x9b, 0x78, 0x67, 0xad, 0x47, 0xcf, 0xdd, 0xac, 0xb3, 0xee, 0x52,
	0xe1, 0x5c, 0xcc, 0x3a, 0xeb, 0x46, 0xd5, 0xce, 0x57, 0xde, 0x4d, 0xe7, 0x92, 0x76, 0xbe, 0xf2,
	0x6e, 0x73, 0xce, 0x2c, 0xc3, 0xc8, 0x3a, 0xaf, 0x96, 0xf1, 0x18, 0x3e, 0x88, 0x39, 0xb5, 0x48,
	0xe0, 0x58, 0x2e, 0x0b, 0xad, 0x6c, 0x14, 0x4c, 0x59, 0x05, 0xbb, 0x31, 0xa7, 0xdd, 0xc0, 0x39,
	0x61, 0xe1, 0x6a, 0xdb, 0xbc, 0xf5, 0xaf, 0x3c, 0x94, 0xb3, 0x01, 0x45, 0x9f, 0x82, 0x49, 0xd2,
	0x21, 0xae, 0x2e, 0x66, 0xe5, 0xe5, 0xa2, 0x69, 0x74, 0x93, 0xe1, 0x6d, 0x90, 0x64, 0xf0, 0x7f,
	0x02, 0xd5, 0x24, 0xe9, 0x96, 0x17, 0x38, 0xf4, 0xa5, 0x2c, 0xe4, 0x0a, 0xae, 0x24, 0xda, 0xa1,
	0x50, 0xa2, 0x8f, 0xa1, 0x9c, 0xba, 0x5d, 0xd1, 0xb9, 0xbe, 0xd2, 0x6d, 0x27, 0xba, 0xa7, 0x74,
	0x8e, 0x3e, 0x02, 0x10, 0x57, 0x2e, 0xcd, 0xb2, 0x29, 0x59, 0x4c, 0xa1, 0x51, 0x0c, 0x1f, 0x40,
	0x49, 0x94, 0xa7, 0x00, 0x6f, 0x49, 0x70, 0x71, 0xca, 0x27, 0x1a, 0x77, 0x4d, 0xfc, 0x98, 0x5a,
	0xd1, 0x7c, 0x46, 0xe5, 0xb0, 0x32, 0xb1, 0x29, 0x35, 0xa3, 0xf9, 0x8c, 0xa2, 0x23, 0xd8, 0xb5,
	0x89, 0x6f, 0xc7, 0xbe, 0xb8, 0xa4, 0x38, 0x9e, 0xeb, 0xd2, 0x90, 0x8a, 0x99, 0x58, 0x92, 0x01,
	0xb9, 0x9b, 0xda, 0x8e, 0x53, 0x13, 0xda, 0x03, 0x43, 0x95, 0xb3, 0xe7, 0xc8, 0x7b, 0x95, 0x89,
	0x4b, 0x52, 0x1e, 0x3a, 0xea, 0x8a, 0xf2, 0x22, 0x39, 0xf8, 0xcd, 0xff, 0x76, 0x45, 0x79, 0xbe,
	0x7e, 0x45, 0x79, 0xbe, 0xba, 0xa2, 0xbc, 0x50, 0x9f, 0xad, 0xdf, 0x17, 0x00, 0x56, 0xb9, 0xf8,
	0xdf, 0x22, 0x9f, 0x7f, 0x97, 0xc8, 0x17, 0xde, 0x1a, 0xf9, 0x4c, 0x04, 0x37, 0x6f, 0x46, 0xf0,
	0x04, 0x0c, 0x36, 0xa3, 0x21, 0x89, 0x58, 0x28, 0x43, 0x5f, 0xbd, 0x7d, 0x5e, 0xaf, 0x76, 0x72,
	0xae, 0x11, 0x38, 0xc5, 0xa2, 0x3a, 0x94, 0xe4, 0x77, 0xe0, 0xe8, 0x2c, 0x25, 0xe2, 0xff, 0x7b,
	0x8e, 0xfe, 0x98, 0x87, 0x95, 0x01, 0xdd, 0xbf, 0x79, 0x43, 0x52, 0xb7, 0x92, 0xf5, 0xfb, 0xd0,
	0x1e, 0x18, 0xf2, 0x05, 0x94, 0xde, 0xa0, 0x70, 0x49, 0xca, 0x43, 0x07, 0x3d, 0x83, 0xaa, 0x3e,
	0x59, 0xad, 0x19, 0xf3, 0x3d, 0x5b, 0xa5, 0xa4, 0xfa, 0xe8, 0xd3, 0xb5, 0x25, 0x66, 0x1e, 0x50,
	0xed, 0xeb, 0xa3, 0xb6, 0x3e, 0x4b, 0x9f, 0x49, 0x00, 0xae, 0x44, 0x59, 0x51, 0x1c, 0x4b, 0x09,
	0x63, 0xf2, 0x68, 0x93, 0x59, 0xfc, 0x8f, 0x8f, 0x15, 0x79, 0x2a, 0xc9, 0x67, 0xc9, 0x8e, 0x06,
	0x27, 0x26, 0x51, 0x0f, 0x2a, 0xb6, 0xb2, 0x1e, 0x54, 0xb7, 0x99, 0x52, 0x23, 0xeb, 0xe1, 0x43,
	0x50, 0x82, 0x2c, 0x27, 0x95, 0x49, 0x95, 0x0b, 0x51, 0x4b, 0xfb, 0x60, 0x24, 0xa5, 0x25, 0xd3,
	0x57, 0xc6, 0xa9, 0xfc, 0xe0, 0xdb, 0x1c, 0xa0, 0x37, 0x2b, 0x04, 0x99, 0xb0, 0x35, 0x78, 0xfe,
	0x65, 0xf7, 0xb4, 0xb6, 0x81, 0xca, 0x60, 0xf4, 0xcf, 0xcf, 0x46, 0xdd, 0xe1, 0xd9, 0x45, 0x2d,
	0x87, 0x6a, 0x50, 0x3e, 0x3b, 0x1f, 0x59, 0xa9, 0x26, 0x2f, 0x34, 0x17, 0x5f, 0x74, 0x4f, 0x4f,
	0x07, 0xd8, 0x1a, 0x3d, 0xe9, 0x9e, 0xd5, 0x0a, 0x68, 0x07, 0xb6, 0x4f, 0xbb, 0xf8, 0xf3, 0x44,
	0xb1, 0x89, 0xee, 0x40, 0xe5, 0x73, 0x3c, 0xe8, 0x8e, 0x06, 0xd8, 0x52, 0xac, 0x5b, 0xa8, 0x0a,
	0x70, 0x3a, 0xb8, 0xb8, 0xd0, 0x72, 0x51, 0x60, 0x2e, 0x46, 0x5d, 0x3c, 0xba, 0xb0, 0x7e, 0x31,
	0x1c, 0x3d, 0xa9, 0x95, 0x50, 0x05, 0xcc, 0xc1, 0xd9, 0xb1, 0x16, 0x0d, 0x21, 0x8a, 0xff, 0x55,
	0xee, 0x66, 0xef, 0xf4, 0xd5, 0xdf, 0x1b, 0x1b, 0x7f, 0x58, 0x36, 0x72, 0xaf, 0x96, 0x8d, 0xdc,
	0x77, 0xcb, 0x46, 0xee, 0x6f, 0xcb, 0x46, 0xee, 0xeb, 0xd7, 0x8d, 0x8d, 0xef, 0x5e, 0x37, 0x36,
	0xfe, 0xf2, 0xba, 0xb1, 0xf1, 0xcb, 0x07, 0x13, 0x2f, 0xba, 0x8c, 0xc7, 0x6d, 0x9b, 0x4d, 0x3b,
	0x51, 0xc8, 0x23, 0x9f, 0x8c, 0x79, 0x27, 0x79, 0x0e, 0xbf, 0x4c, 0x9e, 0xfe, 0x22, 0x9a, 0x7c,
	0x5c, 0x94, 0xa9, 0xf8, 0xc9, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xd2, 0xea, 0xca, 0x19,
	0x10, 0x00, 0x00,
}

func (this *ActionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionInfo)
	if !ok {
		that2, ok := that.(ActionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.FeeAddress != that1.FeeAddress {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	if this.Interval != that1.Interval {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.ExecTime.Equal(that1.ExecTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if len(this.UpdateHistory) != len(that1.UpdateHistory) {
		return false
	}
	for i := range this.UpdateHistory {
		if !this.UpdateHistory[i].Equal(that1.UpdateHistory[i]) {
			return false
		}
	}
	if !this.ICAConfig.Equal(that1.ICAConfig) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.HostedConfig.Equal(that1.HostedConfig) {
		return false
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	return true
}
func (this *ICAConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICAConfig)
	if !ok {
		that2, ok := that.(ICAConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortID != that1.PortID {
		return false
	}
	if this.ConnectionID != that1.ConnectionID {
		return false
	}
	if this.HostConnectionID != that1.HostConnectionID {
		return false
	}
	return true
}
func (this *HostedConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostedConfig)
	if !ok {
		that2, ok := that.(HostedConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostedAddress != that1.HostedAddress {
		return false
	}
	if !this.FeeCoinLimit.Equal(&that1.FeeCoinLimit) {
		return false
	}
	return true
}
func (this *ExecutionConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionConfiguration)
	if !ok {
		that2, ok := that.(ExecutionConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SaveResponses != that1.SaveResponses {
		return false
	}
	if this.UpdatingDisabled != that1.UpdatingDisabled {
		return false
	}
	if this.StopOnSuccess != that1.StopOnSuccess {
		return false
	}
	if this.StopOnFailure != that1.StopOnFailure {
		return false
	}
	if this.FallbackToOwnerBalance != that1.FallbackToOwnerBalance {
		return false
	}
	if this.ReregisterICAAfterTimeout != that1.ReregisterICAAfterTimeout {
		return false
	}
	return true
}
func (this *ActionHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionHistory)
	if !ok {
		that2, ok := that.(ActionHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(&that1.History[i]) {
			return false
		}
	}
	return true
}
func (this *ActionHistoryEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionHistoryEntry)
	if !ok {
		that2, ok := that.(ActionHistoryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduledExecTime.Equal(that1.ScheduledExecTime) {
		return false
	}
	if !this.ActualExecTime.Equal(that1.ActualExecTime) {
		return false
	}
	if !this.ExecFee.Equal(&that1.ExecFee) {
		return false
	}
	if this.Executed != that1.Executed {
		return false
	}
	if this.TimedOut != that1.TimedOut {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	if len(this.MsgResponses) != len(that1.MsgResponses) {
		return false
	}
	for i := range this.MsgResponses {
		if !this.MsgResponses[i].Equal(that1.MsgResponses[i]) {
			return false
		}
	}
	if len(this.QueryResponses) != len(that1.QueryResponses) {
		return false
	}
	for i := range this.QueryResponses {
		if this.QueryResponses[i] != that1.QueryResponses[i] {
			return false
		}
	}
	return true
}
func (this *ExecutionConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionConditions)
	if !ok {
		that2, ok := that.(ExecutionConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FeedbackLoops) != len(that1.FeedbackLoops) {
		return false
	}
	for i := range this.FeedbackLoops {
		if !this.FeedbackLoops[i].Equal(that1.FeedbackLoops[i]) {
			return false
		}
	}
	if len(this.Comparisons) != len(that1.Comparisons) {
		return false
	}
	for i := range this.Comparisons {
		if !this.Comparisons[i].Equal(that1.Comparisons[i]) {
			return false
		}
	}
	if len(this.StopOnSuccessOf) != len(that1.StopOnSuccessOf) {
		return false
	}
	for i := range this.StopOnSuccessOf {
		if this.StopOnSuccessOf[i] != that1.StopOnSuccessOf[i] {
			return false
		}
	}
	if len(this.StopOnFailureOf) != len(that1.StopOnFailureOf) {
		return false
	}
	for i := range this.StopOnFailureOf {
		if this.StopOnFailureOf[i] != that1.StopOnFailureOf[i] {
			return false
		}
	}
	if len(this.SkipOnFailureOf) != len(that1.SkipOnFailureOf) {
		return false
	}
	for i := range this.SkipOnFailureOf {
		if this.SkipOnFailureOf[i] != that1.SkipOnFailureOf[i] {
			return false
		}
	}
	if len(this.SkipOnSuccessOf) != len(that1.SkipOnSuccessOf) {
		return false
	}
	for i := range this.SkipOnSuccessOf {
		if this.SkipOnSuccessOf[i] != that1.SkipOnSuccessOf[i] {
			return false
		}
	}
	if this.UseAndForComparisons != that1.UseAndForComparisons {
		return false
	}
	return true
}
func (this *FeedbackLoop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedbackLoop)
	if !ok {
		that2, ok := that.(FeedbackLoop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActionID != that1.ActionID {
		return false
	}
	if this.ResponseIndex != that1.ResponseIndex {
		return false
	}
	if this.ResponseKey != that1.ResponseKey {
		return false
	}
	if this.MsgsIndex != that1.MsgsIndex {
		return false
	}
	if this.MsgKey != that1.MsgKey {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.CalculateDifference != that1.CalculateDifference {
		return false
	}
	if this.QueryId != that1.QueryId {
		return false
	}
	if !this.ICQConfig.Equal(that1.ICQConfig) {
		return false
	}
	return true
}
func (this *Comparison) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Comparison)
	if !ok {
		that2, ok := that.(Comparison)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActionID != that1.ActionID {
		return false
	}
	if this.ResponseIndex != that1.ResponseIndex {
		return false
	}
	if this.ResponseKey != that1.ResponseKey {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Operand != that1.Operand {
		return false
	}
	if this.CalculateDifference != that1.CalculateDifference {
		return false
	}
	if this.QueryId != that1.QueryId {
		return false
	}
	if !this.ICQConfig.Equal(that1.ICQConfig) {
		return false
	}
	return true
}
func (this *ICQConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICQConfig)
	if !ok {
		that2, ok := that.(ICQConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.TimeoutPolicy != that1.TimeoutPolicy {
		return false
	}
	if this.TimeoutDuration != that1.TimeoutDuration {
		return false
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	if this.QueryKey != that1.QueryKey {
		return false
	}
	if !bytes.Equal(this.Response, that1.Response) {
		return false
	}
	return true
}
func (m *ActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conditions != nil {
		{
			size, err := m.Conditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.HostedConfig != nil {
		{
			size, err := m.HostedConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ICAConfig != nil {
		{
			size, err := m.ICAConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdateHistory) > 0 {
		for iNdEx := len(m.UpdateHistory) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdateHistory[iNdEx], dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdateHistory[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintAction(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x52
		}
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintAction(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x4a
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintAction(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x42
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintAction(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x3a
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintAction(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x32
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FeeAddress) > 0 {
		i -= len(m.FeeAddress)
		copy(dAtA[i:], m.FeeAddress)
		i = encodeVarintAction(dAtA, i, uint64(len(m.FeeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICAConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICAConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICAConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostConnectionID) > 0 {
		i -= len(m.HostConnectionID)
		copy(dAtA[i:], m.HostConnectionID)
		i = encodeVarintAction(dAtA, i, uint64(len(m.HostConnectionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionID) > 0 {
		i -= len(m.ConnectionID)
		copy(dAtA[i:], m.ConnectionID)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ConnectionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintAction(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostedConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostedConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostedConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeCoinLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.HostedAddress) > 0 {
		i -= len(m.HostedAddress)
		copy(dAtA[i:], m.HostedAddress)
		i = encodeVarintAction(dAtA, i, uint64(len(m.HostedAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReregisterICAAfterTimeout {
		i--
		if m.ReregisterICAAfterTimeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.FallbackToOwnerBalance {
		i--
		if m.FallbackToOwnerBalance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.StopOnFailure {
		i--
		if m.StopOnFailure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StopOnSuccess {
		i--
		if m.StopOnSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UpdatingDisabled {
		i--
		if m.UpdatingDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SaveResponses {
		i--
		if m.SaveResponses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionHistoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionHistoryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionHistoryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryResponses) > 0 {
		for iNdEx := len(m.QueryResponses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryResponses[iNdEx])
			copy(dAtA[i:], m.QueryResponses[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.QueryResponses[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MsgResponses) > 0 {
		for iNdEx := len(m.MsgResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TimedOut {
		i--
		if m.TimedOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.ExecFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ActualExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActualExecTime):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintAction(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x12
	n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ScheduledExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ScheduledExecTime):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintAction(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExecutionConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseAndForComparisons {
		i--
		if m.UseAndForComparisons {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.SkipOnSuccessOf) > 0 {
		dAtA14 := make([]byte, len(m.SkipOnSuccessOf)*10)
		var j13 int
		for _, num := range m.SkipOnSuccessOf {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintAction(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SkipOnFailureOf) > 0 {
		dAtA16 := make([]byte, len(m.SkipOnFailureOf)*10)
		var j15 int
		for _, num := range m.SkipOnFailureOf {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintAction(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StopOnFailureOf) > 0 {
		dAtA18 := make([]byte, len(m.StopOnFailureOf)*10)
		var j17 int
		for _, num := range m.StopOnFailureOf {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintAction(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StopOnSuccessOf) > 0 {
		dAtA20 := make([]byte, len(m.StopOnSuccessOf)*10)
		var j19 int
		for _, num := range m.StopOnSuccessOf {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintAction(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeedbackLoops) > 0 {
		for iNdEx := len(m.FeedbackLoops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedbackLoops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Comparisons) > 0 {
		for iNdEx := len(m.Comparisons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comparisons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeedbackLoop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackLoop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedbackLoop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ICQConfig != nil {
		{
			size, err := m.ICQConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x42
	}
	if m.CalculateDifference {
		i--
		if m.CalculateDifference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MsgKey) > 0 {
		i -= len(m.MsgKey)
		copy(dAtA[i:], m.MsgKey)
		i = encodeVarintAction(dAtA, i, uint64(len(m.MsgKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MsgsIndex != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.MsgsIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.ResponseIndex != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ResponseIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResponseKey) > 0 {
		i -= len(m.ResponseKey)
		copy(dAtA[i:], m.ResponseKey)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ResponseKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActionID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ActionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Comparison) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comparison) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comparison) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ICQConfig != nil {
		{
			size, err := m.ICQConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x42
	}
	if m.CalculateDifference {
		i--
		if m.CalculateDifference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Operand) > 0 {
		i -= len(m.Operand)
		copy(dAtA[i:], m.Operand)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Operand)))
		i--
		dAtA[i] = 0x32
	}
	if m.Operator != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResponseKey) > 0 {
		i -= len(m.ResponseKey)
		copy(dAtA[i:], m.ResponseKey)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ResponseKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResponseIndex != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ResponseIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionID != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.ActionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICQConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICQConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICQConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.QueryKey) > 0 {
		i -= len(m.QueryKey)
		copy(dAtA[i:], m.QueryKey)
		i = encodeVarintAction(dAtA, i, uint64(len(m.QueryKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintAction(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x2a
	}
	n23, err23 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TimeoutDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration):])
	if err23 != nil {
		return 0, err23
	}
	i -= n23
	i = encodeVarintAction(dAtA, i, uint64(n23))
	i--
	dAtA[i] = 0x22
	if m.TimeoutPolicy != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.TimeoutPolicy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAction(uint64(m.ID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.FeeAddress)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovAction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime)
	n += 1 + l + sovAction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAction(uint64(l))
	if len(m.UpdateHistory) > 0 {
		for _, e := range m.UpdateHistory {
			l = github_com_cosmos_gogoproto_types.SizeOfStdTime(e)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if m.ICAConfig != nil {
		l = m.ICAConfig.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.HostedConfig != nil {
		l = m.HostedConfig.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func (m *ICAConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.ConnectionID)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.HostConnectionID)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func (m *HostedConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostedAddress)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = m.FeeCoinLimit.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *ExecutionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveResponses {
		n += 2
	}
	if m.UpdatingDisabled {
		n += 2
	}
	if m.StopOnSuccess {
		n += 2
	}
	if m.StopOnFailure {
		n += 2
	}
	if m.FallbackToOwnerBalance {
		n += 2
	}
	if m.ReregisterICAAfterTimeout {
		n += 2
	}
	return n
}

func (m *ActionHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	return n
}

func (m *ActionHistoryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ScheduledExecTime)
	n += 1 + l + sovAction(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActualExecTime)
	n += 1 + l + sovAction(uint64(l))
	l = m.ExecFee.Size()
	n += 1 + l + sovAction(uint64(l))
	if m.Executed {
		n += 2
	}
	if m.TimedOut {
		n += 2
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.MsgResponses) > 0 {
		for _, e := range m.MsgResponses {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.QueryResponses) > 0 {
		for _, s := range m.QueryResponses {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	return n
}

func (m *ExecutionConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comparisons) > 0 {
		for _, e := range m.Comparisons {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.FeedbackLoops) > 0 {
		for _, e := range m.FeedbackLoops {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.StopOnSuccessOf) > 0 {
		l = 0
		for _, e := range m.StopOnSuccessOf {
			l += sovAction(uint64(e))
		}
		n += 1 + sovAction(uint64(l)) + l
	}
	if len(m.StopOnFailureOf) > 0 {
		l = 0
		for _, e := range m.StopOnFailureOf {
			l += sovAction(uint64(e))
		}
		n += 1 + sovAction(uint64(l)) + l
	}
	if len(m.SkipOnFailureOf) > 0 {
		l = 0
		for _, e := range m.SkipOnFailureOf {
			l += sovAction(uint64(e))
		}
		n += 1 + sovAction(uint64(l)) + l
	}
	if len(m.SkipOnSuccessOf) > 0 {
		l = 0
		for _, e := range m.SkipOnSuccessOf {
			l += sovAction(uint64(e))
		}
		n += 1 + sovAction(uint64(l)) + l
	}
	if m.UseAndForComparisons {
		n += 2
	}
	return n
}

func (m *FeedbackLoop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionID != 0 {
		n += 1 + sovAction(uint64(m.ActionID))
	}
	l = len(m.ResponseKey)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ResponseIndex != 0 {
		n += 1 + sovAction(uint64(m.ResponseIndex))
	}
	if m.MsgsIndex != 0 {
		n += 1 + sovAction(uint64(m.MsgsIndex))
	}
	l = len(m.MsgKey)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.CalculateDifference {
		n += 2
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ICQConfig != nil {
		l = m.ICQConfig.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func (m *Comparison) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionID != 0 {
		n += 1 + sovAction(uint64(m.ActionID))
	}
	if m.ResponseIndex != 0 {
		n += 1 + sovAction(uint64(m.ResponseIndex))
	}
	l = len(m.ResponseKey)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Operator != 0 {
		n += 1 + sovAction(uint64(m.Operator))
	}
	l = len(m.Operand)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.CalculateDifference {
		n += 2
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ICQConfig != nil {
		l = m.ICQConfig.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func (m *ICQConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.TimeoutPolicy != 0 {
		n += 1 + sovAction(uint64(m.TimeoutPolicy))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration)
	n += 1 + l + sovAction(uint64(l))
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.QueryKey)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func sovAction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAction(x uint64) (n int) {
	return sovAction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateHistory = append(m.UpdateHistory, time.Time{})
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&(m.UpdateHistory[len(m.UpdateHistory)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICAConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICAConfig == nil {
				m.ICAConfig = &ICAConfig{}
			}
			if err := m.ICAConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &ExecutionConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostedConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostedConfig == nil {
				m.HostedConfig = &HostedConfig{}
			}
			if err := m.HostedConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &ExecutionConditions{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICAConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICAConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICAConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConnectionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostConnectionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostedConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostedConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostedConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCoinLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCoinLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveResponses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaveResponses = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatingDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatingDisabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopOnSuccess = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnFailure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopOnFailure = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackToOwnerBalance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FallbackToOwnerBalance = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReregisterICAAfterTimeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReregisterICAAfterTimeout = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, ActionHistoryEntry{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionHistoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionHistoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionHistoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ScheduledExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ActualExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimedOut = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResponses = append(m.MsgResponses, &types.Any{})
			if err := m.MsgResponses[len(m.MsgResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponses = append(m.QueryResponses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comparisons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comparisons = append(m.Comparisons, &Comparison{})
			if err := m.Comparisons[len(m.Comparisons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackLoops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedbackLoops = append(m.FeedbackLoops, &FeedbackLoop{})
			if err := m.FeedbackLoops[len(m.FeedbackLoops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StopOnSuccessOf = append(m.StopOnSuccessOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StopOnSuccessOf) == 0 {
					m.StopOnSuccessOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StopOnSuccessOf = append(m.StopOnSuccessOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnSuccessOf", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StopOnFailureOf = append(m.StopOnFailureOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StopOnFailureOf) == 0 {
					m.StopOnFailureOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StopOnFailureOf = append(m.StopOnFailureOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnFailureOf", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkipOnFailureOf = append(m.SkipOnFailureOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkipOnFailureOf) == 0 {
					m.SkipOnFailureOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkipOnFailureOf = append(m.SkipOnFailureOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipOnFailureOf", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkipOnSuccessOf = append(m.SkipOnSuccessOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkipOnSuccessOf) == 0 {
					m.SkipOnSuccessOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkipOnSuccessOf = append(m.SkipOnSuccessOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipOnSuccessOf", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAndForComparisons", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseAndForComparisons = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedbackLoop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedbackLoop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedbackLoop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionID", wireType)
			}
			m.ActionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseIndex", wireType)
			}
			m.ResponseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsIndex", wireType)
			}
			m.MsgsIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgsIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateDifference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalculateDifference = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICQConfig == nil {
				m.ICQConfig = &ICQConfig{}
			}
			if err := m.ICQConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comparison) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comparison: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comparison: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionID", wireType)
			}
			m.ActionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseIndex", wireType)
			}
			m.ResponseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= ComparisonOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateDifference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalculateDifference = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICQConfig == nil {
				m.ICQConfig = &ICQConfig{}
			}
			if err := m.ICQConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICQConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICQConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICQConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutPolicy", wireType)
			}
			m.TimeoutPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutPolicy |= types2.TimeoutPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TimeoutDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAction = fmt.Errorf("proto: unexpected end of group")
)
