// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intento/intent/v1beta1/hostedaccount.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostedAccount struct {
	HostedAddress string         `protobuf:"bytes,1,opt,name=hosted_address,json=hostedAddress,proto3" json:"hosted_address,omitempty"`
	ICAConfig     *ICAConfig     `protobuf:"bytes,2,opt,name=ica_config,json=icaConfig,proto3" json:"ica_config,omitempty"`
	HostFeeConfig *HostFeeConfig `protobuf:"bytes,3,opt,name=host_fee_config,json=hostFeeConfig,proto3" json:"host_fee_config,omitempty"`
}

func (m *HostedAccount) Reset()         { *m = HostedAccount{} }
func (m *HostedAccount) String() string { return proto.CompactTextString(m) }
func (*HostedAccount) ProtoMessage()    {}
func (*HostedAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_40918035775ad506, []int{0}
}
func (m *HostedAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostedAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostedAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostedAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostedAccount.Merge(m, src)
}
func (m *HostedAccount) XXX_Size() int {
	return m.Size()
}
func (m *HostedAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_HostedAccount.DiscardUnknown(m)
}

var xxx_messageInfo_HostedAccount proto.InternalMessageInfo

type HostFeeConfig struct {
	Admin            string                                   `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	FeeCoinsSuported github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=fee_coins_suported,json=feeCoinsSuported,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_coins_suported"`
}

func (m *HostFeeConfig) Reset()         { *m = HostFeeConfig{} }
func (m *HostFeeConfig) String() string { return proto.CompactTextString(m) }
func (*HostFeeConfig) ProtoMessage()    {}
func (*HostFeeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_40918035775ad506, []int{1}
}
func (m *HostFeeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostFeeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostFeeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostFeeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostFeeConfig.Merge(m, src)
}
func (m *HostFeeConfig) XXX_Size() int {
	return m.Size()
}
func (m *HostFeeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostFeeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostFeeConfig proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HostedAccount)(nil), "intento.intent.v1beta1.HostedAccount")
	proto.RegisterType((*HostFeeConfig)(nil), "intento.intent.v1beta1.HostFeeConfig")
}

func init() {
	proto.RegisterFile("intento/intent/v1beta1/hostedaccount.proto", fileDescriptor_40918035775ad506)
}

var fileDescriptor_40918035775ad506 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xd1, 0x6e, 0xda, 0x30,
	0x14, 0x8d, 0x87, 0x36, 0x29, 0x46, 0x6c, 0x53, 0x84, 0x26, 0xe0, 0xc1, 0x30, 0x26, 0xa4, 0x08,
	0x69, 0xc9, 0x60, 0x5f, 0x00, 0x48, 0xd3, 0x26, 0xad, 0xaa, 0x44, 0xdf, 0xfa, 0x12, 0x39, 0x8e,
	0x09, 0x56, 0x8b, 0x8d, 0x62, 0x53, 0x95, 0xbf, 0xe8, 0x27, 0xf4, 0xb1, 0xea, 0x97, 0xf0, 0xc8,
	0x53, 0xd5, 0x27, 0xda, 0x86, 0x1f, 0xa9, 0x62, 0x9b, 0xa8, 0x0f, 0xe5, 0xe9, 0xe6, 0xdc, 0x7b,
	0x72, 0xce, 0xb9, 0xbe, 0xb0, 0xcf, 0xb8, 0xa2, 0x5c, 0x89, 0xd0, 0xd4, 0xf0, 0x6a, 0x10, 0x53,
	0x85, 0x07, 0xe1, 0x5c, 0x48, 0x45, 0x13, 0x4c, 0x88, 0x58, 0x71, 0x15, 0x2c, 0x33, 0xa1, 0x84,
	0xf7, 0xcd, 0x72, 0x03, 0x53, 0x03, 0xcb, 0x6d, 0xd5, 0x53, 0x91, 0x0a, 0x4d, 0x09, 0x8b, 0x2f,
	0xc3, 0x6e, 0x35, 0x89, 0x90, 0x0b, 0x21, 0x23, 0x33, 0x30, 0xc0, 0x8e, 0x90, 0x41, 0x61, 0x8c,
	0x25, 0x2d, 0x1d, 0x89, 0x60, 0xdc, 0xce, 0x7f, 0x1c, 0x09, 0x85, 0x89, 0x62, 0xc2, 0x92, 0xba,
	0x0f, 0x00, 0xd6, 0xfe, 0xea, 0x94, 0x23, 0x93, 0xd2, 0xeb, 0xc1, 0xcf, 0x26, 0x76, 0x84, 0x93,
	0x24, 0xa3, 0x52, 0x36, 0x40, 0x07, 0xf8, 0xee, 0xb4, 0x66, 0xba, 0x23, 0xd3, 0xf4, 0x4e, 0x21,
	0x64, 0x04, 0x47, 0x44, 0xf0, 0x19, 0x4b, 0x1b, 0x1f, 0x3a, 0xc0, 0xaf, 0x0e, 0xbf, 0x07, 0xef,
	0xef, 0x16, 0xfc, 0x9b, 0x8c, 0x26, 0x9a, 0x38, 0xae, 0xe5, 0xbb, 0xb6, 0x5b, 0xc2, 0xa9, 0xcb,
	0x08, 0x36, 0x9f, 0xde, 0x09, 0xfc, 0x52, 0x38, 0x44, 0x33, 0x4a, 0x0f, 0xaa, 0x15, 0xad, 0xda,
	0x3b, 0xa6, 0x5a, 0xe4, 0xfe, 0x43, 0xa9, 0x95, 0xd2, 0xf9, 0x4a, 0xd8, 0xbd, 0xb5, 0x8b, 0x95,
	0x1d, 0xaf, 0x0e, 0x3f, 0xe2, 0x64, 0xc1, 0xb8, 0xdd, 0xc7, 0x00, 0x6f, 0x0d, 0x3d, 0xe3, 0xc8,
	0xb8, 0x8c, 0xe4, 0x6a, 0x29, 0x32, 0x45, 0x93, 0x86, 0xdb, 0xa9, 0xf8, 0xd5, 0x61, 0x33, 0xb0,
	0x0f, 0x5e, 0x3c, 0x71, 0x69, 0x3b, 0x11, 0x8c, 0x8f, 0x7f, 0x6d, 0x76, 0x6d, 0xe7, 0xfe, 0xa9,
	0xed, 0xa7, 0x4c, 0xcd, 0x57, 0x71, 0x40, 0xc4, 0xc2, 0x5e, 0xc7, 0x96, 0x9f, 0x32, 0xb9, 0x08,
	0xd5, 0x7a, 0x49, 0xa5, 0xfe, 0x41, 0x4e, 0xbf, 0xce, 0x8a, 0x24, 0x8c, 0xcb, 0x33, 0x6b, 0x32,
	0xfe, 0xbf, 0x79, 0x41, 0xce, 0x5d, 0x8e, 0xc0, 0x26, 0x47, 0x60, 0x9b, 0x23, 0xf0, 0x9c, 0x23,
	0x70, 0xb3, 0x47, 0xce, 0x76, 0x8f, 0x9c, 0xc7, 0x3d, 0x72, 0xce, 0xfb, 0x6f, 0xd4, 0x55, 0x26,
	0xd5, 0x25, 0x8e, 0x65, 0x78, 0x38, 0xeb, 0xf5, 0xe1, 0xb0, 0xda, 0x25, 0xfe, 0xa4, 0x0f, 0xfa,
	0xfb, 0x35, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x17, 0x77, 0x50, 0x8c, 0x02, 0x00, 0x00,
}

func (this *HostedAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostedAccount)
	if !ok {
		that2, ok := that.(HostedAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostedAddress != that1.HostedAddress {
		return false
	}
	if !this.ICAConfig.Equal(that1.ICAConfig) {
		return false
	}
	if !this.HostFeeConfig.Equal(that1.HostFeeConfig) {
		return false
	}
	return true
}
func (this *HostFeeConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostFeeConfig)
	if !ok {
		that2, ok := that.(HostFeeConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if len(this.FeeCoinsSuported) != len(that1.FeeCoinsSuported) {
		return false
	}
	for i := range this.FeeCoinsSuported {
		if !this.FeeCoinsSuported[i].Equal(&that1.FeeCoinsSuported[i]) {
			return false
		}
	}
	return true
}
func (m *HostedAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostedAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostedAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostFeeConfig != nil {
		{
			size, err := m.HostFeeConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostedaccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ICAConfig != nil {
		{
			size, err := m.ICAConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostedaccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostedAddress) > 0 {
		i -= len(m.HostedAddress)
		copy(dAtA[i:], m.HostedAddress)
		i = encodeVarintHostedaccount(dAtA, i, uint64(len(m.HostedAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostFeeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostFeeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostFeeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeCoinsSuported) > 0 {
		for iNdEx := len(m.FeeCoinsSuported) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeCoinsSuported[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHostedaccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintHostedaccount(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostedaccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostedaccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostedAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostedAddress)
	if l > 0 {
		n += 1 + l + sovHostedaccount(uint64(l))
	}
	if m.ICAConfig != nil {
		l = m.ICAConfig.Size()
		n += 1 + l + sovHostedaccount(uint64(l))
	}
	if m.HostFeeConfig != nil {
		l = m.HostFeeConfig.Size()
		n += 1 + l + sovHostedaccount(uint64(l))
	}
	return n
}

func (m *HostFeeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovHostedaccount(uint64(l))
	}
	if len(m.FeeCoinsSuported) > 0 {
		for _, e := range m.FeeCoinsSuported {
			l = e.Size()
			n += 1 + l + sovHostedaccount(uint64(l))
		}
	}
	return n
}

func sovHostedaccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostedaccount(x uint64) (n int) {
	return sovHostedaccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostedAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostedaccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostedAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostedAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostedaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICAConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostedaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICAConfig == nil {
				m.ICAConfig = &ICAConfig{}
			}
			if err := m.ICAConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostFeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostedaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostFeeConfig == nil {
				m.HostFeeConfig = &HostFeeConfig{}
			}
			if err := m.HostFeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostedaccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostFeeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostedaccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostFeeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostFeeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostedaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCoinsSuported", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostedaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCoinsSuported = append(m.FeeCoinsSuported, types.Coin{})
			if err := m.FeeCoinsSuported[len(m.FeeCoinsSuported)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostedaccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostedaccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostedaccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostedaccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostedaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostedaccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostedaccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostedaccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostedaccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostedaccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostedaccount = fmt.Errorf("proto: unexpected end of group")
)
