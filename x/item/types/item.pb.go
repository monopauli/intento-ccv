// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item/v1beta1/item.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Creator         string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              uint64           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Title           string           `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description     string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status          string           `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Estimation      *Estimation      `protobuf:"bytes,7,opt,name=estimation,proto3" json:"estimation,omitempty"`
	ListingDuration *ListingDuration `protobuf:"bytes,8,opt,name=listing_duration,json=listingDuration,proto3" json:"listing_duration,omitempty"`
	Transfer        *Transfer        `protobuf:"bytes,9,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Properties      *Properties      `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Item) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Item) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Item) GetEstimation() *Estimation {
	if m != nil {
		return m.Estimation
	}
	return nil
}

func (m *Item) GetListingDuration() *ListingDuration {
	if m != nil {
		return m.ListingDuration
	}
	return nil
}

func (m *Item) GetTransfer() *Transfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *Item) GetProperties() *Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Estimation struct {
	EstimationPrice int64    `protobuf:"varint,1,opt,name=estimation_price,json=estimationPrice,proto3" json:"estimation_price,omitempty"`
	BestEstimator   string   `protobuf:"bytes,2,opt,name=best_estimator,json=bestEstimator,proto3" json:"best_estimator,omitempty"`
	EstimationCount int64    `protobuf:"varint,3,opt,name=estimation_count,json=estimationCount,proto3" json:"estimation_count,omitempty"`
	EstimationTotal int64    `protobuf:"varint,4,opt,name=estimation_total,json=estimationTotal,proto3" json:"estimation_total,omitempty"`
	EstimatorList   []string `protobuf:"bytes,5,rep,name=estimator_list,json=estimatorList,proto3" json:"estimator_list,omitempty"`
	EstimationList  []int64  `protobuf:"varint,6,rep,packed,name=estimation_list,json=estimationList,proto3" json:"estimation_list,omitempty"`
	Comments        []string `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty"`
	DepositAmount   int64    `protobuf:"varint,8,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	Contract        string   `protobuf:"bytes,9,opt,name=contract,proto3" json:"contract,omitempty"`
	Flags           int64    `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (m *Estimation) Reset()         { *m = Estimation{} }
func (m *Estimation) String() string { return proto.CompactTextString(m) }
func (*Estimation) ProtoMessage()    {}
func (*Estimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{1}
}
func (m *Estimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Estimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Estimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Estimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Estimation.Merge(m, src)
}
func (m *Estimation) XXX_Size() int {
	return m.Size()
}
func (m *Estimation) XXX_DiscardUnknown() {
	xxx_messageInfo_Estimation.DiscardUnknown(m)
}

var xxx_messageInfo_Estimation proto.InternalMessageInfo

func (m *Estimation) GetEstimationPrice() int64 {
	if m != nil {
		return m.EstimationPrice
	}
	return 0
}

func (m *Estimation) GetBestEstimator() string {
	if m != nil {
		return m.BestEstimator
	}
	return ""
}

func (m *Estimation) GetEstimationCount() int64 {
	if m != nil {
		return m.EstimationCount
	}
	return 0
}

func (m *Estimation) GetEstimationTotal() int64 {
	if m != nil {
		return m.EstimationTotal
	}
	return 0
}

func (m *Estimation) GetEstimatorList() []string {
	if m != nil {
		return m.EstimatorList
	}
	return nil
}

func (m *Estimation) GetEstimationList() []int64 {
	if m != nil {
		return m.EstimationList
	}
	return nil
}

func (m *Estimation) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Estimation) GetDepositAmount() int64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *Estimation) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Estimation) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ListingDuration struct {
	SubmitTime time.Time `protobuf:"bytes,1,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time"`
	EndTime    time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *ListingDuration) Reset()         { *m = ListingDuration{} }
func (m *ListingDuration) String() string { return proto.CompactTextString(m) }
func (*ListingDuration) ProtoMessage()    {}
func (*ListingDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{2}
}
func (m *ListingDuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListingDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListingDuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListingDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListingDuration.Merge(m, src)
}
func (m *ListingDuration) XXX_Size() int {
	return m.Size()
}
func (m *ListingDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_ListingDuration.DiscardUnknown(m)
}

var xxx_messageInfo_ListingDuration proto.InternalMessageInfo

func (m *ListingDuration) GetSubmitTime() time.Time {
	if m != nil {
		return m.SubmitTime
	}
	return time.Time{}
}

func (m *ListingDuration) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

type Transfer struct {
	ShippingCost   int64    `protobuf:"varint,1,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	Location       string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Tracking       bool     `protobuf:"varint,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	ShippingRegion []string `protobuf:"bytes,4,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	Rating         int64    `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Note           string   `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	Discount       int64    `protobuf:"varint,7,opt,name=discount,proto3" json:"discount,omitempty"`
	Buyer          string   `protobuf:"bytes,8,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller         string   `protobuf:"bytes,9,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{3}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *Transfer) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Transfer) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *Transfer) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *Transfer) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Transfer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Transfer) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *Transfer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Transfer) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

type Properties struct {
	Condition      int64    `protobuf:"varint,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Photos         []string `protobuf:"bytes,2,rep,name=photos,proto3" json:"photos,omitempty"`
	IsToken        bool     `protobuf:"varint,3,opt,name=is_token,json=isToken,proto3" json:"is_token,omitempty"`
	EstimationOnly bool     `protobuf:"varint,4,opt,name=estimation_only,json=estimationOnly,proto3" json:"estimation_only,omitempty"`
	Tags           []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	TokenUri       string   `protobuf:"bytes,6,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	Transferable   bool     `protobuf:"varint,7,opt,name=transferable,proto3" json:"transferable,omitempty"`
}

func (m *Properties) Reset()         { *m = Properties{} }
func (m *Properties) String() string { return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()    {}
func (*Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{4}
}
func (m *Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Properties.Merge(m, src)
}
func (m *Properties) XXX_Size() int {
	return m.Size()
}
func (m *Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Properties proto.InternalMessageInfo

func (m *Properties) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *Properties) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *Properties) GetIsToken() bool {
	if m != nil {
		return m.IsToken
	}
	return false
}

func (m *Properties) GetEstimationOnly() bool {
	if m != nil {
		return m.EstimationOnly
	}
	return false
}

func (m *Properties) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Properties) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *Properties) GetTransferable() bool {
	if m != nil {
		return m.Transferable
	}
	return false
}

type MsgCreateItem struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title           string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ShippingCost    int64    `protobuf:"varint,4,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	Location        string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	EstimationCount int64    `protobuf:"varint,6,opt,name=estimation_count,json=estimationCount,proto3" json:"estimation_count,omitempty"`
	Tags            []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Condition       int64    `protobuf:"varint,8,opt,name=condition,proto3" json:"condition,omitempty"`
	ShippingRegion  []string `protobuf:"bytes,9,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	DepositAmount   int64    `protobuf:"varint,10,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	Msg         []byte   `protobuf:"bytes,11,opt,name=msg,json=msg,proto3" json:"msg,omitempty"`
	AutoMsg         []byte   `protobuf:"bytes,12,opt,name=auto_msg,json=autoMsg,proto3" json:"auto_msg,omitempty"`
	Photos          []string `protobuf:"bytes,13,rep,name=photos,proto3" json:"photos,omitempty"`
	TokenUri        string   `protobuf:"bytes,14,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
}

func (m *MsgCreateItem) Reset()         { *m = MsgCreateItem{} }
func (m *MsgCreateItem) String() string { return proto.CompactTextString(m) }
func (*MsgCreateItem) ProtoMessage()    {}
func (*MsgCreateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{5}
}
func (m *MsgCreateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateItem.Merge(m, src)
}
func (m *MsgCreateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateItem proto.InternalMessageInfo

func (m *MsgCreateItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateItem) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgCreateItem) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MsgCreateItem) GetEstimationCount() int64 {
	if m != nil {
		return m.EstimationCount
	}
	return 0
}

func (m *MsgCreateItem) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MsgCreateItem) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *MsgCreateItem) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *MsgCreateItem) GetDepositAmount() int64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *MsgCreateItem) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgCreateItem) GetAutoMsg() []byte {
	if m != nil {
		return m.AutoMsg
	}
	return nil
}

func (m *MsgCreateItem) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *MsgCreateItem) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

type MsgUpdateItem struct {
	Seller         string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Id             uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ShippingCost   int64    `protobuf:"varint,3,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	Location       string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	ShippingRegion []string `protobuf:"bytes,5,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
}

func (m *MsgUpdateItem) Reset()         { *m = MsgUpdateItem{} }
func (m *MsgUpdateItem) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateItem) ProtoMessage()    {}
func (*MsgUpdateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{6}
}
func (m *MsgUpdateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateItem.Merge(m, src)
}
func (m *MsgUpdateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateItem proto.InternalMessageInfo

func (m *MsgUpdateItem) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgUpdateItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateItem) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgUpdateItem) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MsgUpdateItem) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

type MsgDeleteItem struct {
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteItem) Reset()         { *m = MsgDeleteItem{} }
func (m *MsgDeleteItem) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteItem) ProtoMessage()    {}
func (*MsgDeleteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{7}
}
func (m *MsgDeleteItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteItem.Merge(m, src)
}
func (m *MsgDeleteItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteItem proto.InternalMessageInfo

func (m *MsgDeleteItem) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgDeleteItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgRevealEstimation struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Itemid    uint64 `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	RevealMsg []byte `protobuf:"bytes,3,opt,name=reveal_msg,json=revealMsg,proto3" json:"reveal_msg,omitempty"`
}

func (m *MsgRevealEstimation) Reset()         { *m = MsgRevealEstimation{} }
func (m *MsgRevealEstimation) String() string { return proto.CompactTextString(m) }
func (*MsgRevealEstimation) ProtoMessage()    {}
func (*MsgRevealEstimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{8}
}
func (m *MsgRevealEstimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevealEstimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevealEstimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevealEstimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevealEstimation.Merge(m, src)
}
func (m *MsgRevealEstimation) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevealEstimation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevealEstimation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevealEstimation proto.InternalMessageInfo

func (m *MsgRevealEstimation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevealEstimation) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgRevealEstimation) GetRevealMsg() []byte {
	if m != nil {
		return m.RevealMsg
	}
	return nil
}

type MsgItemTransferable struct {
	Seller          string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	TransferableMsg []byte `protobuf:"bytes,2,opt,name=transferable_msg,json=transferableMsg,proto3" json:"transferable_msg,omitempty"`
	Itemid          uint64 `protobuf:"varint,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemTransferable) Reset()         { *m = MsgItemTransferable{} }
func (m *MsgItemTransferable) String() string { return proto.CompactTextString(m) }
func (*MsgItemTransferable) ProtoMessage()    {}
func (*MsgItemTransferable) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{9}
}
func (m *MsgItemTransferable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemTransferable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemTransferable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemTransferable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemTransferable.Merge(m, src)
}
func (m *MsgItemTransferable) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemTransferable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemTransferable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemTransferable proto.InternalMessageInfo

func (m *MsgItemTransferable) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemTransferable) GetTransferableMsg() []byte {
	if m != nil {
		return m.TransferableMsg
	}
	return nil
}

func (m *MsgItemTransferable) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type MsgItemShipping struct {
	Seller   string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Tracking bool   `protobuf:"varint,2,opt,name=tracking,proto3" json:"tracking,omitempty"`
	Itemid   uint64 `protobuf:"varint,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemShipping) Reset()         { *m = MsgItemShipping{} }
func (m *MsgItemShipping) String() string { return proto.CompactTextString(m) }
func (*MsgItemShipping) ProtoMessage()    {}
func (*MsgItemShipping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{10}
}
func (m *MsgItemShipping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemShipping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemShipping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemShipping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemShipping.Merge(m, src)
}
func (m *MsgItemShipping) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemShipping) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemShipping.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemShipping proto.InternalMessageInfo

func (m *MsgItemShipping) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemShipping) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *MsgItemShipping) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type MsgItemResell struct {
	Seller         string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Itemid         uint64   `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	ShippingCost   int64    `protobuf:"varint,3,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	Discount       int64    `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`
	Location       string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	ShippingRegion []string `protobuf:"bytes,6,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	Note           string   `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *MsgItemResell) Reset()         { *m = MsgItemResell{} }
func (m *MsgItemResell) String() string { return proto.CompactTextString(m) }
func (*MsgItemResell) ProtoMessage()    {}
func (*MsgItemResell) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{11}
}
func (m *MsgItemResell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemResell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemResell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemResell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemResell.Merge(m, src)
}
func (m *MsgItemResell) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemResell) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemResell.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemResell proto.InternalMessageInfo

func (m *MsgItemResell) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemResell) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgItemResell) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgItemResell) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *MsgItemResell) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MsgItemResell) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *MsgItemResell) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

// ActiveParams defines the params for activeness of items on governance proposals.
type Params struct {
	//  Maximum period for trst holders to buy an item. Initial value: 2
	//  months.
	MaxActivePeriod           time.Duration `protobuf:"bytes,1,opt,name=MaxActivePeriod,proto3,stdduration" json:"max_active_period,omitempty"`
	MaxEstimatorCreatorRatio  int64         `protobuf:"varint,2,opt,name=MaxEstimatorCreatorRatio,proto3" json:"MaxEstimatorCreatorRatio,omitempty"`
	EstimationRatioForNewItem int64         `protobuf:"varint,3,opt,name=EstimationRatioForNewItem,proto3" json:"EstimationRatioForNewItem,omitempty"`
	CreateItemFee             int64         `protobuf:"varint,4,opt,name=CreateItemFee,proto3" json:"CreateItemFee,omitempty"`
	MaxBuyerReward            int64         `protobuf:"varint,5,opt,name=MaxBuyerReward,proto3" json:"MaxBuyerReward,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{12}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxActivePeriod() time.Duration {
	if m != nil {
		return m.MaxActivePeriod
	}
	return 0
}

func (m *Params) GetMaxEstimatorCreatorRatio() int64 {
	if m != nil {
		return m.MaxEstimatorCreatorRatio
	}
	return 0
}

func (m *Params) GetEstimationRatioForNewItem() int64 {
	if m != nil {
		return m.EstimationRatioForNewItem
	}
	return 0
}

func (m *Params) GetCreateItemFee() int64 {
	if m != nil {
		return m.CreateItemFee
	}
	return 0
}

func (m *Params) GetMaxBuyerReward() int64 {
	if m != nil {
		return m.MaxBuyerReward
	}
	return 0
}

type MsgTokenizeItem struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Id     uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTokenizeItem) Reset()         { *m = MsgTokenizeItem{} }
func (m *MsgTokenizeItem) String() string { return proto.CompactTextString(m) }
func (*MsgTokenizeItem) ProtoMessage()    {}
func (*MsgTokenizeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{13}
}
func (m *MsgTokenizeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenizeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenizeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenizeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenizeItem.Merge(m, src)
}
func (m *MsgTokenizeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenizeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenizeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenizeItem proto.InternalMessageInfo

func (m *MsgTokenizeItem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenizeItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUnTokenizeItem struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Id     uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgUnTokenizeItem) Reset()         { *m = MsgUnTokenizeItem{} }
func (m *MsgUnTokenizeItem) String() string { return proto.CompactTextString(m) }
func (*MsgUnTokenizeItem) ProtoMessage()    {}
func (*MsgUnTokenizeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d14dec217dff107, []int{14}
}
func (m *MsgUnTokenizeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnTokenizeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnTokenizeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnTokenizeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnTokenizeItem.Merge(m, src)
}
func (m *MsgUnTokenizeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnTokenizeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnTokenizeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnTokenizeItem proto.InternalMessageInfo

func (m *MsgUnTokenizeItem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUnTokenizeItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Item)(nil), "trstlabs.trst.item.v1beta1.Item")
	proto.RegisterType((*Estimation)(nil), "trstlabs.trst.item.v1beta1.Estimation")
	proto.RegisterType((*ListingDuration)(nil), "trstlabs.trst.item.v1beta1.ListingDuration")
	proto.RegisterType((*Transfer)(nil), "trstlabs.trst.item.v1beta1.Transfer")
	proto.RegisterType((*Properties)(nil), "trstlabs.trst.item.v1beta1.Properties")
	proto.RegisterType((*MsgCreateItem)(nil), "trstlabs.trst.item.v1beta1.MsgCreateItem")
	proto.RegisterType((*MsgUpdateItem)(nil), "trstlabs.trst.item.v1beta1.MsgUpdateItem")
	proto.RegisterType((*MsgDeleteItem)(nil), "trstlabs.trst.item.v1beta1.MsgDeleteItem")
	proto.RegisterType((*MsgRevealEstimation)(nil), "trstlabs.trst.item.v1beta1.MsgRevealEstimation")
	proto.RegisterType((*MsgItemTransferable)(nil), "trstlabs.trst.item.v1beta1.MsgItemTransferable")
	proto.RegisterType((*MsgItemShipping)(nil), "trstlabs.trst.item.v1beta1.MsgItemShipping")
	proto.RegisterType((*MsgItemResell)(nil), "trstlabs.trst.item.v1beta1.MsgItemResell")
	proto.RegisterType((*Params)(nil), "trstlabs.trst.item.v1beta1.Params")
	proto.RegisterType((*MsgTokenizeItem)(nil), "trstlabs.trst.item.v1beta1.MsgTokenizeItem")
	proto.RegisterType((*MsgUnTokenizeItem)(nil), "trstlabs.trst.item.v1beta1.MsgUnTokenizeItem")
}

func init() { proto.RegisterFile("item/v1beta1/item.proto", fileDescriptor_6d14dec217dff107) }

var fileDescriptor_6d14dec217dff107 = []byte{
	// 1260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xed, 0xcd, 0xae, 0x77, 0xf2, 0xaf, 0x0c, 0x55, 0x71, 0x53, 0xd8, 0xac, 0x4c, 0xff,
	0xa4, 0x02, 0xed, 0xaa, 0xe5, 0x80, 0x28, 0x48, 0xa5, 0x49, 0x5b, 0x09, 0x89, 0x85, 0xc8, 0xa4,
	0x1c, 0x90, 0xd0, 0xca, 0xbb, 0x9e, 0xb8, 0xa3, 0xda, 0x1e, 0xcb, 0x33, 0xdb, 0x26, 0x7c, 0x00,
	0xce, 0x3d, 0x96, 0x1b, 0x5c, 0xf9, 0x08, 0x9c, 0x39, 0xf4, 0xd8, 0x23, 0x08, 0xa9, 0xa0, 0xe6,
	0xc6, 0x37, 0xe0, 0x86, 0xde, 0xf3, 0xd8, 0xeb, 0x75, 0x76, 0x13, 0xca, 0x25, 0xf2, 0xfb, 0xcd,
	0x9b, 0x37, 0x33, 0xef, 0xf7, 0x7b, 0xef, 0x6d, 0xc8, 0x5b, 0x5c, 0xb1, 0xb8, 0xff, 0xf8, 0xc6,
	0x88, 0x29, 0xff, 0x46, 0x1f, 0x8c, 0x5e, 0x9a, 0x09, 0x25, 0xe8, 0xa6, 0xca, 0xa4, 0x8a, 0xfc,
	0x91, 0xec, 0xc1, 0x47, 0x0f, 0x57, 0xb4, 0xdb, 0xe6, 0x56, 0x28, 0x44, 0x18, 0xb1, 0x3e, 0x7a,
	0x8e, 0x26, 0x07, 0x7d, 0xc5, 0x63, 0x26, 0x95, 0x1f, 0xa7, 0xf9, 0xe6, 0xcd, 0x4e, 0xdd, 0x21,
	0x98, 0x64, 0xbe, 0xe2, 0x22, 0xd1, 0xeb, 0xe7, 0x43, 0x11, 0x0a, 0xfc, 0xec, 0xc3, 0x57, 0x8e,
	0xba, 0x3f, 0x5b, 0xa4, 0xf1, 0x99, 0x62, 0x31, 0x75, 0x48, 0x6b, 0x9c, 0x31, 0x5f, 0x89, 0xcc,
	0x31, 0xba, 0xc6, 0x76, 0xdb, 0x2b, 0x4c, 0xba, 0x4e, 0x4c, 0x1e, 0x38, 0x56, 0xd7, 0xd8, 0x6e,
	0x78, 0x26, 0x0f, 0xe8, 0x79, 0xb2, 0xac, 0xb8, 0x8a, 0x98, 0xd3, 0x40, 0xbf, 0xdc, 0xa0, 0x5d,
	0xb2, 0x12, 0x30, 0x39, 0xce, 0x78, 0x0a, 0x67, 0x3a, 0xcb, 0xb8, 0x56, 0x85, 0xe8, 0x05, 0xd2,
	0x94, 0xca, 0x57, 0x13, 0xe9, 0x34, 0x71, 0x51, 0x5b, 0xf4, 0x3e, 0x21, 0x4c, 0x2a, 0x1e, 0xe3,
	0x65, 0x9d, 0x56, 0xd7, 0xd8, 0x5e, 0xb9, 0x79, 0xb5, 0xb7, 0x38, 0x15, 0xbd, 0x7b, 0xa5, 0xb7,
	0x57, 0xd9, 0x49, 0xbf, 0x26, 0xe7, 0x22, 0x2e, 0x15, 0x4f, 0xc2, 0x61, 0xf1, 0x74, 0xc7, 0xc6,
	0x68, 0xef, 0x9d, 0x16, 0xed, 0xf3, 0x7c, 0xcf, 0x5d, 0xbd, 0xc5, 0xdb, 0x88, 0x66, 0x01, 0xfa,
	0x29, 0xb1, 0x55, 0xe6, 0x27, 0xf2, 0x80, 0x65, 0x4e, 0x1b, 0xe3, 0x5d, 0x3e, 0x2d, 0xde, 0xbe,
	0xf6, 0xf5, 0xca, 0x5d, 0xf0, 0xc2, 0x34, 0x13, 0x29, 0xcb, 0x14, 0x67, 0xd2, 0x21, 0x67, 0xbf,
	0x70, 0xaf, 0xf4, 0xf6, 0x2a, 0x3b, 0xdd, 0x7f, 0x4c, 0x42, 0xa6, 0x8f, 0xa7, 0xd7, 0xc9, 0xb9,
	0xe9, 0xf3, 0x87, 0x69, 0xc6, 0xc7, 0x0c, 0xb9, 0xb3, 0xbc, 0x8d, 0x29, 0xbe, 0x07, 0x30, 0xbd,
	0x42, 0xd6, 0x47, 0x4c, 0xaa, 0xa1, 0xc6, 0x45, 0xe6, 0x98, 0xc8, 0xc1, 0x1a, 0xa0, 0xf7, 0x0a,
	0xb0, 0x16, 0x71, 0x2c, 0x26, 0x89, 0x42, 0xe2, 0x67, 0x22, 0xee, 0x02, 0x5c, 0x73, 0x55, 0x42,
	0xf9, 0x11, 0x0a, 0x62, 0xc6, 0x75, 0x1f, 0x60, 0x38, 0xbc, 0x3c, 0x77, 0x08, 0xd9, 0x75, 0x96,
	0xbb, 0x16, 0x1c, 0x5e, 0xa2, 0xc0, 0x01, 0xbd, 0x46, 0x2a, 0x3b, 0x73, 0xbf, 0x66, 0xd7, 0xda,
	0xb6, 0xbc, 0xf5, 0x29, 0x8c, 0x8e, 0x9b, 0xc4, 0x1e, 0x8b, 0x38, 0x66, 0x89, 0x92, 0x4e, 0x0b,
	0x23, 0x95, 0x36, 0x9c, 0x15, 0xb0, 0x54, 0x48, 0xae, 0x86, 0x7e, 0x8c, 0xf7, 0xb7, 0xf1, 0x52,
	0x6b, 0x1a, 0xbd, 0x83, 0x60, 0x1e, 0x22, 0x51, 0x99, 0x3f, 0x56, 0xc8, 0x29, 0x86, 0xc8, 0x6d,
	0xd0, 0xf7, 0x41, 0xe4, 0x87, 0x39, 0x51, 0x96, 0x97, 0x1b, 0xee, 0x0f, 0x06, 0xd9, 0xa8, 0x49,
	0x85, 0xde, 0x23, 0x2b, 0x72, 0x32, 0x8a, 0xb9, 0x1a, 0x42, 0x31, 0x62, 0xee, 0x57, 0x6e, 0x6e,
	0xf6, 0xf2, 0x42, 0xec, 0x15, 0x85, 0xd8, 0xdb, 0x2f, 0x2a, 0x75, 0xc7, 0x7e, 0xfe, 0x72, 0x6b,
	0xe9, 0xe9, 0x9f, 0x5b, 0x86, 0x47, 0xf2, 0x8d, 0xb0, 0x44, 0x6f, 0x13, 0x9b, 0x25, 0x41, 0x1e,
	0xc3, 0x7c, 0x8d, 0x18, 0x2d, 0x96, 0x04, 0x80, 0xbb, 0xdf, 0x9b, 0xc4, 0x2e, 0x64, 0x47, 0xdf,
	0x25, 0x6b, 0xf2, 0x21, 0x4f, 0x53, 0xa8, 0x83, 0xb1, 0x90, 0x4a, 0x4b, 0x62, 0xb5, 0x00, 0x77,
	0x45, 0x9e, 0xc2, 0x48, 0x8c, 0xf3, 0x1a, 0xc9, 0x95, 0x50, 0xda, 0xb0, 0x06, 0x89, 0x78, 0xc4,
	0x93, 0x10, 0xc9, 0xb7, 0xbd, 0xd2, 0x06, 0x8e, 0xca, 0xe0, 0x19, 0x0b, 0x61, 0x7b, 0x03, 0x19,
	0x58, 0x2f, 0x60, 0x0f, 0x51, 0x28, 0x76, 0x48, 0x52, 0x12, 0x62, 0x27, 0xb0, 0x3c, 0x6d, 0x51,
	0x4a, 0x1a, 0x89, 0x50, 0x4c, 0xb7, 0x00, 0xfc, 0x86, 0x03, 0x03, 0x2e, 0x73, 0xb5, 0xb5, 0xd0,
	0xbb, 0xb4, 0x81, 0x8c, 0xd1, 0xe4, 0x88, 0x65, 0x48, 0x63, 0xdb, 0xcb, 0x0d, 0x6c, 0x25, 0x2c,
	0x8a, 0x74, 0x41, 0x42, 0x2b, 0x41, 0xcb, 0xfd, 0xc3, 0x20, 0x64, 0x5a, 0x3b, 0xf4, 0x6d, 0xd2,
	0x1e, 0x8b, 0x24, 0xe0, 0xf8, 0xcc, 0x3c, 0x0d, 0x53, 0x00, 0x82, 0xa4, 0x0f, 0x85, 0x12, 0xd2,
	0x31, 0xf1, 0x09, 0xda, 0xa2, 0x17, 0x89, 0xcd, 0xe5, 0x50, 0x89, 0x47, 0x2c, 0xd1, 0xef, 0x6f,
	0x71, 0xb9, 0x0f, 0x66, 0x4d, 0xa2, 0x22, 0x89, 0x8e, 0x50, 0xf3, 0x76, 0x55, 0xa2, 0x5f, 0x26,
	0xd1, 0x11, 0x3c, 0x53, 0x81, 0x84, 0x72, 0xa1, 0xe3, 0x37, 0xbd, 0x44, 0xda, 0x18, 0x74, 0x38,
	0xc9, 0xb8, 0x7e, 0xbf, 0x8d, 0xc0, 0x83, 0x8c, 0x53, 0x97, 0xac, 0x16, 0xed, 0xc2, 0x1f, 0x45,
	0x0c, 0xf3, 0x60, 0x7b, 0x33, 0x98, 0xfb, 0x8b, 0x45, 0xd6, 0x06, 0x32, 0xdc, 0x85, 0xbe, 0xcc,
	0xce, 0x68, 0xda, 0x65, 0x93, 0x36, 0x4f, 0x69, 0xd2, 0xd6, 0xc9, 0x26, 0x7d, 0x42, 0x3d, 0x8d,
	0x33, 0xd4, 0xb3, 0x5c, 0x53, 0xcf, 0xbc, 0x16, 0xd2, 0x9c, 0xdf, 0x42, 0x8a, 0x24, 0xb5, 0x2a,
	0x49, 0x9a, 0xa1, 0xcc, 0xae, 0x53, 0x36, 0x47, 0x7e, 0xed, 0xb9, 0xf2, 0x3b, 0xd9, 0x06, 0xc8,
	0xbc, 0x36, 0x00, 0x54, 0x27, 0x5c, 0x0d, 0x63, 0x19, 0x3a, 0x2b, 0x5d, 0x63, 0x7b, 0xd5, 0x6b,
	0x81, 0x3d, 0x90, 0x21, 0x2c, 0xf9, 0x13, 0x25, 0x70, 0x69, 0x35, 0x5f, 0x02, 0x1b, 0x96, 0xa6,
	0xc2, 0x59, 0x9b, 0x11, 0xce, 0x0c, 0xc1, 0xeb, 0xb3, 0x04, 0xbb, 0x3f, 0x19, 0x48, 0xde, 0x83,
	0x34, 0x28, 0xc8, 0x9b, 0x8a, 0xd8, 0xa8, 0x8a, 0x58, 0xcf, 0x5b, 0xb3, 0x9c, 0xb7, 0x27, 0x28,
	0xb1, 0xce, 0xa0, 0xa4, 0x51, 0xa3, 0x64, 0x4e, 0xd6, 0x96, 0xe7, 0x65, 0xcd, 0xfd, 0x10, 0xaf,
	0x78, 0x97, 0x45, 0xec, 0xf5, 0xae, 0xe8, 0x1e, 0x90, 0x37, 0x07, 0x32, 0xf4, 0xd8, 0x63, 0xe6,
	0x47, 0x95, 0x01, 0xb5, 0x58, 0x9e, 0x17, 0x48, 0x13, 0x06, 0x5e, 0x19, 0x44, 0x5b, 0xf4, 0x1d,
	0x42, 0x32, 0x8c, 0x82, 0x79, 0xb7, 0x30, 0xef, 0xed, 0x1c, 0x19, 0xc8, 0xd0, 0x4d, 0xf1, 0x1c,
	0xb8, 0xda, 0x7e, 0xa5, 0x30, 0x16, 0x5e, 0xf3, 0x3a, 0x39, 0x57, 0x2d, 0x20, 0x8c, 0x69, 0x62,
	0xcc, 0x8d, 0x2a, 0xae, 0x39, 0xd5, 0x17, 0xb2, 0xaa, 0x17, 0x72, 0xbf, 0x25, 0x1b, 0xfa, 0xc4,
	0xaf, 0x74, 0xae, 0x16, 0x9e, 0x56, 0xed, 0x9b, 0x66, 0xad, 0x6f, 0x2e, 0x0a, 0xff, 0x7b, 0xae,
	0x0a, 0x88, 0xef, 0x31, 0x88, 0xb3, 0x30, 0xfa, 0xa2, 0x8c, 0xfd, 0x57, 0x75, 0x94, 0x1d, 0xb6,
	0x51, 0xeb, 0xb0, 0xa7, 0x15, 0xf3, 0x1c, 0xe5, 0x34, 0xe7, 0xd6, 0x5b, 0xd1, 0xd6, 0x5b, 0xd3,
	0xb6, 0xee, 0xfe, 0x6a, 0x92, 0xe6, 0x9e, 0x9f, 0xf9, 0xb1, 0xa4, 0x11, 0xd9, 0x18, 0xf8, 0x87,
	0x77, 0xc6, 0x8a, 0x3f, 0x66, 0x7b, 0x2c, 0xe3, 0x22, 0xd0, 0xc3, 0xf2, 0xe2, 0x89, 0x41, 0x57,
	0x0c, 0xd7, 0x9d, 0x6b, 0x30, 0xe7, 0xfe, 0x7e, 0xb9, 0x75, 0x29, 0xf6, 0x0f, 0x87, 0x3e, 0x6e,
	0x1d, 0xa6, 0xb8, 0xf7, 0x7d, 0x11, 0xc3, 0xe3, 0x53, 0x75, 0xf4, 0x0c, 0xc6, 0x60, 0x3d, 0x34,
	0xbd, 0x45, 0x9c, 0x81, 0x7f, 0x58, 0xfe, 0xaa, 0xd9, 0xcd, 0x35, 0xe7, 0x41, 0x58, 0x4c, 0x9e,
	0xe5, 0x2d, 0x5c, 0xa7, 0x9f, 0x90, 0x8b, 0x95, 0x9f, 0x97, 0xf0, 0xf7, 0xbe, 0xc8, 0xbe, 0x60,
	0x4f, 0x80, 0x21, 0x9d, 0xda, 0xc5, 0x0e, 0xf4, 0x32, 0x59, 0x9b, 0x76, 0xe7, 0xfb, 0x8c, 0xe9,
	0x64, 0xcf, 0x82, 0xf4, 0x2a, 0x59, 0x1f, 0xf8, 0x87, 0x3b, 0x30, 0xc9, 0x3c, 0xf6, 0xc4, 0xcf,
	0x02, 0x3d, 0x23, 0x6b, 0xe8, 0xad, 0xc6, 0xb3, 0x1f, 0xb7, 0x96, 0xdc, 0x8f, 0x50, 0x81, 0x38,
	0x7f, 0xf8, 0x77, 0x95, 0xb2, 0x4c, 0x82, 0xaa, 0x46, 0xc0, 0xaa, 0xff, 0x52, 0x77, 0x3f, 0x26,
	0x6f, 0x40, 0xcb, 0x49, 0xfe, 0xcf, 0xe6, 0x9d, 0xdb, 0xcf, 0x5f, 0x75, 0x8c, 0x17, 0xaf, 0x3a,
	0xc6, 0x5f, 0xaf, 0x3a, 0xc6, 0xd3, 0xe3, 0xce, 0xd2, 0x8b, 0xe3, 0xce, 0xd2, 0x6f, 0xc7, 0x9d,
	0xa5, 0x6f, 0xae, 0x84, 0x5c, 0x3d, 0x9c, 0x8c, 0x7a, 0x63, 0x11, 0xf7, 0x8b, 0x1f, 0xb1, 0xf8,
	0xd1, 0x3f, 0xc4, 0xff, 0x66, 0xfa, 0xea, 0x28, 0x65, 0x72, 0xd4, 0x44, 0x4e, 0x3f, 0xf8, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0x93, 0xfe, 0x80, 0xef, 0x0c, 0x00, 0x00,
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ListingDuration != nil {
		{
			size, err := m.ListingDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Estimation != nil {
		{
			size, err := m.Estimation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Estimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Estimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Estimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flags != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DepositAmount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Comments[iNdEx])
			copy(dAtA[i:], m.Comments[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Comments[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.EstimationList) > 0 {
		dAtA6 := make([]byte, len(m.EstimationList)*10)
		var j5 int
		for _, num1 := range m.EstimationList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintItem(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EstimatorList) > 0 {
		for iNdEx := len(m.EstimatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EstimatorList[iNdEx])
			copy(dAtA[i:], m.EstimatorList[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.EstimatorList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EstimationTotal != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.EstimationCount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BestEstimator) > 0 {
		i -= len(m.BestEstimator)
		copy(dAtA[i:], m.BestEstimator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.BestEstimator)))
		i--
		dAtA[i] = 0x12
	}
	if m.EstimationPrice != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationPrice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListingDuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListingDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListingDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintItem(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmitTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintItem(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x42
	}
	if m.Discount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rating != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintItem(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EstimationOnly {
		i--
		if m.EstimationOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsToken {
		i--
		if m.IsToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Photos) > 0 {
		for iNdEx := len(m.Photos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Photos[iNdEx])
			copy(dAtA[i:], m.Photos[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Photos[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintItem(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Photos) > 0 {
		for iNdEx := len(m.Photos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Photos[iNdEx])
			copy(dAtA[i:], m.Photos[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Photos[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.AutoMsg) > 0 {
		i -= len(m.AutoMsg)
		copy(dAtA[i:], m.AutoMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.AutoMsg)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DepositAmount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.EstimationCount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevealEstimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevealEstimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevealEstimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RevealMsg) > 0 {
		i -= len(m.RevealMsg)
		copy(dAtA[i:], m.RevealMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.RevealMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemTransferable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemTransferable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemTransferable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransferableMsg) > 0 {
		i -= len(m.TransferableMsg)
		copy(dAtA[i:], m.TransferableMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.TransferableMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemShipping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemShipping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemShipping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x18
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemResell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemResell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemResell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Discount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x20
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x18
	}
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBuyerReward != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.MaxBuyerReward))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateItemFee != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.CreateItemFee))
		i--
		dAtA[i] = 0x20
	}
	if m.EstimationRatioForNewItem != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationRatioForNewItem))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxEstimatorCreatorRatio != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.MaxEstimatorCreatorRatio))
		i--
		dAtA[i] = 0x10
	}
	n9, err9 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxActivePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxActivePeriod):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintItem(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTokenizeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenizeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenizeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnTokenizeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnTokenizeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnTokenizeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Estimation != nil {
		l = m.Estimation.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.ListingDuration != nil {
		l = m.ListingDuration.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *Estimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EstimationPrice != 0 {
		n += 1 + sovItem(uint64(m.EstimationPrice))
	}
	l = len(m.BestEstimator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.EstimationCount != 0 {
		n += 1 + sovItem(uint64(m.EstimationCount))
	}
	if m.EstimationTotal != 0 {
		n += 1 + sovItem(uint64(m.EstimationTotal))
	}
	if len(m.EstimatorList) > 0 {
		for _, s := range m.EstimatorList {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if len(m.EstimationList) > 0 {
		l = 0
		for _, e := range m.EstimationList {
			l += sovItem(uint64(e))
		}
		n += 1 + sovItem(uint64(l)) + l
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.DepositAmount != 0 {
		n += 1 + sovItem(uint64(m.DepositAmount))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovItem(uint64(m.Flags))
	}
	return n
}

func (m *ListingDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime)
	n += 1 + l + sovItem(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovItem(uint64(l))
	return n
}

func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 2
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Rating != 0 {
		n += 1 + sovItem(uint64(m.Rating))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Discount != 0 {
		n += 1 + sovItem(uint64(m.Discount))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Condition != 0 {
		n += 1 + sovItem(uint64(m.Condition))
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.IsToken {
		n += 2
	}
	if m.EstimationOnly {
		n += 2
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Transferable {
		n += 2
	}
	return n
}

func (m *MsgCreateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.EstimationCount != 0 {
		n += 1 + sovItem(uint64(m.EstimationCount))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Condition != 0 {
		n += 1 + sovItem(uint64(m.Condition))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.DepositAmount != 0 {
		n += 1 + sovItem(uint64(m.DepositAmount))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.AutoMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgUpdateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func (m *MsgRevealEstimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	l = len(m.RevealMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgItemTransferable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.TransferableMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	return n
}

func (m *MsgItemShipping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 2
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	return n
}

func (m *MsgItemResell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	if m.Discount != 0 {
		n += 1 + sovItem(uint64(m.Discount))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxActivePeriod)
	n += 1 + l + sovItem(uint64(l))
	if m.MaxEstimatorCreatorRatio != 0 {
		n += 1 + sovItem(uint64(m.MaxEstimatorCreatorRatio))
	}
	if m.EstimationRatioForNewItem != 0 {
		n += 1 + sovItem(uint64(m.EstimationRatioForNewItem))
	}
	if m.CreateItemFee != 0 {
		n += 1 + sovItem(uint64(m.CreateItemFee))
	}
	if m.MaxBuyerReward != 0 {
		n += 1 + sovItem(uint64(m.MaxBuyerReward))
	}
	return n
}

func (m *MsgTokenizeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func (m *MsgUnTokenizeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Estimation == nil {
				m.Estimation = &Estimation{}
			}
			if err := m.Estimation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListingDuration == nil {
				m.ListingDuration = &ListingDuration{}
			}
			if err := m.ListingDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transfer == nil {
				m.Transfer = &Transfer{}
			}
			if err := m.Transfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &Properties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Estimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Estimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Estimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationPrice", wireType)
			}
			m.EstimationPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestEstimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BestEstimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationCount", wireType)
			}
			m.EstimationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationTotal", wireType)
			}
			m.EstimationTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatorList = append(m.EstimatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EstimationList = append(m.EstimationList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthItem
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthItem
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EstimationList) == 0 {
					m.EstimationList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EstimationList = append(m.EstimationList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationList", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListingDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListingDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListingDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsToken = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimationOnly = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationCount", wireType)
			}
			m.EstimationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoMsg = append(m.AutoMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.AutoMsg == nil {
				m.AutoMsg = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevealEstimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevealEstimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevealEstimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevealMsg = append(m.RevealMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.RevealMsg == nil {
				m.RevealMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemTransferable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemTransferable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemTransferable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferableMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferableMsg = append(m.TransferableMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.TransferableMsg == nil {
				m.TransferableMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemShipping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemShipping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemShipping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemResell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemResell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemResell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActivePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxActivePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEstimatorCreatorRatio", wireType)
			}
			m.MaxEstimatorCreatorRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEstimatorCreatorRatio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationRatioForNewItem", wireType)
			}
			m.EstimationRatioForNewItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationRatioForNewItem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateItemFee", wireType)
			}
			m.CreateItemFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateItemFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBuyerReward", wireType)
			}
			m.MaxBuyerReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBuyerReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenizeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenizeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenizeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnTokenizeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnTokenizeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnTokenizeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
