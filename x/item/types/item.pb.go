// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item/item.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Seller          string    `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Id              uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Title           string    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description     string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ShippingCost    int64     `protobuf:"varint,5,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	LocalPickup     string    `protobuf:"bytes,6,opt,name=local_pickup,json=localPickup,proto3" json:"local_pickup,omitempty"`
	EstimationCount int64     `protobuf:"varint,7,opt,name=estimation_count,json=estimationCount,proto3" json:"estimation_count,omitempty"`
	BestEstimator   string    `protobuf:"bytes,8,opt,name=best_estimator,json=bestEstimator,proto3" json:"best_estimator,omitempty"`
	EstimationPrice int64     `protobuf:"varint,9,opt,name=estimation_price,json=estimationPrice,proto3" json:"estimation_price,omitempty"`
	EstimatorList   []string  `protobuf:"bytes,10,rep,name=estimator_list,json=estimatorList,proto3" json:"estimator_list,omitempty"`
	EstimationList  []int64   `protobuf:"varint,11,rep,packed,name=estimation_list,json=estimationList,proto3" json:"estimation_list,omitempty"`
	Transferable    bool      `protobuf:"varint,12,opt,name=transferable,proto3" json:"transferable,omitempty"`
	Buyer           string    `protobuf:"bytes,13,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Tracking        bool      `protobuf:"varint,14,opt,name=tracking,proto3" json:"tracking,omitempty"`
	Status          string    `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	Comments        []string  `protobuf:"bytes,16,rep,name=comments,proto3" json:"comments,omitempty"`
	Tags            []string  `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`
	Flags           int64     `protobuf:"varint,18,opt,name=flags,proto3" json:"flags,omitempty"`
	Condition       int64     `protobuf:"varint,19,opt,name=condition,proto3" json:"condition,omitempty"`
	ShippingRegion  []string  `protobuf:"bytes,20,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	Rating          int64     `protobuf:"varint,21,opt,name=rating,proto3" json:"rating,omitempty"`
	DepositAmount   int64     `protobuf:"varint,22,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	Creator         string    `protobuf:"bytes,23,opt,name=creator,proto3" json:"creator,omitempty"`
	Note            string    `protobuf:"bytes,24,opt,name=note,proto3" json:"note,omitempty"`
	Discount        int64     `protobuf:"varint,25,opt,name=discount,proto3" json:"discount,omitempty"`
	SubmitTime      time.Time `protobuf:"bytes,26,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time"`
	EndTime         time.Time `protobuf:"bytes,27,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	Contract        string    `protobuf:"bytes,28,opt,name=contract,proto3" json:"contract,omitempty"`
	EstimationTotal int64     `protobuf:"varint,29,opt,name=estimation_total,json=estimationTotal,proto3" json:"estimation_total,omitempty"`
	Photos          []string  `protobuf:"bytes,30,rep,name=photos,proto3" json:"photos,omitempty"`
	IsToken         bool      `protobuf:"varint,31,opt,name=is_token,json=isToken,proto3" json:"is_token,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Item) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Item) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *Item) GetLocalPickup() string {
	if m != nil {
		return m.LocalPickup
	}
	return ""
}

func (m *Item) GetEstimationCount() int64 {
	if m != nil {
		return m.EstimationCount
	}
	return 0
}

func (m *Item) GetBestEstimator() string {
	if m != nil {
		return m.BestEstimator
	}
	return ""
}

func (m *Item) GetEstimationPrice() int64 {
	if m != nil {
		return m.EstimationPrice
	}
	return 0
}

func (m *Item) GetEstimatorList() []string {
	if m != nil {
		return m.EstimatorList
	}
	return nil
}

func (m *Item) GetEstimationList() []int64 {
	if m != nil {
		return m.EstimationList
	}
	return nil
}

func (m *Item) GetTransferable() bool {
	if m != nil {
		return m.Transferable
	}
	return false
}

func (m *Item) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Item) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *Item) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Item) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Item) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Item) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Item) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *Item) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *Item) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Item) GetDepositAmount() int64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *Item) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Item) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Item) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *Item) GetSubmitTime() time.Time {
	if m != nil {
		return m.SubmitTime
	}
	return time.Time{}
}

func (m *Item) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Item) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Item) GetEstimationTotal() int64 {
	if m != nil {
		return m.EstimationTotal
	}
	return 0
}

func (m *Item) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *Item) GetIsToken() bool {
	if m != nil {
		return m.IsToken
	}
	return false
}

type MsgCreateItem struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title           string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ShippingCost    int64    `protobuf:"varint,4,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	LocalPickup     string   `protobuf:"bytes,5,opt,name=local_pickup,json=localPickup,proto3" json:"local_pickup,omitempty"`
	EstimationCount int64    `protobuf:"varint,6,opt,name=estimation_count,json=estimationCount,proto3" json:"estimation_count,omitempty"`
	Tags            []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Condition       int64    `protobuf:"varint,8,opt,name=condition,proto3" json:"condition,omitempty"`
	ShippingRegion  []string `protobuf:"bytes,9,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	DepositAmount   int64    `protobuf:"varint,10,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	InitMsg         []byte   `protobuf:"bytes,11,opt,name=init_msg,json=initMsg,proto3" json:"init_msg,omitempty"`
	AutoMsg         []byte   `protobuf:"bytes,12,opt,name=auto_msg,json=autoMsg,proto3" json:"auto_msg,omitempty"`
	Photos          []string `protobuf:"bytes,13,rep,name=photos,proto3" json:"photos,omitempty"`
}

func (m *MsgCreateItem) Reset()         { *m = MsgCreateItem{} }
func (m *MsgCreateItem) String() string { return proto.CompactTextString(m) }
func (*MsgCreateItem) ProtoMessage()    {}
func (*MsgCreateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{1}
}
func (m *MsgCreateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateItem.Merge(m, src)
}
func (m *MsgCreateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateItem proto.InternalMessageInfo

func (m *MsgCreateItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateItem) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgCreateItem) GetLocalPickup() string {
	if m != nil {
		return m.LocalPickup
	}
	return ""
}

func (m *MsgCreateItem) GetEstimationCount() int64 {
	if m != nil {
		return m.EstimationCount
	}
	return 0
}

func (m *MsgCreateItem) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MsgCreateItem) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *MsgCreateItem) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *MsgCreateItem) GetDepositAmount() int64 {
	if m != nil {
		return m.DepositAmount
	}
	return 0
}

func (m *MsgCreateItem) GetInitMsg() []byte {
	if m != nil {
		return m.InitMsg
	}
	return nil
}

func (m *MsgCreateItem) GetAutoMsg() []byte {
	if m != nil {
		return m.AutoMsg
	}
	return nil
}

func (m *MsgCreateItem) GetPhotos() []string {
	if m != nil {
		return m.Photos
	}
	return nil
}

type MsgUpdateItem struct {
	Seller         string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Id             uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ShippingCost   int64    `protobuf:"varint,3,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	LocalPickup    string   `protobuf:"bytes,4,opt,name=local_pickup,json=localPickup,proto3" json:"local_pickup,omitempty"`
	ShippingRegion []string `protobuf:"bytes,5,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
}

func (m *MsgUpdateItem) Reset()         { *m = MsgUpdateItem{} }
func (m *MsgUpdateItem) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateItem) ProtoMessage()    {}
func (*MsgUpdateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{2}
}
func (m *MsgUpdateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateItem.Merge(m, src)
}
func (m *MsgUpdateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateItem proto.InternalMessageInfo

func (m *MsgUpdateItem) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgUpdateItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateItem) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgUpdateItem) GetLocalPickup() string {
	if m != nil {
		return m.LocalPickup
	}
	return ""
}

func (m *MsgUpdateItem) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

type MsgDeleteItem struct {
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteItem) Reset()         { *m = MsgDeleteItem{} }
func (m *MsgDeleteItem) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteItem) ProtoMessage()    {}
func (*MsgDeleteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{3}
}
func (m *MsgDeleteItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteItem.Merge(m, src)
}
func (m *MsgDeleteItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteItem proto.InternalMessageInfo

func (m *MsgDeleteItem) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgDeleteItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgRevealEstimation struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Itemid    uint64 `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	RevealMsg []byte `protobuf:"bytes,3,opt,name=reveal_msg,json=revealMsg,proto3" json:"reveal_msg,omitempty"`
}

func (m *MsgRevealEstimation) Reset()         { *m = MsgRevealEstimation{} }
func (m *MsgRevealEstimation) String() string { return proto.CompactTextString(m) }
func (*MsgRevealEstimation) ProtoMessage()    {}
func (*MsgRevealEstimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{4}
}
func (m *MsgRevealEstimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevealEstimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevealEstimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevealEstimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevealEstimation.Merge(m, src)
}
func (m *MsgRevealEstimation) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevealEstimation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevealEstimation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevealEstimation proto.InternalMessageInfo

func (m *MsgRevealEstimation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevealEstimation) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgRevealEstimation) GetRevealMsg() []byte {
	if m != nil {
		return m.RevealMsg
	}
	return nil
}

type MsgItemTransferable struct {
	Seller          string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	TransferableMsg []byte `protobuf:"bytes,2,opt,name=transferable_msg,json=transferableMsg,proto3" json:"transferable_msg,omitempty"`
	Itemid          uint64 `protobuf:"varint,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemTransferable) Reset()         { *m = MsgItemTransferable{} }
func (m *MsgItemTransferable) String() string { return proto.CompactTextString(m) }
func (*MsgItemTransferable) ProtoMessage()    {}
func (*MsgItemTransferable) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{5}
}
func (m *MsgItemTransferable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemTransferable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemTransferable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemTransferable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemTransferable.Merge(m, src)
}
func (m *MsgItemTransferable) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemTransferable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemTransferable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemTransferable proto.InternalMessageInfo

func (m *MsgItemTransferable) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemTransferable) GetTransferableMsg() []byte {
	if m != nil {
		return m.TransferableMsg
	}
	return nil
}

func (m *MsgItemTransferable) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type MsgItemShipping struct {
	Seller   string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Tracking bool   `protobuf:"varint,2,opt,name=tracking,proto3" json:"tracking,omitempty"`
	Itemid   uint64 `protobuf:"varint,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemShipping) Reset()         { *m = MsgItemShipping{} }
func (m *MsgItemShipping) String() string { return proto.CompactTextString(m) }
func (*MsgItemShipping) ProtoMessage()    {}
func (*MsgItemShipping) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{6}
}
func (m *MsgItemShipping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemShipping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemShipping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemShipping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemShipping.Merge(m, src)
}
func (m *MsgItemShipping) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemShipping) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemShipping.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemShipping proto.InternalMessageInfo

func (m *MsgItemShipping) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemShipping) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *MsgItemShipping) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type MsgItemResell struct {
	Seller         string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Itemid         uint64   `protobuf:"varint,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	ShippingCost   int64    `protobuf:"varint,3,opt,name=shipping_cost,json=shippingCost,proto3" json:"shipping_cost,omitempty"`
	Discount       int64    `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`
	LocalPickup    string   `protobuf:"bytes,5,opt,name=local_pickup,json=localPickup,proto3" json:"local_pickup,omitempty"`
	ShippingRegion []string `protobuf:"bytes,6,rep,name=shipping_region,json=shippingRegion,proto3" json:"shipping_region,omitempty"`
	Note           string   `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *MsgItemResell) Reset()         { *m = MsgItemResell{} }
func (m *MsgItemResell) String() string { return proto.CompactTextString(m) }
func (*MsgItemResell) ProtoMessage()    {}
func (*MsgItemResell) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{7}
}
func (m *MsgItemResell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemResell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemResell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemResell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemResell.Merge(m, src)
}
func (m *MsgItemResell) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemResell) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemResell.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemResell proto.InternalMessageInfo

func (m *MsgItemResell) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgItemResell) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *MsgItemResell) GetShippingCost() int64 {
	if m != nil {
		return m.ShippingCost
	}
	return 0
}

func (m *MsgItemResell) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *MsgItemResell) GetLocalPickup() string {
	if m != nil {
		return m.LocalPickup
	}
	return ""
}

func (m *MsgItemResell) GetShippingRegion() []string {
	if m != nil {
		return m.ShippingRegion
	}
	return nil
}

func (m *MsgItemResell) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

// ActiveParams defines the params for activeness of items on governance proposals.
type Params struct {
	//  Maximum period for trst holders to buy an item. Initial value: 2
	//  months.
	MaxActivePeriod          time.Duration `protobuf:"bytes,1,opt,name=MaxActivePeriod,proto3,stdduration" json:"max_active_period,omitempty"`
	MaxEstimatorCreatorRatio uint64        `protobuf:"varint,2,opt,name=MaxEstimatorCreatorRatio,proto3" json:"MaxEstimatorCreatorRatio,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{8}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxActivePeriod() time.Duration {
	if m != nil {
		return m.MaxActivePeriod
	}
	return 0
}

func (m *Params) GetMaxEstimatorCreatorRatio() uint64 {
	if m != nil {
		return m.MaxEstimatorCreatorRatio
	}
	return 0
}

type MsgTokenizeItem struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Id     uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTokenizeItem) Reset()         { *m = MsgTokenizeItem{} }
func (m *MsgTokenizeItem) String() string { return proto.CompactTextString(m) }
func (*MsgTokenizeItem) ProtoMessage()    {}
func (*MsgTokenizeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{9}
}
func (m *MsgTokenizeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenizeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenizeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenizeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenizeItem.Merge(m, src)
}
func (m *MsgTokenizeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenizeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenizeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenizeItem proto.InternalMessageInfo

func (m *MsgTokenizeItem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTokenizeItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUnTokenizeItem struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Id     uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgUnTokenizeItem) Reset()         { *m = MsgUnTokenizeItem{} }
func (m *MsgUnTokenizeItem) String() string { return proto.CompactTextString(m) }
func (*MsgUnTokenizeItem) ProtoMessage()    {}
func (*MsgUnTokenizeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_317dd7afc15c77d3, []int{10}
}
func (m *MsgUnTokenizeItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnTokenizeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnTokenizeItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnTokenizeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnTokenizeItem.Merge(m, src)
}
func (m *MsgUnTokenizeItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnTokenizeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnTokenizeItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnTokenizeItem proto.InternalMessageInfo

func (m *MsgUnTokenizeItem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUnTokenizeItem) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Item)(nil), "trstlabs.trst.trst.Item")
	proto.RegisterType((*MsgCreateItem)(nil), "trstlabs.trst.trst.MsgCreateItem")
	proto.RegisterType((*MsgUpdateItem)(nil), "trstlabs.trst.trst.MsgUpdateItem")
	proto.RegisterType((*MsgDeleteItem)(nil), "trstlabs.trst.trst.MsgDeleteItem")
	proto.RegisterType((*MsgRevealEstimation)(nil), "trstlabs.trst.trst.MsgRevealEstimation")
	proto.RegisterType((*MsgItemTransferable)(nil), "trstlabs.trst.trst.MsgItemTransferable")
	proto.RegisterType((*MsgItemShipping)(nil), "trstlabs.trst.trst.MsgItemShipping")
	proto.RegisterType((*MsgItemResell)(nil), "trstlabs.trst.trst.MsgItemResell")
	proto.RegisterType((*Params)(nil), "trstlabs.trst.trst.Params")
	proto.RegisterType((*MsgTokenizeItem)(nil), "trstlabs.trst.trst.MsgTokenizeItem")
	proto.RegisterType((*MsgUnTokenizeItem)(nil), "trstlabs.trst.trst.MsgUnTokenizeItem")
}

func init() { proto.RegisterFile("item/item.proto", fileDescriptor_317dd7afc15c77d3) }

var fileDescriptor_317dd7afc15c77d3 = []byte{
	// 1061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x45, 0x59, 0x92, 0x57, 0x92, 0x95, 0x6c, 0x5c, 0x77, 0xed, 0x24, 0x92, 0xca, 0x22,
	0x88, 0x02, 0x14, 0x12, 0x90, 0x1e, 0x8a, 0xa6, 0x87, 0x20, 0x76, 0x7c, 0x28, 0x50, 0x01, 0x06,
	0xeb, 0x5e, 0x0a, 0x14, 0x04, 0x45, 0xae, 0xe9, 0x85, 0x49, 0x2e, 0xc1, 0x5d, 0x05, 0x76, 0x6f,
	0x7d, 0x83, 0x1c, 0x73, 0xec, 0xa1, 0x87, 0x3e, 0x42, 0x1f, 0x21, 0xc7, 0x1c, 0x7b, 0x4a, 0x03,
	0xfb, 0xd6, 0xa7, 0x28, 0x66, 0xf8, 0x63, 0x5a, 0x96, 0x03, 0xa5, 0x17, 0x61, 0xe7, 0x9b, 0xdd,
	0x6f, 0x67, 0xbf, 0xf9, 0x11, 0x49, 0x4f, 0x68, 0x1e, 0x4d, 0xe0, 0x67, 0x9c, 0xa4, 0x52, 0x4b,
	0x4a, 0x75, 0xaa, 0x74, 0xe8, 0xce, 0xd4, 0x18, 0x16, 0xf8, 0xb3, 0x3b, 0x08, 0xa4, 0x0c, 0x42,
	0x3e, 0xc1, 0x1d, 0xb3, 0xf9, 0xf1, 0x44, 0x8b, 0x88, 0x2b, 0xed, 0x46, 0x49, 0x76, 0x68, 0xb7,
	0xbf, 0xb8, 0xc1, 0x9f, 0xa7, 0xae, 0x16, 0x32, 0xce, 0xfd, 0x5b, 0x81, 0x0c, 0x24, 0x2e, 0x27,
	0xb0, 0xca, 0x50, 0xeb, 0xb7, 0x16, 0xa9, 0x7f, 0xaf, 0x79, 0x44, 0xb7, 0x49, 0x43, 0xf1, 0x30,
	0xe4, 0x29, 0x33, 0x86, 0xc6, 0x68, 0xc3, 0xce, 0x2d, 0xba, 0x49, 0x6a, 0xc2, 0x67, 0xb5, 0xa1,
	0x31, 0xaa, 0xdb, 0x35, 0xe1, 0xd3, 0x2d, 0xb2, 0xae, 0x85, 0x0e, 0x39, 0x33, 0x71, 0x5b, 0x66,
	0xd0, 0x21, 0x69, 0xfb, 0x5c, 0x79, 0xa9, 0x48, 0xe0, 0x46, 0x56, 0x47, 0x5f, 0x15, 0xa2, 0x5f,
	0x92, 0xae, 0x3a, 0x11, 0x49, 0x22, 0xe2, 0xc0, 0xf1, 0xa4, 0xd2, 0x6c, 0x7d, 0x68, 0x8c, 0x4c,
	0xbb, 0x53, 0x80, 0xfb, 0x52, 0x69, 0xfa, 0x05, 0xe9, 0x84, 0xd2, 0x73, 0x43, 0x27, 0x11, 0xde,
	0xe9, 0x3c, 0x61, 0x8d, 0x8c, 0x07, 0xb1, 0x43, 0x84, 0xe8, 0x13, 0x72, 0x87, 0x2b, 0x2d, 0x22,
	0x7c, 0x9a, 0xe3, 0xc9, 0x79, 0xac, 0x59, 0x13, 0xa9, 0x7a, 0x57, 0xf8, 0x3e, 0xc0, 0xf4, 0x11,
	0xd9, 0x9c, 0x71, 0xa5, 0x9d, 0x1c, 0x97, 0x29, 0x6b, 0x21, 0x5f, 0x17, 0xd0, 0x83, 0x02, 0x5c,
	0x60, 0x4c, 0x52, 0xe1, 0x71, 0xb6, 0xb1, 0xc8, 0x78, 0x08, 0x30, 0x30, 0x96, 0x64, 0x4e, 0x28,
	0x94, 0x66, 0x64, 0x68, 0x02, 0x63, 0x89, 0xfe, 0x20, 0x94, 0xa6, 0x8f, 0x49, 0xe5, 0x64, 0xb6,
	0xaf, 0x3d, 0x34, 0x47, 0xa6, 0xbd, 0x79, 0x05, 0xe3, 0x46, 0x8b, 0x74, 0x74, 0xea, 0xc6, 0xea,
	0x98, 0xa7, 0xee, 0x2c, 0xe4, 0xac, 0x33, 0x34, 0x46, 0x2d, 0xfb, 0x1a, 0x06, 0x82, 0xcf, 0xe6,
	0xe7, 0x3c, 0x65, 0xdd, 0x4c, 0x70, 0x34, 0xe8, 0x2e, 0x69, 0xe9, 0xd4, 0xf5, 0x4e, 0x45, 0x1c,
	0xb0, 0x4d, 0x3c, 0x55, 0xda, 0x98, 0x4a, 0xed, 0xea, 0xb9, 0x62, 0xbd, 0x3c, 0x95, 0x68, 0xc1,
	0x19, 0x4f, 0x46, 0x11, 0x8f, 0xb5, 0x62, 0x77, 0x30, 0xee, 0xd2, 0xa6, 0x94, 0xd4, 0xb5, 0x1b,
	0x28, 0x76, 0x17, 0x71, 0x5c, 0xc3, 0xcd, 0xc7, 0x21, 0x80, 0x14, 0xd5, 0xc8, 0x0c, 0xfa, 0x80,
	0x6c, 0x78, 0x32, 0xf6, 0x05, 0x26, 0xfa, 0x1e, 0x7a, 0xae, 0x00, 0x78, 0x7a, 0x99, 0xe6, 0x94,
	0x07, 0xb0, 0x67, 0x0b, 0x29, 0x37, 0x0b, 0xd8, 0x46, 0x14, 0x82, 0x84, 0xf2, 0x8c, 0x03, 0xf6,
	0x19, 0x72, 0xe4, 0x16, 0x48, 0xec, 0xf3, 0x44, 0x2a, 0xa1, 0x1d, 0x37, 0xc2, 0xec, 0x6e, 0xa3,
	0xbf, 0x9b, 0xa3, 0x2f, 0x10, 0xa4, 0x8c, 0x34, 0xbd, 0x94, 0x63, 0x52, 0x3f, 0xc7, 0x47, 0x16,
	0x26, 0xbc, 0x24, 0x96, 0x9a, 0x33, 0x86, 0x30, 0xae, 0xe1, 0xe5, 0xbe, 0x50, 0x59, 0xb1, 0xec,
	0x20, 0x5d, 0x69, 0xd3, 0x03, 0xd2, 0x56, 0xf3, 0x59, 0x24, 0xb4, 0x03, 0x1d, 0xc5, 0x76, 0x87,
	0xc6, 0xa8, 0xfd, 0x74, 0x77, 0x9c, 0x75, 0xd3, 0xb8, 0xe8, 0xa6, 0xf1, 0x51, 0xd1, 0x6e, 0x7b,
	0xad, 0xb7, 0xef, 0x07, 0x6b, 0xaf, 0xff, 0x19, 0x18, 0x36, 0xc9, 0x0e, 0x82, 0x8b, 0x3e, 0x27,
	0x2d, 0x1e, 0xfb, 0x19, 0xc7, 0xfd, 0x4f, 0xe0, 0x68, 0xf2, 0xd8, 0x47, 0x02, 0xcc, 0x4e, 0x0c,
	0x49, 0xd4, 0xec, 0x01, 0xc6, 0x5e, 0xda, 0x0b, 0x25, 0xaa, 0xa5, 0x76, 0x43, 0xf6, 0x70, 0xb1,
	0x44, 0x8f, 0x00, 0x06, 0x5d, 0x93, 0x13, 0xa9, 0xa5, 0x62, 0x7d, 0xd4, 0x3d, 0xb7, 0xe8, 0x0e,
	0x69, 0x09, 0xe5, 0x68, 0x79, 0xca, 0x63, 0x36, 0xc0, 0x82, 0x69, 0x0a, 0x75, 0x04, 0xa6, 0xf5,
	0x87, 0x49, 0xba, 0x53, 0x15, 0xec, 0x83, 0x80, 0x1c, 0x87, 0x41, 0x45, 0x5d, 0xe3, 0xba, 0xba,
	0x65, 0xfb, 0xd7, 0x3e, 0xd2, 0xfe, 0xe6, 0x0a, 0xed, 0x5f, 0x5f, 0xa1, 0xfd, 0xd7, 0x57, 0x6b,
	0xff, 0xc6, 0xf2, 0xf6, 0x2f, 0x4a, 0xba, 0x59, 0x29, 0xe9, 0x6b, 0xc5, 0xdb, 0x5a, 0xa1, 0x78,
	0x37, 0x96, 0x16, 0xef, 0xcd, 0x22, 0x25, 0xcb, 0x8a, 0x14, 0x34, 0x8f, 0x85, 0x76, 0x22, 0x15,
	0xb0, 0xf6, 0xd0, 0x18, 0x75, 0xec, 0x26, 0xd8, 0x53, 0x15, 0x80, 0xcb, 0x9d, 0x6b, 0x89, 0xae,
	0x4e, 0xe6, 0x02, 0x1b, 0x5c, 0x57, 0x19, 0xec, 0x56, 0x33, 0x68, 0xfd, 0x69, 0x60, 0x9a, 0x7e,
	0x4a, 0xfc, 0x22, 0x4d, 0xab, 0xce, 0xec, 0x1b, 0xe2, 0x9b, 0x2b, 0x88, 0x5f, 0xbf, 0x29, 0xfe,
	0x12, 0x7d, 0xd6, 0x97, 0xe9, 0x63, 0x7d, 0x83, 0x91, 0xbe, 0xe4, 0x21, 0xff, 0xb4, 0x48, 0xad,
	0x63, 0x72, 0x6f, 0xaa, 0x02, 0x9b, 0xbf, 0xe2, 0x6e, 0x78, 0x50, 0xe6, 0xf3, 0x23, 0xf5, 0xb8,
	0x4d, 0x1a, 0xf0, 0xc7, 0x59, 0x92, 0xe4, 0x16, 0x7d, 0x48, 0x48, 0x8a, 0x2c, 0xa8, 0xb0, 0x89,
	0x0a, 0x6f, 0x64, 0xc8, 0x54, 0x05, 0x56, 0x82, 0xf7, 0x40, 0x68, 0x47, 0xd5, 0x59, 0x7b, 0x5b,
	0x98, 0x4f, 0xc8, 0x9d, 0xea, 0x4c, 0x46, 0xce, 0x1a, 0x72, 0xf6, 0xaa, 0x78, 0x9e, 0xbd, 0x3c,
	0x20, 0xb3, 0x1a, 0x90, 0xf5, 0x0b, 0xe9, 0xe5, 0x37, 0xfe, 0x98, 0x6b, 0x75, 0xeb, 0x6d, 0xd5,
	0xd9, 0x5e, 0xbb, 0x39, 0xdb, 0x97, 0xd2, 0x7f, 0xc8, 0x8a, 0x03, 0xf8, 0x6d, 0x0e, 0x3c, 0xb7,
	0xb2, 0xdf, 0xa6, 0xd8, 0x4a, 0x45, 0x52, 0x1d, 0xa4, 0xf5, 0x85, 0x41, 0xba, 0x42, 0xf7, 0x2e,
	0x29, 0xa0, 0xc6, 0xd2, 0x06, 0x2b, 0x86, 0x78, 0xf3, 0x6a, 0x88, 0x5b, 0x7f, 0x19, 0xa4, 0x71,
	0xe8, 0xa6, 0x6e, 0xa4, 0x68, 0x48, 0x7a, 0x53, 0xf7, 0xec, 0x85, 0xa7, 0xc5, 0x2b, 0x7e, 0xc8,
	0x53, 0x21, 0x7d, 0x7c, 0x64, 0xfb, 0xe9, 0xce, 0x8d, 0x99, 0xfb, 0x32, 0xff, 0x0a, 0xda, 0x7b,
	0x0c, 0x23, 0xf7, 0xdf, 0xf7, 0x83, 0xfb, 0x91, 0x7b, 0xe6, 0xb8, 0x78, 0xd4, 0x49, 0xf0, 0xec,
	0x57, 0x32, 0x02, 0x0d, 0x12, 0x7d, 0xfe, 0x06, 0x26, 0xf2, 0x22, 0x35, 0x7d, 0x46, 0xd8, 0xd4,
	0x3d, 0x2b, 0x3f, 0x18, 0xf6, 0xb3, 0xd2, 0xb3, 0x81, 0x36, 0xd7, 0xf0, 0x56, 0xff, 0xb3, 0xfa,
	0x9b, 0xdf, 0x07, 0x6b, 0xd6, 0xb7, 0x98, 0x7c, 0x9c, 0xb6, 0xe2, 0xd7, 0x4a, 0x47, 0xc4, 0x7e,
	0x35, 0x3d, 0x60, 0xe5, 0x1d, 0x61, 0x96, 0x1d, 0xf1, 0x1d, 0xb9, 0x0b, 0x4d, 0x1f, 0xff, 0x9f,
	0xc3, 0x7b, 0xcf, 0xdf, 0x5e, 0xf4, 0x8d, 0x77, 0x17, 0x7d, 0xe3, 0xc3, 0x45, 0xdf, 0x78, 0x7d,
	0xd9, 0x5f, 0x7b, 0x77, 0xd9, 0x5f, 0xfb, 0xfb, 0xb2, 0xbf, 0xf6, 0xf3, 0xa3, 0x40, 0xe8, 0x93,
	0xf9, 0x6c, 0xec, 0xc9, 0x68, 0x52, 0x7c, 0x6d, 0xe2, 0x62, 0x72, 0x86, 0x5f, 0xa2, 0x13, 0x7d,
	0x9e, 0x70, 0x35, 0x6b, 0xa0, 0x8e, 0x5f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x40, 0x1f, 0xfd,
	0xce, 0xa3, 0x0a, 0x00, 0x00,
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsToken {
		i--
		if m.IsToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.Photos) > 0 {
		for iNdEx := len(m.Photos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Photos[iNdEx])
			copy(dAtA[i:], m.Photos[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Photos[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.EstimationTotal != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationTotal))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintItem(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmitTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintItem(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	if m.Discount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.DepositAmount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Rating != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Flags != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Comments[iNdEx])
			copy(dAtA[i:], m.Comments[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Comments[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.EstimationList) > 0 {
		dAtA4 := make([]byte, len(m.EstimationList)*10)
		var j3 int
		for _, num1 := range m.EstimationList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintItem(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EstimatorList) > 0 {
		for iNdEx := len(m.EstimatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EstimatorList[iNdEx])
			copy(dAtA[i:], m.EstimatorList[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.EstimatorList[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.EstimationPrice != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationPrice))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BestEstimator) > 0 {
		i -= len(m.BestEstimator)
		copy(dAtA[i:], m.BestEstimator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.BestEstimator)))
		i--
		dAtA[i] = 0x42
	}
	if m.EstimationCount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationCount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.LocalPickup) > 0 {
		i -= len(m.LocalPickup)
		copy(dAtA[i:], m.LocalPickup)
		i = encodeVarintItem(dAtA, i, uint64(len(m.LocalPickup)))
		i--
		dAtA[i] = 0x32
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Photos) > 0 {
		for iNdEx := len(m.Photos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Photos[iNdEx])
			copy(dAtA[i:], m.Photos[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Photos[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.AutoMsg) > 0 {
		i -= len(m.AutoMsg)
		copy(dAtA[i:], m.AutoMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.AutoMsg)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.InitMsg) > 0 {
		i -= len(m.InitMsg)
		copy(dAtA[i:], m.InitMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.InitMsg)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DepositAmount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.DepositAmount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.EstimationCount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.EstimationCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LocalPickup) > 0 {
		i -= len(m.LocalPickup)
		copy(dAtA[i:], m.LocalPickup)
		i = encodeVarintItem(dAtA, i, uint64(len(m.LocalPickup)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LocalPickup) > 0 {
		i -= len(m.LocalPickup)
		copy(dAtA[i:], m.LocalPickup)
		i = encodeVarintItem(dAtA, i, uint64(len(m.LocalPickup)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevealEstimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevealEstimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevealEstimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RevealMsg) > 0 {
		i -= len(m.RevealMsg)
		copy(dAtA[i:], m.RevealMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.RevealMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemTransferable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemTransferable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemTransferable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransferableMsg) > 0 {
		i -= len(m.TransferableMsg)
		copy(dAtA[i:], m.TransferableMsg)
		i = encodeVarintItem(dAtA, i, uint64(len(m.TransferableMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemShipping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemShipping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemShipping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x18
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemResell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemResell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemResell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ShippingRegion) > 0 {
		for iNdEx := len(m.ShippingRegion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShippingRegion[iNdEx])
			copy(dAtA[i:], m.ShippingRegion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.ShippingRegion[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LocalPickup) > 0 {
		i -= len(m.LocalPickup)
		copy(dAtA[i:], m.LocalPickup)
		i = encodeVarintItem(dAtA, i, uint64(len(m.LocalPickup)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Discount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x20
	}
	if m.ShippingCost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.ShippingCost))
		i--
		dAtA[i] = 0x18
	}
	if m.Itemid != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Itemid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxEstimatorCreatorRatio != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.MaxEstimatorCreatorRatio))
		i--
		dAtA[i] = 0x10
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxActivePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxActivePeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintItem(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTokenizeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenizeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenizeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnTokenizeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnTokenizeItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnTokenizeItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.LocalPickup)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.EstimationCount != 0 {
		n += 1 + sovItem(uint64(m.EstimationCount))
	}
	l = len(m.BestEstimator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.EstimationPrice != 0 {
		n += 1 + sovItem(uint64(m.EstimationPrice))
	}
	if len(m.EstimatorList) > 0 {
		for _, s := range m.EstimatorList {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if len(m.EstimationList) > 0 {
		l = 0
		for _, e := range m.EstimationList {
			l += sovItem(uint64(e))
		}
		n += 1 + sovItem(uint64(l)) + l
	}
	if m.Transferable {
		n += 2
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if m.Flags != 0 {
		n += 2 + sovItem(uint64(m.Flags))
	}
	if m.Condition != 0 {
		n += 2 + sovItem(uint64(m.Condition))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if m.Rating != 0 {
		n += 2 + sovItem(uint64(m.Rating))
	}
	if m.DepositAmount != 0 {
		n += 2 + sovItem(uint64(m.DepositAmount))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovItem(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 2 + l + sovItem(uint64(l))
	}
	if m.Discount != 0 {
		n += 2 + sovItem(uint64(m.Discount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime)
	n += 2 + l + sovItem(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 2 + l + sovItem(uint64(l))
	l = len(m.Contract)
	if l > 0 {
		n += 2 + l + sovItem(uint64(l))
	}
	if m.EstimationTotal != 0 {
		n += 2 + sovItem(uint64(m.EstimationTotal))
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if m.IsToken {
		n += 3
	}
	return n
}

func (m *MsgCreateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.LocalPickup)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.EstimationCount != 0 {
		n += 1 + sovItem(uint64(m.EstimationCount))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Condition != 0 {
		n += 1 + sovItem(uint64(m.Condition))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.DepositAmount != 0 {
		n += 1 + sovItem(uint64(m.DepositAmount))
	}
	l = len(m.InitMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.AutoMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.Photos) > 0 {
		for _, s := range m.Photos {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	l = len(m.LocalPickup)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func (m *MsgRevealEstimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	l = len(m.RevealMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgItemTransferable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.TransferableMsg)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	return n
}

func (m *MsgItemShipping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 2
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	return n
}

func (m *MsgItemResell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Itemid != 0 {
		n += 1 + sovItem(uint64(m.Itemid))
	}
	if m.ShippingCost != 0 {
		n += 1 + sovItem(uint64(m.ShippingCost))
	}
	if m.Discount != 0 {
		n += 1 + sovItem(uint64(m.Discount))
	}
	l = len(m.LocalPickup)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if len(m.ShippingRegion) > 0 {
		for _, s := range m.ShippingRegion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxActivePeriod)
	n += 1 + l + sovItem(uint64(l))
	if m.MaxEstimatorCreatorRatio != 0 {
		n += 1 + sovItem(uint64(m.MaxEstimatorCreatorRatio))
	}
	return n
}

func (m *MsgTokenizeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func (m *MsgUnTokenizeItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovItem(uint64(m.Id))
	}
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPickup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPickup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationCount", wireType)
			}
			m.EstimationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestEstimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BestEstimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationPrice", wireType)
			}
			m.EstimationPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatorList = append(m.EstimatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EstimationList = append(m.EstimationList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthItem
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthItem
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EstimationList) == 0 {
					m.EstimationList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EstimationList = append(m.EstimationList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationList", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationTotal", wireType)
			}
			m.EstimationTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsToken = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPickup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPickup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimationCount", wireType)
			}
			m.EstimationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			m.DepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitMsg = append(m.InitMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.InitMsg == nil {
				m.InitMsg = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoMsg = append(m.AutoMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.AutoMsg == nil {
				m.AutoMsg = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photos = append(m.Photos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPickup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPickup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevealEstimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevealEstimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevealEstimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevealMsg = append(m.RevealMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.RevealMsg == nil {
				m.RevealMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemTransferable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemTransferable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemTransferable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferableMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferableMsg = append(m.TransferableMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.TransferableMsg == nil {
				m.TransferableMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemShipping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemShipping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemShipping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemResell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemResell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemResell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingCost", wireType)
			}
			m.ShippingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShippingCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPickup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPickup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingRegion = append(m.ShippingRegion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActivePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxActivePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEstimatorCreatorRatio", wireType)
			}
			m.MaxEstimatorCreatorRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEstimatorCreatorRatio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenizeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenizeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenizeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnTokenizeItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnTokenizeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnTokenizeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
