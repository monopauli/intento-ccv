// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetProfileRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetProfileRequest) Reset()         { *m = QueryGetProfileRequest{} }
func (m *QueryGetProfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileRequest) ProtoMessage()    {}
func (*QueryGetProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{0}
}
func (m *QueryGetProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileRequest.Merge(m, src)
}
func (m *QueryGetProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileRequest proto.InternalMessageInfo

func (m *QueryGetProfileRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetProfileResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *QueryGetProfileResponse) Reset()         { *m = QueryGetProfileResponse{} }
func (m *QueryGetProfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileResponse) ProtoMessage()    {}
func (*QueryGetProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{1}
}
func (m *QueryGetProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileResponse.Merge(m, src)
}
func (m *QueryGetProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileResponse proto.InternalMessageInfo

func (m *QueryGetProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type QueryAllProfilesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfilesRequest) Reset()         { *m = QueryAllProfilesRequest{} }
func (m *QueryAllProfilesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfilesRequest) ProtoMessage()    {}
func (*QueryAllProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{2}
}
func (m *QueryAllProfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfilesRequest.Merge(m, src)
}
func (m *QueryAllProfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfilesRequest proto.InternalMessageInfo

func (m *QueryAllProfilesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProfilesResponse struct {
	Profile    []*Profile          `protobuf:"bytes,1,rep,name=Profile,proto3" json:"Profile,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfilesResponse) Reset()         { *m = QueryAllProfilesResponse{} }
func (m *QueryAllProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfilesResponse) ProtoMessage()    {}
func (*QueryAllProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{3}
}
func (m *QueryAllProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfilesResponse.Merge(m, src)
}
func (m *QueryAllProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfilesResponse proto.InternalMessageInfo

func (m *QueryAllProfilesResponse) GetProfile() []*Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *QueryAllProfilesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetItemRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetItemRequest) Reset()         { *m = QueryGetItemRequest{} }
func (m *QueryGetItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemRequest) ProtoMessage()    {}
func (*QueryGetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{4}
}
func (m *QueryGetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemRequest.Merge(m, src)
}
func (m *QueryGetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemRequest proto.InternalMessageInfo

func (m *QueryGetItemRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetItemResponse struct {
	Item *Item `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *QueryGetItemResponse) Reset()         { *m = QueryGetItemResponse{} }
func (m *QueryGetItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemResponse) ProtoMessage()    {}
func (*QueryGetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{5}
}
func (m *QueryGetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemResponse.Merge(m, src)
}
func (m *QueryGetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemResponse proto.InternalMessageInfo

func (m *QueryGetItemResponse) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type QueryGetItemOwnerRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetItemOwnerRequest) Reset()         { *m = QueryGetItemOwnerRequest{} }
func (m *QueryGetItemOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemOwnerRequest) ProtoMessage()    {}
func (*QueryGetItemOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{6}
}
func (m *QueryGetItemOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemOwnerRequest.Merge(m, src)
}
func (m *QueryGetItemOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemOwnerRequest proto.InternalMessageInfo

func (m *QueryGetItemOwnerRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetItemOwnerResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
}

func (m *QueryGetItemOwnerResponse) Reset()         { *m = QueryGetItemOwnerResponse{} }
func (m *QueryGetItemOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemOwnerResponse) ProtoMessage()    {}
func (*QueryGetItemOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{7}
}
func (m *QueryGetItemOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemOwnerResponse.Merge(m, src)
}
func (m *QueryGetItemOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemOwnerResponse proto.InternalMessageInfo

func (m *QueryGetItemOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryAllItemsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllItemsRequest) Reset()         { *m = QueryAllItemsRequest{} }
func (m *QueryAllItemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllItemsRequest) ProtoMessage()    {}
func (*QueryAllItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{8}
}
func (m *QueryAllItemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllItemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllItemsRequest.Merge(m, src)
}
func (m *QueryAllItemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllItemsRequest proto.InternalMessageInfo

func (m *QueryAllItemsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllItemsResponse struct {
	Item       []*Item             `protobuf:"bytes,1,rep,name=Item,proto3" json:"Item,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllItemsResponse) Reset()         { *m = QueryAllItemsResponse{} }
func (m *QueryAllItemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllItemsResponse) ProtoMessage()    {}
func (*QueryAllItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{9}
}
func (m *QueryAllItemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllItemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllItemsResponse.Merge(m, src)
}
func (m *QueryAllItemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllItemsResponse proto.InternalMessageInfo

func (m *QueryAllItemsResponse) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *QueryAllItemsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListedItemsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListedItemsRequest) Reset()         { *m = QueryAllListedItemsRequest{} }
func (m *QueryAllListedItemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllListedItemsRequest) ProtoMessage()    {}
func (*QueryAllListedItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{10}
}
func (m *QueryAllListedItemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListedItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListedItemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListedItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListedItemsRequest.Merge(m, src)
}
func (m *QueryAllListedItemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListedItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListedItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListedItemsRequest proto.InternalMessageInfo

func (m *QueryAllListedItemsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListedItemsResponse struct {
	Item       []*Item             `protobuf:"bytes,1,rep,name=Item,proto3" json:"Item,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListedItemsResponse) Reset()         { *m = QueryAllListedItemsResponse{} }
func (m *QueryAllListedItemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllListedItemsResponse) ProtoMessage()    {}
func (*QueryAllListedItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{11}
}
func (m *QueryAllListedItemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListedItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListedItemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListedItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListedItemsResponse.Merge(m, src)
}
func (m *QueryAllListedItemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListedItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListedItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListedItemsResponse proto.InternalMessageInfo

func (m *QueryAllListedItemsResponse) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *QueryAllListedItemsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySellerItemsRequest struct {
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *QuerySellerItemsRequest) Reset()         { *m = QuerySellerItemsRequest{} }
func (m *QuerySellerItemsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySellerItemsRequest) ProtoMessage()    {}
func (*QuerySellerItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{12}
}
func (m *QuerySellerItemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellerItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellerItemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellerItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellerItemsRequest.Merge(m, src)
}
func (m *QuerySellerItemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellerItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellerItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellerItemsRequest proto.InternalMessageInfo

func (m *QuerySellerItemsRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

type QuerySellerItemsResponse struct {
	Item []*Item `protobuf:"bytes,1,rep,name=Item,proto3" json:"Item,omitempty"`
}

func (m *QuerySellerItemsResponse) Reset()         { *m = QuerySellerItemsResponse{} }
func (m *QuerySellerItemsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySellerItemsResponse) ProtoMessage()    {}
func (*QuerySellerItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{13}
}
func (m *QuerySellerItemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySellerItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySellerItemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySellerItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySellerItemsResponse.Merge(m, src)
}
func (m *QuerySellerItemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySellerItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySellerItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySellerItemsResponse proto.InternalMessageInfo

func (m *QuerySellerItemsResponse) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type QueryBuyerItemsRequest struct {
	Buyer string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *QueryBuyerItemsRequest) Reset()         { *m = QueryBuyerItemsRequest{} }
func (m *QueryBuyerItemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyerItemsRequest) ProtoMessage()    {}
func (*QueryBuyerItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{14}
}
func (m *QueryBuyerItemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyerItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyerItemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyerItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyerItemsRequest.Merge(m, src)
}
func (m *QueryBuyerItemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyerItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyerItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyerItemsRequest proto.InternalMessageInfo

func (m *QueryBuyerItemsRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

type QueryBuyerItemsResponse struct {
	Item []*Item `protobuf:"bytes,1,rep,name=Item,proto3" json:"Item,omitempty"`
}

func (m *QueryBuyerItemsResponse) Reset()         { *m = QueryBuyerItemsResponse{} }
func (m *QueryBuyerItemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyerItemsResponse) ProtoMessage()    {}
func (*QueryBuyerItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{15}
}
func (m *QueryBuyerItemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyerItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyerItemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyerItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyerItemsResponse.Merge(m, src)
}
func (m *QueryBuyerItemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyerItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyerItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyerItemsResponse proto.InternalMessageInfo

func (m *QueryBuyerItemsResponse) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type QueryCodeHashRequest struct {
	Codeid uint64 `protobuf:"varint,1,opt,name=codeid,proto3" json:"codeid,omitempty"`
}

func (m *QueryCodeHashRequest) Reset()         { *m = QueryCodeHashRequest{} }
func (m *QueryCodeHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCodeHashRequest) ProtoMessage()    {}
func (*QueryCodeHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{16}
}
func (m *QueryCodeHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCodeHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCodeHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCodeHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCodeHashRequest.Merge(m, src)
}
func (m *QueryCodeHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCodeHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCodeHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCodeHashRequest proto.InternalMessageInfo

func (m *QueryCodeHashRequest) GetCodeid() uint64 {
	if m != nil {
		return m.Codeid
	}
	return 0
}

type QueryCodeHashResponse struct {
	Codehash       []byte `protobuf:"bytes,1,opt,name=codehash,proto3" json:"codehash,omitempty"`
	CodehashString string `protobuf:"bytes,2,opt,name=codehash_string,json=codehashString,proto3" json:"codehash_string,omitempty"`
}

func (m *QueryCodeHashResponse) Reset()         { *m = QueryCodeHashResponse{} }
func (m *QueryCodeHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCodeHashResponse) ProtoMessage()    {}
func (*QueryCodeHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cb7d706860c6988, []int{17}
}
func (m *QueryCodeHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCodeHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCodeHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCodeHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCodeHashResponse.Merge(m, src)
}
func (m *QueryCodeHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCodeHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCodeHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCodeHashResponse proto.InternalMessageInfo

func (m *QueryCodeHashResponse) GetCodehash() []byte {
	if m != nil {
		return m.Codehash
	}
	return nil
}

func (m *QueryCodeHashResponse) GetCodehashString() string {
	if m != nil {
		return m.CodehashString
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryGetProfileRequest)(nil), "trstlabs.trst.item.v1beta1.QueryGetProfileRequest")
	proto.RegisterType((*QueryGetProfileResponse)(nil), "trstlabs.trst.item.v1beta1.QueryGetProfileResponse")
	proto.RegisterType((*QueryAllProfilesRequest)(nil), "trstlabs.trst.item.v1beta1.QueryAllProfilesRequest")
	proto.RegisterType((*QueryAllProfilesResponse)(nil), "trstlabs.trst.item.v1beta1.QueryAllProfilesResponse")
	proto.RegisterType((*QueryGetItemRequest)(nil), "trstlabs.trst.item.v1beta1.QueryGetItemRequest")
	proto.RegisterType((*QueryGetItemResponse)(nil), "trstlabs.trst.item.v1beta1.QueryGetItemResponse")
	proto.RegisterType((*QueryGetItemOwnerRequest)(nil), "trstlabs.trst.item.v1beta1.QueryGetItemOwnerRequest")
	proto.RegisterType((*QueryGetItemOwnerResponse)(nil), "trstlabs.trst.item.v1beta1.QueryGetItemOwnerResponse")
	proto.RegisterType((*QueryAllItemsRequest)(nil), "trstlabs.trst.item.v1beta1.QueryAllItemsRequest")
	proto.RegisterType((*QueryAllItemsResponse)(nil), "trstlabs.trst.item.v1beta1.QueryAllItemsResponse")
	proto.RegisterType((*QueryAllListedItemsRequest)(nil), "trstlabs.trst.item.v1beta1.QueryAllListedItemsRequest")
	proto.RegisterType((*QueryAllListedItemsResponse)(nil), "trstlabs.trst.item.v1beta1.QueryAllListedItemsResponse")
	proto.RegisterType((*QuerySellerItemsRequest)(nil), "trstlabs.trst.item.v1beta1.QuerySellerItemsRequest")
	proto.RegisterType((*QuerySellerItemsResponse)(nil), "trstlabs.trst.item.v1beta1.QuerySellerItemsResponse")
	proto.RegisterType((*QueryBuyerItemsRequest)(nil), "trstlabs.trst.item.v1beta1.QueryBuyerItemsRequest")
	proto.RegisterType((*QueryBuyerItemsResponse)(nil), "trstlabs.trst.item.v1beta1.QueryBuyerItemsResponse")
	proto.RegisterType((*QueryCodeHashRequest)(nil), "trstlabs.trst.item.v1beta1.QueryCodeHashRequest")
	proto.RegisterType((*QueryCodeHashResponse)(nil), "trstlabs.trst.item.v1beta1.QueryCodeHashResponse")
}

func init() { proto.RegisterFile("item/v1beta1/query.proto", fileDescriptor_9cb7d706860c6988) }

var fileDescriptor_9cb7d706860c6988 = []byte{
	// 875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x5f, 0x4f, 0x13, 0x4d,
	0x14, 0xc6, 0xd9, 0x42, 0xf9, 0x33, 0x7d, 0xc3, 0x9b, 0xcc, 0xdb, 0x17, 0xea, 0x8a, 0x05, 0x17,
	0x4a, 0x09, 0xea, 0x2e, 0x05, 0xd4, 0x2b, 0x63, 0xc0, 0x44, 0x34, 0x21, 0x01, 0xcb, 0x8d, 0x31,
	0x46, 0xb3, 0xa5, 0x63, 0xbb, 0xc9, 0xb6, 0x53, 0x76, 0xa6, 0x2a, 0x69, 0x7a, 0xe3, 0x27, 0x20,
	0x31, 0xf1, 0xca, 0x18, 0x63, 0xe2, 0x8d, 0x9f, 0xc1, 0x0f, 0xe0, 0x25, 0x89, 0x37, 0x5e, 0x1a,
	0xf0, 0x83, 0x98, 0x39, 0x3b, 0x5b, 0x76, 0xbb, 0x4b, 0xd9, 0x06, 0x4c, 0xbc, 0x69, 0x76, 0x66,
	0xcf, 0x33, 0xe7, 0x77, 0xce, 0xce, 0x3c, 0x53, 0x94, 0xb1, 0x38, 0xa9, 0x19, 0x2f, 0x0b, 0x25,
	0xc2, 0xcd, 0x82, 0xb1, 0xd7, 0x24, 0xce, 0xbe, 0xde, 0x70, 0x28, 0xa7, 0x58, 0xe5, 0x0e, 0xe3,
	0xb6, 0x59, 0x62, 0xba, 0x78, 0xd0, 0x45, 0x9c, 0x2e, 0xe3, 0xd4, 0xa9, 0x0a, 0xa5, 0x15, 0x9b,
	0x18, 0x66, 0xc3, 0x32, 0xcc, 0x7a, 0x9d, 0x72, 0x93, 0x5b, 0xb4, 0xce, 0x5c, 0xa5, 0xba, 0xb8,
	0x4b, 0x59, 0x8d, 0x32, 0xa3, 0x64, 0x32, 0xe2, 0x2e, 0xd9, 0x49, 0xd0, 0x30, 0x2b, 0x56, 0x1d,
	0x82, 0x65, 0xec, 0x54, 0x20, 0x3f, 0x61, 0xdc, 0xaa, 0x99, 0x9c, 0x3a, 0xf2, 0xed, 0x64, 0xe0,
	0x2d, 0x20, 0xc0, 0x0b, 0x4d, 0x47, 0x13, 0x8f, 0xc4, 0xc2, 0x1b, 0x84, 0x6f, 0x3b, 0xf4, 0x85,
	0x65, 0x93, 0x22, 0xd9, 0x6b, 0x12, 0xc6, 0x71, 0x1a, 0x25, 0xe9, 0xab, 0x3a, 0x71, 0x32, 0xca,
	0x8c, 0xb2, 0x30, 0x56, 0x74, 0x07, 0xda, 0x63, 0x34, 0x19, 0x8a, 0x67, 0x0d, 0x5a, 0x67, 0x04,
	0xdf, 0x41, 0x23, 0x72, 0x0a, 0x24, 0xa9, 0xe5, 0x59, 0xfd, 0xf4, 0xca, 0x75, 0x4f, 0xed, 0x69,
	0x34, 0x53, 0xae, 0xbc, 0x66, 0xdb, 0x72, 0x8a, 0x79, 0x28, 0xf7, 0x11, 0x3a, 0xa9, 0x57, 0x2e,
	0x3e, 0xaf, 0xbb, 0xcd, 0xd1, 0x45, 0x73, 0x74, 0xb7, 0xdf, 0x9d, 0xb5, 0xcd, 0x8a, 0x57, 0x46,
	0xd1, 0xa7, 0xd4, 0x3e, 0x29, 0x28, 0x13, 0xce, 0x11, 0x85, 0x3f, 0xd8, 0x2f, 0x3e, 0xde, 0x08,
	0x30, 0x26, 0x80, 0x31, 0x7f, 0x26, 0xa3, 0x9b, 0x3b, 0x00, 0x99, 0x43, 0xff, 0x79, 0x1d, 0x7e,
	0xc8, 0x49, 0xcd, 0xeb, 0xc1, 0x38, 0x4a, 0x58, 0x65, 0xa8, 0x7d, 0xa8, 0x98, 0xb0, 0xca, 0xda,
	0x26, 0x4a, 0x07, 0xc3, 0x64, 0x19, 0xab, 0x68, 0x48, 0x8c, 0x65, 0x97, 0x66, 0x7a, 0xd5, 0x00,
	0x3a, 0x88, 0xd6, 0x16, 0x65, 0x63, 0xe4, 0x6a, 0x5b, 0xe2, 0x5b, 0x9f, 0x96, 0xb9, 0x80, 0x2e,
	0x45, 0xc4, 0xca, 0xf4, 0x69, 0x94, 0xdc, 0xf2, 0xef, 0x1a, 0x18, 0x68, 0xcf, 0x24, 0xec, 0x9a,
	0x6d, 0x0b, 0xc9, 0x85, 0x7f, 0xd8, 0x77, 0x0a, 0xfa, 0xbf, 0x2b, 0x41, 0xa8, 0x1d, 0x83, 0xf1,
	0xdb, 0x71, 0x71, 0x1f, 0xb3, 0x8c, 0x54, 0x8f, 0x6b, 0xd3, 0x62, 0x9c, 0x94, 0xff, 0x48, 0xf9,
	0xef, 0x15, 0x74, 0x39, 0x32, 0xcd, 0xdf, 0xd1, 0x84, 0x82, 0x3c, 0xd9, 0x3b, 0xc4, 0xb6, 0x89,
	0x13, 0xe8, 0xc0, 0x04, 0x1a, 0x66, 0x30, 0x2b, 0xf7, 0x8b, 0x1c, 0x69, 0xdb, 0x72, 0x3f, 0x06,
	0x24, 0xe7, 0xa9, 0xa6, 0x63, 0x74, 0xeb, 0xcd, 0xfd, 0x2e, 0x86, 0x34, 0x4a, 0x96, 0xc4, 0xa4,
	0xb7, 0x65, 0x61, 0xa0, 0x6d, 0x49, 0x68, 0x7f, 0xfc, 0x39, 0x01, 0xdc, 0x33, 0x70, 0x8f, 0x96,
	0xc9, 0x03, 0x93, 0x55, 0x7d, 0x2d, 0xd8, 0xa5, 0x65, 0xd2, 0x39, 0x62, 0x72, 0xa4, 0x3d, 0x95,
	0x5b, 0xfa, 0x24, 0x5e, 0xa6, 0x57, 0xd1, 0xa8, 0x08, 0xa9, 0x9a, 0xac, 0x0a, 0x92, 0x7f, 0x8a,
	0x9d, 0x31, 0xce, 0xa3, 0x7f, 0xbd, 0xe7, 0xe7, 0x8c, 0x3b, 0x56, 0xbd, 0x02, 0x1f, 0x6e, 0xac,
	0x38, 0xee, 0x4d, 0xef, 0xc0, 0xec, 0xf2, 0xd7, 0x14, 0x4a, 0xc2, 0xf2, 0xf8, 0xa3, 0xd2, 0x31,
	0x3e, 0xbc, 0xdc, 0xab, 0x96, 0xe8, 0x7b, 0x42, 0x5d, 0xe9, 0x4b, 0xe3, 0xd6, 0xa0, 0x5d, 0x7f,
	0xf3, 0xfd, 0xd7, 0xdb, 0xc4, 0x3c, 0x9e, 0x33, 0x3c, 0x31, 0x3c, 0xb8, 0x3f, 0x0d, 0x69, 0xcd,
	0x46, 0x0b, 0xee, 0x9c, 0x36, 0xfe, 0xa0, 0xa0, 0x94, 0xcf, 0xb2, 0xf1, 0xd9, 0x29, 0xc3, 0x97,
	0x88, 0xba, 0xda, 0x9f, 0x48, 0x82, 0xce, 0x01, 0x68, 0x16, 0x4f, 0xf5, 0x02, 0xc5, 0x07, 0x8a,
	0xbb, 0x25, 0xb0, 0x11, 0xa7, 0x19, 0x3e, 0x5b, 0x57, 0x97, 0xe2, 0x0b, 0x24, 0x51, 0x0e, 0x88,
	0xa6, 0xf1, 0x95, 0x28, 0x22, 0xb8, 0xe6, 0x5b, 0x56, 0xb9, 0x2d, 0x90, 0x46, 0x84, 0x6e, 0xcd,
	0xb6, 0xf1, 0x52, 0x9c, 0xd2, 0xfd, 0x67, 0x42, 0x2d, 0xf4, 0xa1, 0x90, 0x5c, 0x33, 0xc0, 0xa5,
	0xe2, 0xcc, 0x69, 0x5c, 0xf8, 0xb3, 0x82, 0xc6, 0x3a, 0x37, 0x06, 0x5e, 0x8d, 0x5b, 0xb9, 0xff,
	0x32, 0x52, 0x6f, 0xf6, 0xa9, 0x92, 0x70, 0xd7, 0x00, 0x2e, 0x87, 0x67, 0x7b, 0x36, 0xcd, 0x80,
	0xfd, 0x86, 0xbf, 0x28, 0x68, 0xdc, 0x67, 0xa3, 0xa2, 0x83, 0xb7, 0xe2, 0xf4, 0x23, 0xec, 0xf0,
	0xea, 0xed, 0xbe, 0x75, 0x12, 0x38, 0x0f, 0xc0, 0x57, 0xf1, 0x74, 0x14, 0xb0, 0x0d, 0x02, 0xb1,
	0x16, 0x13, 0xb0, 0x29, 0x9f, 0x4b, 0xc6, 0x38, 0x1b, 0x61, 0x1b, 0x8e, 0x71, 0x36, 0x22, 0x8c,
	0x58, 0x5b, 0x02, 0xc6, 0x45, 0xbc, 0x10, 0xc5, 0xe8, 0x1a, 0x39, 0x30, 0x1a, 0x2d, 0x77, 0xd0,
	0x16, 0x3b, 0x00, 0x9d, 0x18, 0x6a, 0x0c, 0xbb, 0x09, 0xb9, 0x75, 0x0c, 0xbb, 0x09, 0x3b, 0xb6,
	0xa6, 0x03, 0xe9, 0x02, 0x9e, 0x8f, 0x22, 0x05, 0xbf, 0x97, 0xa0, 0xf0, 0x0c, 0x86, 0x33, 0xea,
	0xf9, 0x6e, 0x8c, 0xd3, 0xd3, 0x65, 0xe9, 0x31, 0x4e, 0x4f, 0xb7, 0xa9, 0x6b, 0x37, 0x80, 0x30,
	0x8f, 0x73, 0x51, 0x84, 0x9e, 0x77, 0x1b, 0x2d, 0xf7, 0x6e, 0x68, 0xaf, 0xdf, 0xfd, 0x76, 0x94,
	0x55, 0x0e, 0x8f, 0xb2, 0xca, 0xcf, 0xa3, 0xac, 0x72, 0x70, 0x9c, 0x1d, 0x38, 0x3c, 0xce, 0x0e,
	0xfc, 0x38, 0xce, 0x0e, 0x3c, 0xc9, 0x55, 0x2c, 0x5e, 0x6d, 0x96, 0xf4, 0x5d, 0x5a, 0xeb, 0x5a,
	0xea, 0xb5, 0xbb, 0xd1, 0xf9, 0x7e, 0x83, 0xb0, 0xd2, 0x30, 0xfc, 0xfd, 0x5f, 0xf9, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0xd7, 0x24, 0x02, 0xb7, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Profile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error)
	AllProfiles(ctx context.Context, in *QueryAllProfilesRequest, opts ...grpc.CallOption) (*QueryAllProfilesResponse, error)
	Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error)
	ItemAll(ctx context.Context, in *QueryAllItemsRequest, opts ...grpc.CallOption) (*QueryAllItemsResponse, error)
	ItemOwner(ctx context.Context, in *QueryGetItemOwnerRequest, opts ...grpc.CallOption) (*QueryGetItemOwnerResponse, error)
	ListedItemsAll(ctx context.Context, in *QueryAllListedItemsRequest, opts ...grpc.CallOption) (*QueryAllListedItemsResponse, error)
	SellerItems(ctx context.Context, in *QuerySellerItemsRequest, opts ...grpc.CallOption) (*QuerySellerItemsResponse, error)
	BuyerItems(ctx context.Context, in *QueryBuyerItemsRequest, opts ...grpc.CallOption) (*QueryBuyerItemsResponse, error)
	CodeHash(ctx context.Context, in *QueryCodeHashRequest, opts ...grpc.CallOption) (*QueryCodeHashResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Profile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error) {
	out := new(QueryGetProfileResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProfiles(ctx context.Context, in *QueryAllProfilesRequest, opts ...grpc.CallOption) (*QueryAllProfilesResponse, error) {
	out := new(QueryAllProfilesResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/AllProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error) {
	out := new(QueryGetItemResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ItemAll(ctx context.Context, in *QueryAllItemsRequest, opts ...grpc.CallOption) (*QueryAllItemsResponse, error) {
	out := new(QueryAllItemsResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/ItemAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ItemOwner(ctx context.Context, in *QueryGetItemOwnerRequest, opts ...grpc.CallOption) (*QueryGetItemOwnerResponse, error) {
	out := new(QueryGetItemOwnerResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/ItemOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListedItemsAll(ctx context.Context, in *QueryAllListedItemsRequest, opts ...grpc.CallOption) (*QueryAllListedItemsResponse, error) {
	out := new(QueryAllListedItemsResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/ListedItemsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerItems(ctx context.Context, in *QuerySellerItemsRequest, opts ...grpc.CallOption) (*QuerySellerItemsResponse, error) {
	out := new(QuerySellerItemsResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/SellerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerItems(ctx context.Context, in *QueryBuyerItemsRequest, opts ...grpc.CallOption) (*QueryBuyerItemsResponse, error) {
	out := new(QueryBuyerItemsResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/BuyerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CodeHash(ctx context.Context, in *QueryCodeHashRequest, opts ...grpc.CallOption) (*QueryCodeHashResponse, error) {
	out := new(QueryCodeHashResponse)
	err := c.cc.Invoke(ctx, "/trstlabs.trst.item.v1beta1.Query/CodeHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Profile(context.Context, *QueryGetProfileRequest) (*QueryGetProfileResponse, error)
	AllProfiles(context.Context, *QueryAllProfilesRequest) (*QueryAllProfilesResponse, error)
	Item(context.Context, *QueryGetItemRequest) (*QueryGetItemResponse, error)
	ItemAll(context.Context, *QueryAllItemsRequest) (*QueryAllItemsResponse, error)
	ItemOwner(context.Context, *QueryGetItemOwnerRequest) (*QueryGetItemOwnerResponse, error)
	ListedItemsAll(context.Context, *QueryAllListedItemsRequest) (*QueryAllListedItemsResponse, error)
	SellerItems(context.Context, *QuerySellerItemsRequest) (*QuerySellerItemsResponse, error)
	BuyerItems(context.Context, *QueryBuyerItemsRequest) (*QueryBuyerItemsResponse, error)
	CodeHash(context.Context, *QueryCodeHashRequest) (*QueryCodeHashResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Profile(ctx context.Context, req *QueryGetProfileRequest) (*QueryGetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedQueryServer) AllProfiles(ctx context.Context, req *QueryAllProfilesRequest) (*QueryAllProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProfiles not implemented")
}
func (*UnimplementedQueryServer) Item(ctx context.Context, req *QueryGetItemRequest) (*QueryGetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Item not implemented")
}
func (*UnimplementedQueryServer) ItemAll(ctx context.Context, req *QueryAllItemsRequest) (*QueryAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemAll not implemented")
}
func (*UnimplementedQueryServer) ItemOwner(ctx context.Context, req *QueryGetItemOwnerRequest) (*QueryGetItemOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemOwner not implemented")
}
func (*UnimplementedQueryServer) ListedItemsAll(ctx context.Context, req *QueryAllListedItemsRequest) (*QueryAllListedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListedItemsAll not implemented")
}
func (*UnimplementedQueryServer) SellerItems(ctx context.Context, req *QuerySellerItemsRequest) (*QuerySellerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerItems not implemented")
}
func (*UnimplementedQueryServer) BuyerItems(ctx context.Context, req *QueryBuyerItemsRequest) (*QueryBuyerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerItems not implemented")
}
func (*UnimplementedQueryServer) CodeHash(ctx context.Context, req *QueryCodeHashRequest) (*QueryCodeHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeHash not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Profile(ctx, req.(*QueryGetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/AllProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProfiles(ctx, req.(*QueryAllProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Item(ctx, req.(*QueryGetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ItemAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ItemAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/ItemAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ItemAll(ctx, req.(*QueryAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ItemOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetItemOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ItemOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/ItemOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ItemOwner(ctx, req.(*QueryGetItemOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListedItemsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllListedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListedItemsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/ListedItemsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListedItemsAll(ctx, req.(*QueryAllListedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySellerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/SellerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerItems(ctx, req.(*QuerySellerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/BuyerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerItems(ctx, req.(*QueryBuyerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CodeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCodeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CodeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trstlabs.trst.item.v1beta1.Query/CodeHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CodeHash(ctx, req.(*QueryCodeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trstlabs.trst.item.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _Query_Profile_Handler,
		},
		{
			MethodName: "AllProfiles",
			Handler:    _Query_AllProfiles_Handler,
		},
		{
			MethodName: "Item",
			Handler:    _Query_Item_Handler,
		},
		{
			MethodName: "ItemAll",
			Handler:    _Query_ItemAll_Handler,
		},
		{
			MethodName: "ItemOwner",
			Handler:    _Query_ItemOwner_Handler,
		},
		{
			MethodName: "ListedItemsAll",
			Handler:    _Query_ListedItemsAll_Handler,
		},
		{
			MethodName: "SellerItems",
			Handler:    _Query_SellerItems_Handler,
		},
		{
			MethodName: "BuyerItems",
			Handler:    _Query_BuyerItems_Handler,
		},
		{
			MethodName: "CodeHash",
			Handler:    _Query_CodeHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/v1beta1/query.proto",
}

func (m *QueryGetProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Profile) > 0 {
		for iNdEx := len(m.Profile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllItemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllItemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListedItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListedItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListedItemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListedItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListedItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListedItemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellerItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellerItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellerItemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySellerItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySellerItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySellerItemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyerItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyerItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyerItemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyerItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyerItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyerItemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCodeHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCodeHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCodeHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Codeid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Codeid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCodeHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCodeHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCodeHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CodehashString) > 0 {
		i -= len(m.CodehashString)
		copy(dAtA[i:], m.CodehashString)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CodehashString)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Codehash) > 0 {
		i -= len(m.Codehash)
		copy(dAtA[i:], m.Codehash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Codehash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profile) > 0 {
		for _, e := range m.Profile {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetItemOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllItemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllItemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListedItemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListedItemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySellerItemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySellerItemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBuyerItemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBuyerItemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCodeHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Codeid != 0 {
		n += 1 + sovQuery(uint64(m.Codeid))
	}
	return n
}

func (m *QueryCodeHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Codehash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CodehashString)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = append(m.Profile, &Profile{})
			if err := m.Profile[len(m.Profile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListedItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListedItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListedItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListedItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListedItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListedItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellerItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellerItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellerItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySellerItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySellerItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySellerItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyerItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyerItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyerItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyerItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyerItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyerItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCodeHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCodeHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCodeHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codeid", wireType)
			}
			m.Codeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codeid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCodeHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCodeHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCodeHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codehash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codehash = append(m.Codehash[:0], dAtA[iNdEx:postIndex]...)
			if m.Codehash == nil {
				m.Codehash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodehashString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodehashString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
