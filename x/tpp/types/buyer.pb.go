// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tpp/buyer.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateBuyer struct {
	Buyer   string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Itemid  string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Deposit int64  `protobuf:"varint,3,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *MsgCreateBuyer) Reset()         { *m = MsgCreateBuyer{} }
func (m *MsgCreateBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBuyer) ProtoMessage()    {}
func (*MsgCreateBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4868296580ce0529, []int{0}
}
func (m *MsgCreateBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBuyer.Merge(m, src)
}
func (m *MsgCreateBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBuyer proto.InternalMessageInfo

func (m *MsgCreateBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgCreateBuyer) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgCreateBuyer) GetDeposit() int64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

type MsgUpdateBuyer struct {
	Buyer   string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Itemid  string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Deposit int64  `protobuf:"varint,3,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *MsgUpdateBuyer) Reset()         { *m = MsgUpdateBuyer{} }
func (m *MsgUpdateBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBuyer) ProtoMessage()    {}
func (*MsgUpdateBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4868296580ce0529, []int{1}
}
func (m *MsgUpdateBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBuyer.Merge(m, src)
}
func (m *MsgUpdateBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBuyer proto.InternalMessageInfo

func (m *MsgUpdateBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgUpdateBuyer) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgUpdateBuyer) GetDeposit() int64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

type MsgDeleteBuyer struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Itemid string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgDeleteBuyer) Reset()         { *m = MsgDeleteBuyer{} }
func (m *MsgDeleteBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBuyer) ProtoMessage()    {}
func (*MsgDeleteBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4868296580ce0529, []int{2}
}
func (m *MsgDeleteBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBuyer.Merge(m, src)
}
func (m *MsgDeleteBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBuyer proto.InternalMessageInfo

func (m *MsgDeleteBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgDeleteBuyer) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

type MsgItemTransfer struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Itemid string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemTransfer) Reset()         { *m = MsgItemTransfer{} }
func (m *MsgItemTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgItemTransfer) ProtoMessage()    {}
func (*MsgItemTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4868296580ce0529, []int{3}
}
func (m *MsgItemTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemTransfer.Merge(m, src)
}
func (m *MsgItemTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemTransfer proto.InternalMessageInfo

func (m *MsgItemTransfer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgItemTransfer) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

type MsgItemRating struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Itemid string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Rating int64  `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *MsgItemRating) Reset()         { *m = MsgItemRating{} }
func (m *MsgItemRating) String() string { return proto.CompactTextString(m) }
func (*MsgItemRating) ProtoMessage()    {}
func (*MsgItemRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_4868296580ce0529, []int{4}
}
func (m *MsgItemRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemRating.Merge(m, src)
}
func (m *MsgItemRating) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemRating) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemRating.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemRating proto.InternalMessageInfo

func (m *MsgItemRating) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgItemRating) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgItemRating) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *MsgItemRating) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateBuyer)(nil), "danieljdd.tpp.tpp.MsgCreateBuyer")
	proto.RegisterType((*MsgUpdateBuyer)(nil), "danieljdd.tpp.tpp.MsgUpdateBuyer")
	proto.RegisterType((*MsgDeleteBuyer)(nil), "danieljdd.tpp.tpp.MsgDeleteBuyer")
	proto.RegisterType((*MsgItemTransfer)(nil), "danieljdd.tpp.tpp.MsgItemTransfer")
	proto.RegisterType((*MsgItemRating)(nil), "danieljdd.tpp.tpp.MsgItemRating")
}

func init() { proto.RegisterFile("tpp/buyer.proto", fileDescriptor_4868296580ce0529) }

var fileDescriptor_4868296580ce0529 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x28, 0xd0,
	0x4f, 0x2a, 0xad, 0x4c, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4c, 0x49, 0xcc,
	0xcb, 0x4c, 0xcd, 0xc9, 0x4a, 0x49, 0xd1, 0x2b, 0x29, 0x28, 0x00, 0x61, 0x29, 0x91, 0xf4, 0xfc,
	0xf4, 0x7c, 0xb0, 0xac, 0x3e, 0x88, 0x05, 0x51, 0xa8, 0x14, 0xc1, 0xc5, 0xe7, 0x5b, 0x9c, 0xee,
	0x5c, 0x94, 0x9a, 0x58, 0x92, 0xea, 0x04, 0x32, 0x40, 0x48, 0x84, 0x8b, 0x15, 0x6c, 0x92, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x84, 0x23, 0x24, 0xc6, 0xc5, 0x96, 0x59, 0x92, 0x9a, 0x9b,
	0x99, 0x22, 0xc1, 0x04, 0x16, 0x86, 0xf2, 0x84, 0x24, 0xb8, 0xd8, 0x53, 0x52, 0x0b, 0xf2, 0x8b,
	0x33, 0x4b, 0x24, 0x98, 0x15, 0x18, 0x35, 0x98, 0x83, 0x60, 0x5c, 0xa8, 0xc9, 0xa1, 0x05, 0x29,
	0x54, 0x37, 0xd9, 0x0e, 0x6c, 0xb2, 0x4b, 0x6a, 0x4e, 0x2a, 0x59, 0x26, 0x2b, 0xd9, 0x73, 0xf1,
	0xfb, 0x16, 0xa7, 0x7b, 0x96, 0xa4, 0xe6, 0x86, 0x14, 0x25, 0xe6, 0x15, 0xa7, 0x91, 0x6c, 0x40,
	0x26, 0x17, 0x2f, 0xd4, 0x80, 0xa0, 0xc4, 0x92, 0xcc, 0xbc, 0x74, 0x12, 0x7d, 0x26, 0xc6, 0xc5,
	0x56, 0x04, 0xd6, 0x07, 0xf5, 0x18, 0x94, 0x27, 0x24, 0xc4, 0xc5, 0x92, 0x97, 0x5f, 0x92, 0x2a,
	0xc1, 0x02, 0x56, 0x0d, 0x66, 0x3b, 0xd9, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c,
	0x43, 0x94, 0x4a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x3c, 0xb6,
	0xf5, 0x41, 0x09, 0xa1, 0x02, 0x4c, 0x96, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xa3, 0xd9,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xde, 0x93, 0x18, 0x5e, 0x22, 0x02, 0x00, 0x00,
}

func (m *MsgCreateBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposit != 0 {
		i = encodeVarintBuyer(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposit != 0 {
		i = encodeVarintBuyer(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x22
	}
	if m.Rating != 0 {
		i = encodeVarintBuyer(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuyer(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuyer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	if m.Deposit != 0 {
		n += 1 + sovBuyer(uint64(m.Deposit))
	}
	return n
}

func (m *MsgUpdateBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	if m.Deposit != 0 {
		n += 1 + sovBuyer(uint64(m.Deposit))
	}
	return n
}

func (m *MsgDeleteBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	return n
}

func (m *MsgItemTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	return n
}

func (m *MsgItemRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	if m.Rating != 0 {
		n += 1 + sovBuyer(uint64(m.Rating))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovBuyer(uint64(l))
	}
	return n
}

func sovBuyer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuyer(x uint64) (n int) {
	return sovBuyer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuyer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuyer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuyer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuyer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuyer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuyer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuyer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuyer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuyer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuyer = fmt.Errorf("proto: unexpected end of group")
)
