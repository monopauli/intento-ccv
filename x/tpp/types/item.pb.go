// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tpp/item.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Creator                     string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                          string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Title                       string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description                 string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Shippingcost                int64    `protobuf:"varint,5,opt,name=shippingcost,proto3" json:"shippingcost,omitempty"`
	Localpickup                 bool     `protobuf:"varint,6,opt,name=localpickup,proto3" json:"localpickup,omitempty"`
	Estimationcounthash         string   `protobuf:"bytes,7,opt,name=estimationcounthash,proto3" json:"estimationcounthash,omitempty"`
	Bestestimator               string   `protobuf:"bytes,8,opt,name=bestestimator,proto3" json:"bestestimator,omitempty"`
	Lowestestimator             string   `protobuf:"bytes,9,opt,name=lowestestimator,proto3" json:"lowestestimator,omitempty"`
	Highestestimator            string   `protobuf:"bytes,10,opt,name=highestestimator,proto3" json:"highestestimator,omitempty"`
	Estimationprice             int64    `protobuf:"varint,11,opt,name=estimationprice,proto3" json:"estimationprice,omitempty"`
	Estimatorlist               []string `protobuf:"bytes,12,rep,name=estimatorlist,proto3" json:"estimatorlist,omitempty"`
	Estimatorestimationhashlist []string `protobuf:"bytes,13,rep,name=estimatorestimationhashlist,proto3" json:"estimatorestimationhashlist,omitempty"`
	Transferable                bool     `protobuf:"varint,14,opt,name=transferable,proto3" json:"transferable,omitempty"`
	Buyer                       string   `protobuf:"bytes,15,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Tracking                    bool     `protobuf:"varint,16,opt,name=tracking,proto3" json:"tracking,omitempty"`
	Status                      string   `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	Comments                    []string `protobuf:"bytes,18,rep,name=comments,proto3" json:"comments,omitempty"`
	Tags                        []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	Flags                       int64    `protobuf:"varint,20,opt,name=flags,proto3" json:"flags,omitempty"`
	Condition                   int64    `protobuf:"varint,21,opt,name=condition,proto3" json:"condition,omitempty"`
	Shippingregion              []string `protobuf:"bytes,22,rep,name=shippingregion,proto3" json:"shippingregion,omitempty"`
	Thank                       bool     `protobuf:"varint,23,opt,name=thank,proto3" json:"thank,omitempty"`
	Depositamount               int64    `protobuf:"varint,24,opt,name=depositamount,proto3" json:"depositamount,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Item) GetShippingcost() int64 {
	if m != nil {
		return m.Shippingcost
	}
	return 0
}

func (m *Item) GetLocalpickup() bool {
	if m != nil {
		return m.Localpickup
	}
	return false
}

func (m *Item) GetEstimationcounthash() string {
	if m != nil {
		return m.Estimationcounthash
	}
	return ""
}

func (m *Item) GetBestestimator() string {
	if m != nil {
		return m.Bestestimator
	}
	return ""
}

func (m *Item) GetLowestestimator() string {
	if m != nil {
		return m.Lowestestimator
	}
	return ""
}

func (m *Item) GetHighestestimator() string {
	if m != nil {
		return m.Highestestimator
	}
	return ""
}

func (m *Item) GetEstimationprice() int64 {
	if m != nil {
		return m.Estimationprice
	}
	return 0
}

func (m *Item) GetEstimatorlist() []string {
	if m != nil {
		return m.Estimatorlist
	}
	return nil
}

func (m *Item) GetEstimatorestimationhashlist() []string {
	if m != nil {
		return m.Estimatorestimationhashlist
	}
	return nil
}

func (m *Item) GetTransferable() bool {
	if m != nil {
		return m.Transferable
	}
	return false
}

func (m *Item) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Item) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *Item) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Item) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Item) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Item) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Item) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *Item) GetShippingregion() []string {
	if m != nil {
		return m.Shippingregion
	}
	return nil
}

func (m *Item) GetThank() bool {
	if m != nil {
		return m.Thank
	}
	return false
}

func (m *Item) GetDepositamount() int64 {
	if m != nil {
		return m.Depositamount
	}
	return 0
}

type MsgCreateItem struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title           string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Shippingcost    int64    `protobuf:"varint,4,opt,name=shippingcost,proto3" json:"shippingcost,omitempty"`
	Localpickup     bool     `protobuf:"varint,5,opt,name=localpickup,proto3" json:"localpickup,omitempty"`
	Estimationcount int64    `protobuf:"varint,6,opt,name=estimationcount,proto3" json:"estimationcount,omitempty"`
	Tags            []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Condition       int64    `protobuf:"varint,8,opt,name=condition,proto3" json:"condition,omitempty"`
	Shippingregion  []string `protobuf:"bytes,9,rep,name=shippingregion,proto3" json:"shippingregion,omitempty"`
	Depositamount   int64    `protobuf:"varint,10,opt,name=depositamount,proto3" json:"depositamount,omitempty"`
}

func (m *MsgCreateItem) Reset()         { *m = MsgCreateItem{} }
func (m *MsgCreateItem) String() string { return proto.CompactTextString(m) }
func (*MsgCreateItem) ProtoMessage()    {}
func (*MsgCreateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{1}
}
func (m *MsgCreateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateItem.Merge(m, src)
}
func (m *MsgCreateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateItem proto.InternalMessageInfo

func (m *MsgCreateItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateItem) GetShippingcost() int64 {
	if m != nil {
		return m.Shippingcost
	}
	return 0
}

func (m *MsgCreateItem) GetLocalpickup() bool {
	if m != nil {
		return m.Localpickup
	}
	return false
}

func (m *MsgCreateItem) GetEstimationcount() int64 {
	if m != nil {
		return m.Estimationcount
	}
	return 0
}

func (m *MsgCreateItem) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MsgCreateItem) GetCondition() int64 {
	if m != nil {
		return m.Condition
	}
	return 0
}

func (m *MsgCreateItem) GetShippingregion() []string {
	if m != nil {
		return m.Shippingregion
	}
	return nil
}

func (m *MsgCreateItem) GetDepositamount() int64 {
	if m != nil {
		return m.Depositamount
	}
	return 0
}

type MsgUpdateItem struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id             string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Shippingcost   int64    `protobuf:"varint,5,opt,name=shippingcost,proto3" json:"shippingcost,omitempty"`
	Localpickup    bool     `protobuf:"varint,6,opt,name=localpickup,proto3" json:"localpickup,omitempty"`
	Shippingregion []string `protobuf:"bytes,8,rep,name=shippingregion,proto3" json:"shippingregion,omitempty"`
}

func (m *MsgUpdateItem) Reset()         { *m = MsgUpdateItem{} }
func (m *MsgUpdateItem) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateItem) ProtoMessage()    {}
func (*MsgUpdateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{2}
}
func (m *MsgUpdateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateItem.Merge(m, src)
}
func (m *MsgUpdateItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateItem proto.InternalMessageInfo

func (m *MsgUpdateItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgUpdateItem) GetShippingcost() int64 {
	if m != nil {
		return m.Shippingcost
	}
	return 0
}

func (m *MsgUpdateItem) GetLocalpickup() bool {
	if m != nil {
		return m.Localpickup
	}
	return false
}

func (m *MsgUpdateItem) GetShippingregion() []string {
	if m != nil {
		return m.Shippingregion
	}
	return nil
}

type MsgDeleteItem struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteItem) Reset()         { *m = MsgDeleteItem{} }
func (m *MsgDeleteItem) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteItem) ProtoMessage()    {}
func (*MsgDeleteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{3}
}
func (m *MsgDeleteItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteItem.Merge(m, src)
}
func (m *MsgDeleteItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteItem proto.InternalMessageInfo

func (m *MsgDeleteItem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgRevealEstimation struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Itemid  string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgRevealEstimation) Reset()         { *m = MsgRevealEstimation{} }
func (m *MsgRevealEstimation) String() string { return proto.CompactTextString(m) }
func (*MsgRevealEstimation) ProtoMessage()    {}
func (*MsgRevealEstimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{4}
}
func (m *MsgRevealEstimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevealEstimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevealEstimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevealEstimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevealEstimation.Merge(m, src)
}
func (m *MsgRevealEstimation) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevealEstimation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevealEstimation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevealEstimation proto.InternalMessageInfo

func (m *MsgRevealEstimation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevealEstimation) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

type MsgItemTransferable struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Transferable bool   `protobuf:"varint,2,opt,name=transferable,proto3" json:"transferable,omitempty"`
	Itemid       string `protobuf:"bytes,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemTransferable) Reset()         { *m = MsgItemTransferable{} }
func (m *MsgItemTransferable) String() string { return proto.CompactTextString(m) }
func (*MsgItemTransferable) ProtoMessage()    {}
func (*MsgItemTransferable) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{5}
}
func (m *MsgItemTransferable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemTransferable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemTransferable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemTransferable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemTransferable.Merge(m, src)
}
func (m *MsgItemTransferable) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemTransferable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemTransferable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemTransferable proto.InternalMessageInfo

func (m *MsgItemTransferable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgItemTransferable) GetTransferable() bool {
	if m != nil {
		return m.Transferable
	}
	return false
}

func (m *MsgItemTransferable) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

type MsgItemShipping struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tracking bool   `protobuf:"varint,2,opt,name=tracking,proto3" json:"tracking,omitempty"`
	Itemid   string `protobuf:"bytes,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgItemShipping) Reset()         { *m = MsgItemShipping{} }
func (m *MsgItemShipping) String() string { return proto.CompactTextString(m) }
func (*MsgItemShipping) ProtoMessage()    {}
func (*MsgItemShipping) Descriptor() ([]byte, []int) {
	return fileDescriptor_4811aecfc1ea80dd, []int{6}
}
func (m *MsgItemShipping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemShipping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemShipping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemShipping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemShipping.Merge(m, src)
}
func (m *MsgItemShipping) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemShipping) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemShipping.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemShipping proto.InternalMessageInfo

func (m *MsgItemShipping) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgItemShipping) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

func (m *MsgItemShipping) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "danieljdd.tpp.tpp.Item")
	proto.RegisterType((*MsgCreateItem)(nil), "danieljdd.tpp.tpp.MsgCreateItem")
	proto.RegisterType((*MsgUpdateItem)(nil), "danieljdd.tpp.tpp.MsgUpdateItem")
	proto.RegisterType((*MsgDeleteItem)(nil), "danieljdd.tpp.tpp.MsgDeleteItem")
	proto.RegisterType((*MsgRevealEstimation)(nil), "danieljdd.tpp.tpp.MsgRevealEstimation")
	proto.RegisterType((*MsgItemTransferable)(nil), "danieljdd.tpp.tpp.MsgItemTransferable")
	proto.RegisterType((*MsgItemShipping)(nil), "danieljdd.tpp.tpp.MsgItemShipping")
}

func init() { proto.RegisterFile("tpp/item.proto", fileDescriptor_4811aecfc1ea80dd) }

var fileDescriptor_4811aecfc1ea80dd = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x5e, 0xd2, 0xae, 0x6b, 0xbd, 0xad, 0xdb, 0xbc, 0x31, 0xac, 0x81, 0xa2, 0xaa, 0x9a, 0x50,
	0xc5, 0x61, 0x61, 0xe2, 0xc4, 0x05, 0x21, 0x3e, 0x84, 0x38, 0xec, 0x52, 0xe0, 0xc2, 0x05, 0x39,
	0x8e, 0x97, 0x98, 0x26, 0xb1, 0x15, 0xbb, 0x83, 0xfd, 0x0b, 0x7e, 0x04, 0x12, 0x7f, 0x85, 0xe3,
	0xb8, 0x71, 0x44, 0xdb, 0x1f, 0x41, 0x7e, 0xd3, 0xa5, 0x4d, 0x1b, 0x5a, 0x21, 0x71, 0x68, 0x95,
	0xf7, 0xf1, 0xfb, 0xe5, 0xc7, 0xef, 0x63, 0xa3, 0xae, 0x51, 0xca, 0x17, 0x86, 0xa7, 0x27, 0x2a,
	0x97, 0x46, 0xe2, 0xbd, 0x90, 0x66, 0x82, 0x27, 0x9f, 0xc2, 0xf0, 0xc4, 0x28, 0x65, 0x7f, 0x47,
	0x07, 0x91, 0x8c, 0x24, 0xac, 0xfa, 0xf6, 0xab, 0x70, 0x3c, 0xf2, 0x98, 0xd4, 0xa9, 0xd4, 0x7e,
	0x40, 0x35, 0xf7, 0x2f, 0x4e, 0x03, 0x6e, 0xe8, 0xa9, 0xcf, 0xa4, 0xc8, 0x8a, 0xf5, 0xfe, 0xb7,
	0x16, 0x6a, 0xbe, 0x31, 0x3c, 0xc5, 0x04, 0x6d, 0xb0, 0x9c, 0x53, 0x23, 0x73, 0xe2, 0xf4, 0x9c,
	0x41, 0x67, 0x78, 0x6b, 0xe2, 0x2e, 0x72, 0x45, 0x48, 0x5c, 0x00, 0x5d, 0x11, 0xe2, 0x03, 0xb4,
	0x6e, 0x84, 0x49, 0x38, 0x69, 0x00, 0x54, 0x18, 0xb8, 0x87, 0x36, 0x43, 0xae, 0x59, 0x2e, 0x94,
	0x11, 0x32, 0x23, 0x4d, 0x58, 0x9b, 0x85, 0x70, 0x1f, 0x6d, 0xe9, 0x58, 0x28, 0x25, 0xb2, 0x88,
	0x49, 0x6d, 0xc8, 0x7a, 0xcf, 0x19, 0x34, 0x86, 0x15, 0xcc, 0x66, 0x49, 0x24, 0xa3, 0x89, 0x12,
	0x6c, 0x34, 0x56, 0xa4, 0xd5, 0x73, 0x06, 0xed, 0xe1, 0x2c, 0x84, 0x1f, 0xa1, 0x7d, 0xae, 0x8d,
	0x48, 0xa9, 0xcd, 0xc9, 0xe4, 0x38, 0x33, 0x31, 0xd5, 0x31, 0xd9, 0x80, 0x7a, 0x75, 0x4b, 0xf8,
	0x18, 0x6d, 0x07, 0x5c, 0x9b, 0xc9, 0x92, 0xcc, 0x49, 0x1b, 0x7c, 0xab, 0x20, 0x1e, 0xa0, 0x9d,
	0x44, 0x7e, 0xae, 0xf8, 0x75, 0xc0, 0x6f, 0x1e, 0xc6, 0x0f, 0xd1, 0x6e, 0x2c, 0xa2, 0xb8, 0xe2,
	0x8a, 0xc0, 0x75, 0x01, 0xb7, 0x59, 0xa7, 0x2d, 0xa9, 0x5c, 0x30, 0x4e, 0x36, 0x61, 0xdb, 0xf3,
	0xb0, 0xed, 0xb2, 0x0c, 0x4b, 0x84, 0x36, 0x64, 0xab, 0xd7, 0xb0, 0x5d, 0x56, 0x40, 0xfc, 0x0c,
	0xdd, 0x2b, 0x81, 0x69, 0x06, 0xbb, 0x4d, 0x88, 0xd9, 0x86, 0x98, 0x65, 0x2e, 0xf6, 0x14, 0x4c,
	0x4e, 0x33, 0x7d, 0xce, 0x73, 0x1a, 0x24, 0x9c, 0x74, 0x81, 0xe2, 0x0a, 0x66, 0x4f, 0x38, 0x18,
	0x5f, 0xf2, 0x9c, 0xec, 0x14, 0x27, 0x0c, 0x06, 0x3e, 0x42, 0x6d, 0x93, 0x53, 0x36, 0x12, 0x59,
	0x44, 0x76, 0x21, 0xaa, 0xb4, 0xf1, 0x21, 0x6a, 0x69, 0x43, 0xcd, 0x58, 0x93, 0x3d, 0x08, 0x99,
	0x58, 0x36, 0x86, 0xc9, 0x34, 0xe5, 0x99, 0xd1, 0x04, 0x43, 0x73, 0xa5, 0x8d, 0x31, 0x6a, 0x1a,
	0x1a, 0x69, 0xb2, 0x0f, 0x38, 0x7c, 0xdb, 0xca, 0xe7, 0x89, 0x05, 0x0f, 0x80, 0xa5, 0xc2, 0xc0,
	0xf7, 0x51, 0x87, 0xc9, 0x2c, 0x14, 0x30, 0x59, 0x77, 0x60, 0x65, 0x0a, 0xe0, 0x07, 0xa8, 0x7b,
	0x3b, 0x43, 0x39, 0x8f, 0xac, 0xcb, 0x21, 0x64, 0x9c, 0x43, 0x61, 0x6e, 0x63, 0x9a, 0x8d, 0xc8,
	0x5d, 0x68, 0xbe, 0x30, 0x2c, 0xef, 0x21, 0x57, 0x52, 0x0b, 0x43, 0x53, 0x3b, 0x32, 0x84, 0x40,
	0xfe, 0x2a, 0xd8, 0xff, 0xe9, 0xa2, 0xed, 0x33, 0x1d, 0xbd, 0xb0, 0x92, 0xe0, 0x2b, 0xf4, 0x52,
	0xea, 0xc3, 0x5d, 0xa2, 0x8f, 0xc6, 0x6a, 0x7d, 0x34, 0x57, 0xeb, 0x63, 0x7d, 0x51, 0x1f, 0x95,
	0x89, 0x03, 0x11, 0x80, 0x8a, 0x2a, 0x13, 0x07, 0x70, 0xc9, 0xff, 0xc6, 0x0c, 0xff, 0x15, 0xa6,
	0xdb, 0xab, 0x99, 0xee, 0xd4, 0x32, 0xbd, 0xc0, 0x29, 0xaa, 0xe3, 0xf4, 0xbb, 0x03, 0x9c, 0xbe,
	0x57, 0xe1, 0x6a, 0x4e, 0xe7, 0xef, 0xa0, 0xff, 0x73, 0x97, 0x2c, 0xee, 0xa7, 0x5d, 0xb7, 0x9f,
	0xfe, 0x13, 0x68, 0xf4, 0x25, 0x4f, 0xf8, 0xbf, 0x36, 0xda, 0x7f, 0x8d, 0xf6, 0xcf, 0x74, 0x34,
	0xe4, 0x17, 0x9c, 0x26, 0xaf, 0xca, 0x03, 0x58, 0x92, 0xe0, 0x10, 0xb5, 0xec, 0x3d, 0x5f, 0x26,
	0x99, 0x58, 0xfd, 0x11, 0x24, 0xb2, 0xd5, 0xdf, 0xcd, 0x4a, 0xf5, 0xef, 0x89, 0xe6, 0x85, 0xee,
	0xd6, 0x08, 0x7d, 0x5a, 0xac, 0x51, 0x29, 0xf6, 0x11, 0xed, 0x4c, 0x8a, 0xbd, 0x9d, 0x30, 0xb1,
	0xa4, 0xd0, 0xec, 0xbd, 0xe0, 0x2e, 0xde, 0x0b, 0x75, 0x05, 0x9e, 0x3f, 0xfd, 0x71, 0xed, 0x39,
	0x57, 0xd7, 0x9e, 0xf3, 0xfb, 0xda, 0x73, 0xbe, 0xde, 0x78, 0x6b, 0x57, 0x37, 0xde, 0xda, 0xaf,
	0x1b, 0x6f, 0xed, 0xc3, 0x71, 0x24, 0x4c, 0x3c, 0x0e, 0x4e, 0x98, 0x4c, 0xfd, 0xf2, 0x91, 0xf3,
	0xed, 0xf3, 0xf7, 0x05, 0xfe, 0xcd, 0xa5, 0xe2, 0x3a, 0x68, 0xc1, 0xeb, 0xf5, 0xf8, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x75, 0xf1, 0xe0, 0x63, 0x18, 0x07, 0x00, 0x00,
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Depositamount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Depositamount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Thank {
		i--
		if m.Thank {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Shippingregion) > 0 {
		for iNdEx := len(m.Shippingregion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shippingregion[iNdEx])
			copy(dAtA[i:], m.Shippingregion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Shippingregion[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Flags != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Comments[iNdEx])
			copy(dAtA[i:], m.Comments[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Comments[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.Estimatorestimationhashlist) > 0 {
		for iNdEx := len(m.Estimatorestimationhashlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Estimatorestimationhashlist[iNdEx])
			copy(dAtA[i:], m.Estimatorestimationhashlist[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Estimatorestimationhashlist[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Estimatorlist) > 0 {
		for iNdEx := len(m.Estimatorlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Estimatorlist[iNdEx])
			copy(dAtA[i:], m.Estimatorlist[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Estimatorlist[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Estimationprice != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Estimationprice))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Highestestimator) > 0 {
		i -= len(m.Highestestimator)
		copy(dAtA[i:], m.Highestestimator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Highestestimator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Lowestestimator) > 0 {
		i -= len(m.Lowestestimator)
		copy(dAtA[i:], m.Lowestestimator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Lowestestimator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bestestimator) > 0 {
		i -= len(m.Bestestimator)
		copy(dAtA[i:], m.Bestestimator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Bestestimator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Estimationcounthash) > 0 {
		i -= len(m.Estimationcounthash)
		copy(dAtA[i:], m.Estimationcounthash)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Estimationcounthash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Localpickup {
		i--
		if m.Localpickup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Shippingcost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Shippingcost))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Depositamount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Depositamount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Shippingregion) > 0 {
		for iNdEx := len(m.Shippingregion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shippingregion[iNdEx])
			copy(dAtA[i:], m.Shippingregion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Shippingregion[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Condition != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Condition))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Estimationcount != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Estimationcount))
		i--
		dAtA[i] = 0x30
	}
	if m.Localpickup {
		i--
		if m.Localpickup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Shippingcost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Shippingcost))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shippingregion) > 0 {
		for iNdEx := len(m.Shippingregion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shippingregion[iNdEx])
			copy(dAtA[i:], m.Shippingregion[iNdEx])
			i = encodeVarintItem(dAtA, i, uint64(len(m.Shippingregion[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Localpickup {
		i--
		if m.Localpickup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Shippingcost != 0 {
		i = encodeVarintItem(dAtA, i, uint64(m.Shippingcost))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevealEstimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevealEstimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevealEstimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemTransferable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemTransferable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemTransferable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Transferable {
		i--
		if m.Transferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemShipping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemShipping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemShipping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Tracking {
		i--
		if m.Tracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintItem(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	offset -= sovItem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Shippingcost != 0 {
		n += 1 + sovItem(uint64(m.Shippingcost))
	}
	if m.Localpickup {
		n += 2
	}
	l = len(m.Estimationcounthash)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Bestestimator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Lowestestimator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Highestestimator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Estimationprice != 0 {
		n += 1 + sovItem(uint64(m.Estimationprice))
	}
	if len(m.Estimatorlist) > 0 {
		for _, s := range m.Estimatorlist {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if len(m.Estimatorestimationhashlist) > 0 {
		for _, s := range m.Estimatorestimationhashlist {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Transferable {
		n += 2
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 3
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovItem(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, s := range m.Comments {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if m.Flags != 0 {
		n += 2 + sovItem(uint64(m.Flags))
	}
	if m.Condition != 0 {
		n += 2 + sovItem(uint64(m.Condition))
	}
	if len(m.Shippingregion) > 0 {
		for _, s := range m.Shippingregion {
			l = len(s)
			n += 2 + l + sovItem(uint64(l))
		}
	}
	if m.Thank {
		n += 3
	}
	if m.Depositamount != 0 {
		n += 2 + sovItem(uint64(m.Depositamount))
	}
	return n
}

func (m *MsgCreateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Shippingcost != 0 {
		n += 1 + sovItem(uint64(m.Shippingcost))
	}
	if m.Localpickup {
		n += 2
	}
	if m.Estimationcount != 0 {
		n += 1 + sovItem(uint64(m.Estimationcount))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Condition != 0 {
		n += 1 + sovItem(uint64(m.Condition))
	}
	if len(m.Shippingregion) > 0 {
		for _, s := range m.Shippingregion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	if m.Depositamount != 0 {
		n += 1 + sovItem(uint64(m.Depositamount))
	}
	return n
}

func (m *MsgUpdateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Shippingcost != 0 {
		n += 1 + sovItem(uint64(m.Shippingcost))
	}
	if m.Localpickup {
		n += 2
	}
	if len(m.Shippingregion) > 0 {
		for _, s := range m.Shippingregion {
			l = len(s)
			n += 1 + l + sovItem(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgRevealEstimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgItemTransferable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Transferable {
		n += 2
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func (m *MsgItemShipping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Tracking {
		n += 2
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func sovItem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingcost", wireType)
			}
			m.Shippingcost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shippingcost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Localpickup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Localpickup = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimationcounthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimationcounthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bestestimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bestestimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lowestestimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lowestestimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highestestimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Highestestimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimationprice", wireType)
			}
			m.Estimationprice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimationprice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimatorlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimatorlist = append(m.Estimatorlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimatorestimationhashlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimatorestimationhashlist = append(m.Estimatorestimationhashlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingregion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shippingregion = append(m.Shippingregion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thank", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Thank = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositamount", wireType)
			}
			m.Depositamount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depositamount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingcost", wireType)
			}
			m.Shippingcost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shippingcost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Localpickup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Localpickup = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimationcount", wireType)
			}
			m.Estimationcount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimationcount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingregion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shippingregion = append(m.Shippingregion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositamount", wireType)
			}
			m.Depositamount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depositamount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingcost", wireType)
			}
			m.Shippingcost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shippingcost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Localpickup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Localpickup = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shippingregion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shippingregion = append(m.Shippingregion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevealEstimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevealEstimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevealEstimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemTransferable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemTransferable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemTransferable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemShipping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemShipping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemShipping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tracking = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItem = fmt.Errorf("proto: unexpected end of group")
)
