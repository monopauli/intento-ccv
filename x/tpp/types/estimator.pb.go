// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tpp/estimator.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Estimator struct {
	Estimator               string     `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid                  string     `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Estimation              int64      `protobuf:"varint,3,opt,name=estimation,proto3" json:"estimation,omitempty"`
	Estimatorestimationhash string     `protobuf:"bytes,4,opt,name=estimatorestimationhash,proto3" json:"estimatorestimationhash,omitempty"`
	Deposit                 types.Coin `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit"`
	Interested              bool       `protobuf:"varint,6,opt,name=interested,proto3" json:"interested,omitempty"`
	Comment                 string     `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Flag                    int64      `protobuf:"varint,8,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *Estimator) Reset()         { *m = Estimator{} }
func (m *Estimator) String() string { return proto.CompactTextString(m) }
func (*Estimator) ProtoMessage()    {}
func (*Estimator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef292f0ad57c1d3, []int{0}
}
func (m *Estimator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Estimator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Estimator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Estimator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Estimator.Merge(m, src)
}
func (m *Estimator) XXX_Size() int {
	return m.Size()
}
func (m *Estimator) XXX_DiscardUnknown() {
	xxx_messageInfo_Estimator.DiscardUnknown(m)
}

var xxx_messageInfo_Estimator proto.InternalMessageInfo

func (m *Estimator) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *Estimator) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *Estimator) GetEstimation() int64 {
	if m != nil {
		return m.Estimation
	}
	return 0
}

func (m *Estimator) GetEstimatorestimationhash() string {
	if m != nil {
		return m.Estimatorestimationhash
	}
	return ""
}

func (m *Estimator) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Estimator) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

func (m *Estimator) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Estimator) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type MsgCreateEstimator struct {
	Estimator  string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Estimation int64  `protobuf:"varint,2,opt,name=estimation,proto3" json:"estimation,omitempty"`
	//string estimatorestimationhash = 3;
	Itemid     string     `protobuf:"bytes,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Deposit    types.Coin `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	Interested bool       `protobuf:"varint,5,opt,name=interested,proto3" json:"interested,omitempty"`
	Comment    string     `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *MsgCreateEstimator) Reset()         { *m = MsgCreateEstimator{} }
func (m *MsgCreateEstimator) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEstimator) ProtoMessage()    {}
func (*MsgCreateEstimator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef292f0ad57c1d3, []int{1}
}
func (m *MsgCreateEstimator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEstimator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEstimator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEstimator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEstimator.Merge(m, src)
}
func (m *MsgCreateEstimator) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEstimator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEstimator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEstimator proto.InternalMessageInfo

func (m *MsgCreateEstimator) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgCreateEstimator) GetEstimation() int64 {
	if m != nil {
		return m.Estimation
	}
	return 0
}

func (m *MsgCreateEstimator) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgCreateEstimator) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *MsgCreateEstimator) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

func (m *MsgCreateEstimator) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type MsgUpdateEstimator struct {
	Estimator  string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid     string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Interested bool   `protobuf:"varint,3,opt,name=interested,proto3" json:"interested,omitempty"`
}

func (m *MsgUpdateEstimator) Reset()         { *m = MsgUpdateEstimator{} }
func (m *MsgUpdateEstimator) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEstimator) ProtoMessage()    {}
func (*MsgUpdateEstimator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef292f0ad57c1d3, []int{2}
}
func (m *MsgUpdateEstimator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEstimator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEstimator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEstimator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEstimator.Merge(m, src)
}
func (m *MsgUpdateEstimator) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEstimator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEstimator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEstimator proto.InternalMessageInfo

func (m *MsgUpdateEstimator) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgUpdateEstimator) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgUpdateEstimator) GetInterested() bool {
	if m != nil {
		return m.Interested
	}
	return false
}

type MsgDeleteEstimator struct {
	Estimator string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid    string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (m *MsgDeleteEstimator) Reset()         { *m = MsgDeleteEstimator{} }
func (m *MsgDeleteEstimator) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteEstimator) ProtoMessage()    {}
func (*MsgDeleteEstimator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef292f0ad57c1d3, []int{3}
}
func (m *MsgDeleteEstimator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteEstimator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteEstimator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteEstimator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteEstimator.Merge(m, src)
}
func (m *MsgDeleteEstimator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteEstimator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteEstimator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteEstimator proto.InternalMessageInfo

func (m *MsgDeleteEstimator) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgDeleteEstimator) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

type MsgCreateFlag struct {
	Estimator string `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	Itemid    string `protobuf:"bytes,2,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Flag      bool   `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *MsgCreateFlag) Reset()         { *m = MsgCreateFlag{} }
func (m *MsgCreateFlag) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFlag) ProtoMessage()    {}
func (*MsgCreateFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ef292f0ad57c1d3, []int{4}
}
func (m *MsgCreateFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFlag.Merge(m, src)
}
func (m *MsgCreateFlag) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFlag.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFlag proto.InternalMessageInfo

func (m *MsgCreateFlag) GetEstimator() string {
	if m != nil {
		return m.Estimator
	}
	return ""
}

func (m *MsgCreateFlag) GetItemid() string {
	if m != nil {
		return m.Itemid
	}
	return ""
}

func (m *MsgCreateFlag) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func init() {
	proto.RegisterType((*Estimator)(nil), "danieljdd.tpp.tpp.Estimator")
	proto.RegisterType((*MsgCreateEstimator)(nil), "danieljdd.tpp.tpp.MsgCreateEstimator")
	proto.RegisterType((*MsgUpdateEstimator)(nil), "danieljdd.tpp.tpp.MsgUpdateEstimator")
	proto.RegisterType((*MsgDeleteEstimator)(nil), "danieljdd.tpp.tpp.MsgDeleteEstimator")
	proto.RegisterType((*MsgCreateFlag)(nil), "danieljdd.tpp.tpp.MsgCreateFlag")
}

func init() { proto.RegisterFile("tpp/estimator.proto", fileDescriptor_1ef292f0ad57c1d3) }

var fileDescriptor_1ef292f0ad57c1d3 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xb1, 0xce, 0xd3, 0x30,
	0x10, 0xc7, 0xe3, 0x26, 0x4d, 0x5b, 0x23, 0x06, 0x0c, 0x02, 0x53, 0x21, 0x13, 0x45, 0x0c, 0x99,
	0x12, 0x15, 0x16, 0x58, 0x18, 0x5a, 0x60, 0x40, 0x62, 0x89, 0xc4, 0x00, 0x9b, 0x93, 0x98, 0xd4,
	0x55, 0x12, 0x5b, 0xb5, 0x41, 0xf0, 0x16, 0x3c, 0x04, 0x0f, 0xd3, 0xb1, 0x23, 0x13, 0xa0, 0xf6,
	0x45, 0x50, 0x9c, 0x26, 0x4d, 0x41, 0x54, 0x7c, 0x5f, 0x87, 0x44, 0xe7, 0xbb, 0xd3, 0xdd, 0xff,
	0x77, 0xf6, 0xc1, 0xdb, 0x5a, 0xca, 0x88, 0x29, 0xcd, 0x4b, 0xaa, 0xc5, 0x3a, 0x94, 0x6b, 0xa1,
	0x05, 0xba, 0x95, 0xd1, 0x8a, 0xb3, 0x62, 0x95, 0x65, 0xa1, 0x96, 0xb2, 0xfe, 0xa6, 0x77, 0x72,
	0x91, 0x0b, 0x13, 0x8d, 0x6a, 0xab, 0x49, 0x9c, 0x92, 0x54, 0xa8, 0x52, 0xa8, 0x28, 0xa1, 0x8a,
	0x45, 0x9f, 0x66, 0x09, 0xd3, 0x74, 0x16, 0xa5, 0x82, 0x57, 0x4d, 0xdc, 0xff, 0x36, 0x80, 0x93,
	0x97, 0x6d, 0x71, 0xf4, 0x00, 0x4e, 0xba, 0x4e, 0x18, 0x78, 0x20, 0x98, 0xc4, 0x47, 0x07, 0xba,
	0x0b, 0x5d, 0xae, 0x59, 0xc9, 0x33, 0x3c, 0x30, 0xa1, 0xc3, 0x09, 0x11, 0x08, 0x0f, 0x49, 0x5c,
	0x54, 0xd8, 0xf6, 0x40, 0x60, 0xc7, 0x3d, 0x0f, 0x7a, 0x0a, 0xef, 0x75, 0x45, 0x8e, 0xee, 0x25,
	0x55, 0x4b, 0xec, 0x98, 0x42, 0xff, 0x0a, 0xa3, 0x67, 0x70, 0x94, 0x31, 0x29, 0x14, 0xd7, 0x78,
	0xe8, 0x81, 0xe0, 0xc6, 0xe3, 0xfb, 0x61, 0xc3, 0x13, 0xd6, 0x3c, 0xe1, 0x81, 0x27, 0x5c, 0x08,
	0x5e, 0xcd, 0x9d, 0xcd, 0x8f, 0x87, 0x56, 0xdc, 0xe6, 0xd7, 0xa2, 0x78, 0xa5, 0x59, 0x5d, 0x91,
	0x65, 0xd8, 0xf5, 0x40, 0x30, 0x8e, 0x7b, 0x1e, 0x84, 0xe1, 0x28, 0x15, 0x65, 0xc9, 0x2a, 0x8d,
	0x47, 0x46, 0x44, 0x7b, 0x44, 0x08, 0x3a, 0x1f, 0x0a, 0x9a, 0xe3, 0xb1, 0x01, 0x31, 0xb6, 0xff,
	0x13, 0x40, 0xf4, 0x46, 0xe5, 0x8b, 0x35, 0xa3, 0x9a, 0xfd, 0xef, 0xbc, 0x4e, 0xe7, 0x32, 0xf8,
	0x6b, 0x2e, 0xc7, 0x79, 0xda, 0x27, 0xf3, 0xec, 0x51, 0x3b, 0x17, 0x51, 0x0f, 0xcf, 0x51, 0xbb,
	0x27, 0xd4, 0xfe, 0xca, 0x00, 0xbe, 0x95, 0xd9, 0x15, 0x00, 0xcf, 0x3c, 0x88, 0x9e, 0x0a, 0xfb,
	0x4f, 0x15, 0xfe, 0x6b, 0xd3, 0xeb, 0x05, 0x2b, 0xd8, 0xc5, 0xbd, 0xfc, 0x77, 0xf0, 0x66, 0x77,
	0x31, 0xaf, 0x0a, 0x9a, 0x5f, 0x53, 0x72, 0x7b, 0xe9, 0x8d, 0x58, 0x63, 0xcf, 0x9f, 0x6f, 0x76,
	0x04, 0x6c, 0x77, 0x04, 0xfc, 0xda, 0x11, 0xf0, 0x75, 0x4f, 0xac, 0xed, 0x9e, 0x58, 0xdf, 0xf7,
	0xc4, 0x7a, 0xff, 0x28, 0xe7, 0x7a, 0xf9, 0x31, 0x09, 0x53, 0x51, 0x46, 0xdd, 0x26, 0x46, 0xf5,
	0xa2, 0x7e, 0x36, 0x7f, 0xfd, 0x45, 0x32, 0x95, 0xb8, 0x66, 0xc5, 0x9e, 0xfc, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x5f, 0xf5, 0x39, 0x0c, 0xc2, 0x03, 0x00, 0x00,
}

func (m *Estimator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Estimator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Estimator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEstimator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Estimatorestimationhash) > 0 {
		i -= len(m.Estimatorestimationhash)
		copy(dAtA[i:], m.Estimatorestimationhash)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimatorestimationhash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Estimation != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Estimation))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEstimator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEstimator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEstimator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x32
	}
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEstimator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Estimation != 0 {
		i = encodeVarintEstimator(dAtA, i, uint64(m.Estimation))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEstimator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEstimator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEstimator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interested {
		i--
		if m.Interested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteEstimator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteEstimator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteEstimator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flag {
		i--
		if m.Flag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Itemid) > 0 {
		i -= len(m.Itemid)
		copy(dAtA[i:], m.Itemid)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Itemid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Estimator) > 0 {
		i -= len(m.Estimator)
		copy(dAtA[i:], m.Estimator)
		i = encodeVarintEstimator(dAtA, i, uint64(len(m.Estimator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEstimator(dAtA []byte, offset int, v uint64) int {
	offset -= sovEstimator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Estimator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Estimation != 0 {
		n += 1 + sovEstimator(uint64(m.Estimation))
	}
	l = len(m.Estimatorestimationhash)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovEstimator(uint64(l))
	if m.Interested {
		n += 2
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovEstimator(uint64(m.Flag))
	}
	return n
}

func (m *MsgCreateEstimator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Estimation != 0 {
		n += 1 + sovEstimator(uint64(m.Estimation))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovEstimator(uint64(l))
	if m.Interested {
		n += 2
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	return n
}

func (m *MsgUpdateEstimator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Interested {
		n += 2
	}
	return n
}

func (m *MsgDeleteEstimator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	return n
}

func (m *MsgCreateFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Estimator)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	l = len(m.Itemid)
	if l > 0 {
		n += 1 + l + sovEstimator(uint64(l))
	}
	if m.Flag {
		n += 2
	}
	return n
}

func sovEstimator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEstimator(x uint64) (n int) {
	return sovEstimator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Estimator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Estimator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Estimator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimation", wireType)
			}
			m.Estimation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimatorestimationhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimatorestimationhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEstimator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEstimator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEstimator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimation", wireType)
			}
			m.Estimation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEstimator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEstimator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEstimator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interested = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteEstimator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteEstimator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteEstimator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Estimator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEstimator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEstimator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEstimator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEstimator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEstimator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEstimator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEstimator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEstimator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEstimator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEstimator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEstimator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEstimator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEstimator = fmt.Errorf("proto: unexpected end of group")
)
