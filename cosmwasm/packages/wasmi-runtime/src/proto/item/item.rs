// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `item.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Item {
    // message fields
    pub seller: ::std::string::String,
    pub id: u64,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub shippingcost: i64,
    pub localpickup: ::std::string::String,
    pub estimationcount: i64,
    pub bestestimator: ::std::string::String,
    pub lowestestimator: ::std::string::String,
    pub highestestimator: ::std::string::String,
    pub estimationprice: i64,
    pub estimatorlist: ::protobuf::RepeatedField<::std::string::String>,
    pub estimationlist: ::std::vec::Vec<i64>,
    pub transferable: bool,
    pub buyer: ::std::string::String,
    pub tracking: bool,
    pub status: ::std::string::String,
    pub comments: ::protobuf::RepeatedField<::std::string::String>,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub flags: i64,
    pub condition: i64,
    pub shippingregion: ::protobuf::RepeatedField<::std::string::String>,
    pub rating: i64,
    pub depositamount: i64,
    pub creator: ::std::string::String,
    pub note: ::std::string::String,
    pub discount: i64,
    pub submittime: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub endtime: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub contract: ::std::string::String,
    pub estimationtotal: i64,
    pub photos: ::protobuf::RepeatedField<::std::string::String>,
    pub is_token: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Item {
    fn default() -> &'a Item {
        <Item as ::protobuf::Message>::default_instance()
    }
}

impl Item {
    pub fn new() -> Item {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // string title = 3;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // int64 shippingcost = 5;


    pub fn get_shippingcost(&self) -> i64 {
        self.shippingcost
    }
    pub fn clear_shippingcost(&mut self) {
        self.shippingcost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shippingcost(&mut self, v: i64) {
        self.shippingcost = v;
    }

    // string localpickup = 6;


    pub fn get_localpickup(&self) -> &str {
        &self.localpickup
    }
    pub fn clear_localpickup(&mut self) {
        self.localpickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_localpickup(&mut self, v: ::std::string::String) {
        self.localpickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localpickup(&mut self) -> &mut ::std::string::String {
        &mut self.localpickup
    }

    // Take field
    pub fn take_localpickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.localpickup, ::std::string::String::new())
    }

    // int64 estimationcount = 7;


    pub fn get_estimationcount(&self) -> i64 {
        self.estimationcount
    }
    pub fn clear_estimationcount(&mut self) {
        self.estimationcount = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimationcount(&mut self, v: i64) {
        self.estimationcount = v;
    }

    // string bestestimator = 8;


    pub fn get_bestestimator(&self) -> &str {
        &self.bestestimator
    }
    pub fn clear_bestestimator(&mut self) {
        self.bestestimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_bestestimator(&mut self, v: ::std::string::String) {
        self.bestestimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bestestimator(&mut self) -> &mut ::std::string::String {
        &mut self.bestestimator
    }

    // Take field
    pub fn take_bestestimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bestestimator, ::std::string::String::new())
    }

    // string lowestestimator = 9;


    pub fn get_lowestestimator(&self) -> &str {
        &self.lowestestimator
    }
    pub fn clear_lowestestimator(&mut self) {
        self.lowestestimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_lowestestimator(&mut self, v: ::std::string::String) {
        self.lowestestimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lowestestimator(&mut self) -> &mut ::std::string::String {
        &mut self.lowestestimator
    }

    // Take field
    pub fn take_lowestestimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lowestestimator, ::std::string::String::new())
    }

    // string highestestimator = 10;


    pub fn get_highestestimator(&self) -> &str {
        &self.highestestimator
    }
    pub fn clear_highestestimator(&mut self) {
        self.highestestimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_highestestimator(&mut self, v: ::std::string::String) {
        self.highestestimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_highestestimator(&mut self) -> &mut ::std::string::String {
        &mut self.highestestimator
    }

    // Take field
    pub fn take_highestestimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.highestestimator, ::std::string::String::new())
    }

    // int64 estimationprice = 11;


    pub fn get_estimationprice(&self) -> i64 {
        self.estimationprice
    }
    pub fn clear_estimationprice(&mut self) {
        self.estimationprice = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimationprice(&mut self, v: i64) {
        self.estimationprice = v;
    }

    // repeated string estimatorlist = 12;


    pub fn get_estimatorlist(&self) -> &[::std::string::String] {
        &self.estimatorlist
    }
    pub fn clear_estimatorlist(&mut self) {
        self.estimatorlist.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimatorlist(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.estimatorlist = v;
    }

    // Mutable pointer to the field.
    pub fn mut_estimatorlist(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.estimatorlist
    }

    // Take field
    pub fn take_estimatorlist(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.estimatorlist, ::protobuf::RepeatedField::new())
    }

    // repeated int64 estimationlist = 13;


    pub fn get_estimationlist(&self) -> &[i64] {
        &self.estimationlist
    }
    pub fn clear_estimationlist(&mut self) {
        self.estimationlist.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimationlist(&mut self, v: ::std::vec::Vec<i64>) {
        self.estimationlist = v;
    }

    // Mutable pointer to the field.
    pub fn mut_estimationlist(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.estimationlist
    }

    // Take field
    pub fn take_estimationlist(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.estimationlist, ::std::vec::Vec::new())
    }

    // bool transferable = 14;


    pub fn get_transferable(&self) -> bool {
        self.transferable
    }
    pub fn clear_transferable(&mut self) {
        self.transferable = false;
    }

    // Param is passed by value, moved
    pub fn set_transferable(&mut self, v: bool) {
        self.transferable = v;
    }

    // string buyer = 15;


    pub fn get_buyer(&self) -> &str {
        &self.buyer
    }
    pub fn clear_buyer(&mut self) {
        self.buyer.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer(&mut self, v: ::std::string::String) {
        self.buyer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer(&mut self) -> &mut ::std::string::String {
        &mut self.buyer
    }

    // Take field
    pub fn take_buyer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer, ::std::string::String::new())
    }

    // bool tracking = 16;


    pub fn get_tracking(&self) -> bool {
        self.tracking
    }
    pub fn clear_tracking(&mut self) {
        self.tracking = false;
    }

    // Param is passed by value, moved
    pub fn set_tracking(&mut self, v: bool) {
        self.tracking = v;
    }

    // string status = 17;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // repeated string comments = 18;


    pub fn get_comments(&self) -> &[::std::string::String] {
        &self.comments
    }
    pub fn clear_comments(&mut self) {
        self.comments.clear();
    }

    // Param is passed by value, moved
    pub fn set_comments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.comments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_comments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.comments
    }

    // Take field
    pub fn take_comments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.comments, ::protobuf::RepeatedField::new())
    }

    // repeated string tags = 19;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // int64 flags = 20;


    pub fn get_flags(&self) -> i64 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: i64) {
        self.flags = v;
    }

    // int64 condition = 21;


    pub fn get_condition(&self) -> i64 {
        self.condition
    }
    pub fn clear_condition(&mut self) {
        self.condition = 0;
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: i64) {
        self.condition = v;
    }

    // repeated string shippingregion = 22;


    pub fn get_shippingregion(&self) -> &[::std::string::String] {
        &self.shippingregion
    }
    pub fn clear_shippingregion(&mut self) {
        self.shippingregion.clear();
    }

    // Param is passed by value, moved
    pub fn set_shippingregion(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shippingregion = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shippingregion(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shippingregion
    }

    // Take field
    pub fn take_shippingregion(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shippingregion, ::protobuf::RepeatedField::new())
    }

    // int64 rating = 23;


    pub fn get_rating(&self) -> i64 {
        self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating = 0;
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: i64) {
        self.rating = v;
    }

    // int64 depositamount = 24;


    pub fn get_depositamount(&self) -> i64 {
        self.depositamount
    }
    pub fn clear_depositamount(&mut self) {
        self.depositamount = 0;
    }

    // Param is passed by value, moved
    pub fn set_depositamount(&mut self, v: i64) {
        self.depositamount = v;
    }

    // string creator = 25;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // string note = 26;


    pub fn get_note(&self) -> &str {
        &self.note
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        &mut self.note
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note, ::std::string::String::new())
    }

    // int64 discount = 27;


    pub fn get_discount(&self) -> i64 {
        self.discount
    }
    pub fn clear_discount(&mut self) {
        self.discount = 0;
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: i64) {
        self.discount = v;
    }

    // .google.protobuf.Timestamp submittime = 28;


    pub fn get_submittime(&self) -> &::protobuf::well_known_types::Timestamp {
        self.submittime.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_submittime(&mut self) {
        self.submittime.clear();
    }

    pub fn has_submittime(&self) -> bool {
        self.submittime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_submittime(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.submittime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_submittime(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.submittime.is_none() {
            self.submittime.set_default();
        }
        self.submittime.as_mut().unwrap()
    }

    // Take field
    pub fn take_submittime(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.submittime.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp endtime = 29;


    pub fn get_endtime(&self) -> &::protobuf::well_known_types::Timestamp {
        self.endtime.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_endtime(&mut self) {
        self.endtime.clear();
    }

    pub fn has_endtime(&self) -> bool {
        self.endtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endtime(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.endtime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endtime(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.endtime.is_none() {
            self.endtime.set_default();
        }
        self.endtime.as_mut().unwrap()
    }

    // Take field
    pub fn take_endtime(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.endtime.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string contract = 30;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // int64 estimationtotal = 31;


    pub fn get_estimationtotal(&self) -> i64 {
        self.estimationtotal
    }
    pub fn clear_estimationtotal(&mut self) {
        self.estimationtotal = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimationtotal(&mut self, v: i64) {
        self.estimationtotal = v;
    }

    // repeated string photos = 32;


    pub fn get_photos(&self) -> &[::std::string::String] {
        &self.photos
    }
    pub fn clear_photos(&mut self) {
        self.photos.clear();
    }

    // Param is passed by value, moved
    pub fn set_photos(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.photos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_photos(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.photos
    }

    // Take field
    pub fn take_photos(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.photos, ::protobuf::RepeatedField::new())
    }

    // bool is_token = 33;


    pub fn get_is_token(&self) -> bool {
        self.is_token
    }
    pub fn clear_is_token(&mut self) {
        self.is_token = false;
    }

    // Param is passed by value, moved
    pub fn set_is_token(&mut self, v: bool) {
        self.is_token = v;
    }
}

impl ::protobuf::Message for Item {
    fn is_initialized(&self) -> bool {
        for v in &self.submittime {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.endtime {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shippingcost = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.localpickup)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimationcount = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bestestimator)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lowestestimator)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.highestestimator)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimationprice = tmp;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.estimatorlist)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.estimationlist)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.transferable = tmp;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tracking = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                18 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.comments)?;
                },
                19 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.flags = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.condition = tmp;
                },
                22 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shippingregion)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rating = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.depositamount = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.discount = tmp;
                },
                28 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.submittime)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endtime)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimationtotal = tmp;
                },
                32 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.photos)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_token = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        if self.shippingcost != 0 {
            my_size += ::protobuf::rt::value_size(5, self.shippingcost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.localpickup.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.localpickup);
        }
        if self.estimationcount != 0 {
            my_size += ::protobuf::rt::value_size(7, self.estimationcount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bestestimator.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.bestestimator);
        }
        if !self.lowestestimator.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.lowestestimator);
        }
        if !self.highestestimator.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.highestestimator);
        }
        if self.estimationprice != 0 {
            my_size += ::protobuf::rt::value_size(11, self.estimationprice, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.estimatorlist {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        for value in &self.estimationlist {
            my_size += ::protobuf::rt::value_size(13, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.transferable != false {
            my_size += 2;
        }
        if !self.buyer.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.buyer);
        }
        if self.tracking != false {
            my_size += 3;
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.status);
        }
        for value in &self.comments {
            my_size += ::protobuf::rt::string_size(18, &value);
        };
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(19, &value);
        };
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(20, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.condition != 0 {
            my_size += ::protobuf::rt::value_size(21, self.condition, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shippingregion {
            my_size += ::protobuf::rt::string_size(22, &value);
        };
        if self.rating != 0 {
            my_size += ::protobuf::rt::value_size(23, self.rating, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.depositamount != 0 {
            my_size += ::protobuf::rt::value_size(24, self.depositamount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(25, &self.creator);
        }
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(26, &self.note);
        }
        if self.discount != 0 {
            my_size += ::protobuf::rt::value_size(27, self.discount, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.submittime.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.endtime.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(30, &self.contract);
        }
        if self.estimationtotal != 0 {
            my_size += ::protobuf::rt::value_size(31, self.estimationtotal, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.photos {
            my_size += ::protobuf::rt::string_size(32, &value);
        };
        if self.is_token != false {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(3, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        if self.shippingcost != 0 {
            os.write_int64(5, self.shippingcost)?;
        }
        if !self.localpickup.is_empty() {
            os.write_string(6, &self.localpickup)?;
        }
        if self.estimationcount != 0 {
            os.write_int64(7, self.estimationcount)?;
        }
        if !self.bestestimator.is_empty() {
            os.write_string(8, &self.bestestimator)?;
        }
        if !self.lowestestimator.is_empty() {
            os.write_string(9, &self.lowestestimator)?;
        }
        if !self.highestestimator.is_empty() {
            os.write_string(10, &self.highestestimator)?;
        }
        if self.estimationprice != 0 {
            os.write_int64(11, self.estimationprice)?;
        }
        for v in &self.estimatorlist {
            os.write_string(12, &v)?;
        };
        for v in &self.estimationlist {
            os.write_int64(13, *v)?;
        };
        if self.transferable != false {
            os.write_bool(14, self.transferable)?;
        }
        if !self.buyer.is_empty() {
            os.write_string(15, &self.buyer)?;
        }
        if self.tracking != false {
            os.write_bool(16, self.tracking)?;
        }
        if !self.status.is_empty() {
            os.write_string(17, &self.status)?;
        }
        for v in &self.comments {
            os.write_string(18, &v)?;
        };
        for v in &self.tags {
            os.write_string(19, &v)?;
        };
        if self.flags != 0 {
            os.write_int64(20, self.flags)?;
        }
        if self.condition != 0 {
            os.write_int64(21, self.condition)?;
        }
        for v in &self.shippingregion {
            os.write_string(22, &v)?;
        };
        if self.rating != 0 {
            os.write_int64(23, self.rating)?;
        }
        if self.depositamount != 0 {
            os.write_int64(24, self.depositamount)?;
        }
        if !self.creator.is_empty() {
            os.write_string(25, &self.creator)?;
        }
        if !self.note.is_empty() {
            os.write_string(26, &self.note)?;
        }
        if self.discount != 0 {
            os.write_int64(27, self.discount)?;
        }
        if let Some(ref v) = self.submittime.as_ref() {
            os.write_tag(28, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.endtime.as_ref() {
            os.write_tag(29, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.contract.is_empty() {
            os.write_string(30, &self.contract)?;
        }
        if self.estimationtotal != 0 {
            os.write_int64(31, self.estimationtotal)?;
        }
        for v in &self.photos {
            os.write_string(32, &v)?;
        };
        if self.is_token != false {
            os.write_bool(33, self.is_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Item {
        Item::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &Item| { &m.seller },
                |m: &mut Item| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Item| { &m.id },
                |m: &mut Item| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Item| { &m.title },
                |m: &mut Item| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Item| { &m.description },
                |m: &mut Item| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shippingcost",
                |m: &Item| { &m.shippingcost },
                |m: &mut Item| { &mut m.shippingcost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localpickup",
                |m: &Item| { &m.localpickup },
                |m: &mut Item| { &mut m.localpickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimationcount",
                |m: &Item| { &m.estimationcount },
                |m: &mut Item| { &mut m.estimationcount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bestestimator",
                |m: &Item| { &m.bestestimator },
                |m: &mut Item| { &mut m.bestestimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lowestestimator",
                |m: &Item| { &m.lowestestimator },
                |m: &mut Item| { &mut m.lowestestimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "highestestimator",
                |m: &Item| { &m.highestestimator },
                |m: &mut Item| { &mut m.highestestimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimationprice",
                |m: &Item| { &m.estimationprice },
                |m: &mut Item| { &mut m.estimationprice },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimatorlist",
                |m: &Item| { &m.estimatorlist },
                |m: &mut Item| { &mut m.estimatorlist },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimationlist",
                |m: &Item| { &m.estimationlist },
                |m: &mut Item| { &mut m.estimationlist },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "transferable",
                |m: &Item| { &m.transferable },
                |m: &mut Item| { &mut m.transferable },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer",
                |m: &Item| { &m.buyer },
                |m: &mut Item| { &mut m.buyer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tracking",
                |m: &Item| { &m.tracking },
                |m: &mut Item| { &mut m.tracking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &Item| { &m.status },
                |m: &mut Item| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comments",
                |m: &Item| { &m.comments },
                |m: &mut Item| { &mut m.comments },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &Item| { &m.tags },
                |m: &mut Item| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "flags",
                |m: &Item| { &m.flags },
                |m: &mut Item| { &mut m.flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "condition",
                |m: &Item| { &m.condition },
                |m: &mut Item| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shippingregion",
                |m: &Item| { &m.shippingregion },
                |m: &mut Item| { &mut m.shippingregion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rating",
                |m: &Item| { &m.rating },
                |m: &mut Item| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "depositamount",
                |m: &Item| { &m.depositamount },
                |m: &mut Item| { &mut m.depositamount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &Item| { &m.creator },
                |m: &mut Item| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "note",
                |m: &Item| { &m.note },
                |m: &mut Item| { &mut m.note },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "discount",
                |m: &Item| { &m.discount },
                |m: &mut Item| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "submittime",
                |m: &Item| { &m.submittime },
                |m: &mut Item| { &mut m.submittime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "endtime",
                |m: &Item| { &m.endtime },
                |m: &mut Item| { &mut m.endtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &Item| { &m.contract },
                |m: &mut Item| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimationtotal",
                |m: &Item| { &m.estimationtotal },
                |m: &mut Item| { &mut m.estimationtotal },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photos",
                |m: &Item| { &m.photos },
                |m: &mut Item| { &mut m.photos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_token",
                |m: &Item| { &m.is_token },
                |m: &mut Item| { &mut m.is_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Item>(
                "Item",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Item {
        static instance: ::protobuf::rt::LazyV2<Item> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Item::new)
    }
}

impl ::protobuf::Clear for Item {
    fn clear(&mut self) {
        self.seller.clear();
        self.id = 0;
        self.title.clear();
        self.description.clear();
        self.shippingcost = 0;
        self.localpickup.clear();
        self.estimationcount = 0;
        self.bestestimator.clear();
        self.lowestestimator.clear();
        self.highestestimator.clear();
        self.estimationprice = 0;
        self.estimatorlist.clear();
        self.estimationlist.clear();
        self.transferable = false;
        self.buyer.clear();
        self.tracking = false;
        self.status.clear();
        self.comments.clear();
        self.tags.clear();
        self.flags = 0;
        self.condition = 0;
        self.shippingregion.clear();
        self.rating = 0;
        self.depositamount = 0;
        self.creator.clear();
        self.note.clear();
        self.discount = 0;
        self.submittime.clear();
        self.endtime.clear();
        self.contract.clear();
        self.estimationtotal = 0;
        self.photos.clear();
        self.is_token = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Item {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateItem {
    // message fields
    pub creator: ::std::string::String,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub shippingcost: i64,
    pub localpickup: ::std::string::String,
    pub estimationcount: i64,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub condition: i64,
    pub shippingregion: ::protobuf::RepeatedField<::std::string::String>,
    pub depositamount: i64,
    pub initmsg: ::std::vec::Vec<u8>,
    pub photos: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateItem {
    fn default() -> &'a MsgCreateItem {
        <MsgCreateItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateItem {
    pub fn new() -> MsgCreateItem {
        ::std::default::Default::default()
    }

    // string creator = 1;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // int64 shippingcost = 4;


    pub fn get_shippingcost(&self) -> i64 {
        self.shippingcost
    }
    pub fn clear_shippingcost(&mut self) {
        self.shippingcost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shippingcost(&mut self, v: i64) {
        self.shippingcost = v;
    }

    // string localpickup = 5;


    pub fn get_localpickup(&self) -> &str {
        &self.localpickup
    }
    pub fn clear_localpickup(&mut self) {
        self.localpickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_localpickup(&mut self, v: ::std::string::String) {
        self.localpickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localpickup(&mut self) -> &mut ::std::string::String {
        &mut self.localpickup
    }

    // Take field
    pub fn take_localpickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.localpickup, ::std::string::String::new())
    }

    // int64 estimationcount = 6;


    pub fn get_estimationcount(&self) -> i64 {
        self.estimationcount
    }
    pub fn clear_estimationcount(&mut self) {
        self.estimationcount = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimationcount(&mut self, v: i64) {
        self.estimationcount = v;
    }

    // repeated string tags = 7;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // int64 condition = 8;


    pub fn get_condition(&self) -> i64 {
        self.condition
    }
    pub fn clear_condition(&mut self) {
        self.condition = 0;
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: i64) {
        self.condition = v;
    }

    // repeated string shippingregion = 9;


    pub fn get_shippingregion(&self) -> &[::std::string::String] {
        &self.shippingregion
    }
    pub fn clear_shippingregion(&mut self) {
        self.shippingregion.clear();
    }

    // Param is passed by value, moved
    pub fn set_shippingregion(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shippingregion = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shippingregion(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shippingregion
    }

    // Take field
    pub fn take_shippingregion(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shippingregion, ::protobuf::RepeatedField::new())
    }

    // int64 depositamount = 10;


    pub fn get_depositamount(&self) -> i64 {
        self.depositamount
    }
    pub fn clear_depositamount(&mut self) {
        self.depositamount = 0;
    }

    // Param is passed by value, moved
    pub fn set_depositamount(&mut self, v: i64) {
        self.depositamount = v;
    }

    // bytes initmsg = 11;


    pub fn get_initmsg(&self) -> &[u8] {
        &self.initmsg
    }
    pub fn clear_initmsg(&mut self) {
        self.initmsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_initmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.initmsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.initmsg
    }

    // Take field
    pub fn take_initmsg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.initmsg, ::std::vec::Vec::new())
    }

    // repeated string photos = 12;


    pub fn get_photos(&self) -> &[::std::string::String] {
        &self.photos
    }
    pub fn clear_photos(&mut self) {
        self.photos.clear();
    }

    // Param is passed by value, moved
    pub fn set_photos(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.photos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_photos(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.photos
    }

    // Take field
    pub fn take_photos(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.photos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgCreateItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shippingcost = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.localpickup)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimationcount = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.condition = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shippingregion)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.depositamount = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.initmsg)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.photos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.shippingcost != 0 {
            my_size += ::protobuf::rt::value_size(4, self.shippingcost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.localpickup.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.localpickup);
        }
        if self.estimationcount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.estimationcount, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if self.condition != 0 {
            my_size += ::protobuf::rt::value_size(8, self.condition, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shippingregion {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if self.depositamount != 0 {
            my_size += ::protobuf::rt::value_size(10, self.depositamount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.initmsg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.initmsg);
        }
        for value in &self.photos {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.shippingcost != 0 {
            os.write_int64(4, self.shippingcost)?;
        }
        if !self.localpickup.is_empty() {
            os.write_string(5, &self.localpickup)?;
        }
        if self.estimationcount != 0 {
            os.write_int64(6, self.estimationcount)?;
        }
        for v in &self.tags {
            os.write_string(7, &v)?;
        };
        if self.condition != 0 {
            os.write_int64(8, self.condition)?;
        }
        for v in &self.shippingregion {
            os.write_string(9, &v)?;
        };
        if self.depositamount != 0 {
            os.write_int64(10, self.depositamount)?;
        }
        if !self.initmsg.is_empty() {
            os.write_bytes(11, &self.initmsg)?;
        }
        for v in &self.photos {
            os.write_string(12, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateItem {
        MsgCreateItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &MsgCreateItem| { &m.creator },
                |m: &mut MsgCreateItem| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &MsgCreateItem| { &m.title },
                |m: &mut MsgCreateItem| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &MsgCreateItem| { &m.description },
                |m: &mut MsgCreateItem| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shippingcost",
                |m: &MsgCreateItem| { &m.shippingcost },
                |m: &mut MsgCreateItem| { &mut m.shippingcost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localpickup",
                |m: &MsgCreateItem| { &m.localpickup },
                |m: &mut MsgCreateItem| { &mut m.localpickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimationcount",
                |m: &MsgCreateItem| { &m.estimationcount },
                |m: &mut MsgCreateItem| { &mut m.estimationcount },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &MsgCreateItem| { &m.tags },
                |m: &mut MsgCreateItem| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "condition",
                |m: &MsgCreateItem| { &m.condition },
                |m: &mut MsgCreateItem| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shippingregion",
                |m: &MsgCreateItem| { &m.shippingregion },
                |m: &mut MsgCreateItem| { &mut m.shippingregion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "depositamount",
                |m: &MsgCreateItem| { &m.depositamount },
                |m: &mut MsgCreateItem| { &mut m.depositamount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "initmsg",
                |m: &MsgCreateItem| { &m.initmsg },
                |m: &mut MsgCreateItem| { &mut m.initmsg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photos",
                |m: &MsgCreateItem| { &m.photos },
                |m: &mut MsgCreateItem| { &mut m.photos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateItem>(
                "MsgCreateItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateItem {
        static instance: ::protobuf::rt::LazyV2<MsgCreateItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateItem::new)
    }
}

impl ::protobuf::Clear for MsgCreateItem {
    fn clear(&mut self) {
        self.creator.clear();
        self.title.clear();
        self.description.clear();
        self.shippingcost = 0;
        self.localpickup.clear();
        self.estimationcount = 0;
        self.tags.clear();
        self.condition = 0;
        self.shippingregion.clear();
        self.depositamount = 0;
        self.initmsg.clear();
        self.photos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUpdateItem {
    // message fields
    pub seller: ::std::string::String,
    pub id: u64,
    pub shippingcost: i64,
    pub localpickup: ::std::string::String,
    pub shippingregion: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateItem {
    fn default() -> &'a MsgUpdateItem {
        <MsgUpdateItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateItem {
    pub fn new() -> MsgUpdateItem {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // int64 shippingcost = 3;


    pub fn get_shippingcost(&self) -> i64 {
        self.shippingcost
    }
    pub fn clear_shippingcost(&mut self) {
        self.shippingcost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shippingcost(&mut self, v: i64) {
        self.shippingcost = v;
    }

    // string localpickup = 4;


    pub fn get_localpickup(&self) -> &str {
        &self.localpickup
    }
    pub fn clear_localpickup(&mut self) {
        self.localpickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_localpickup(&mut self, v: ::std::string::String) {
        self.localpickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localpickup(&mut self) -> &mut ::std::string::String {
        &mut self.localpickup
    }

    // Take field
    pub fn take_localpickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.localpickup, ::std::string::String::new())
    }

    // repeated string shippingregion = 5;


    pub fn get_shippingregion(&self) -> &[::std::string::String] {
        &self.shippingregion
    }
    pub fn clear_shippingregion(&mut self) {
        self.shippingregion.clear();
    }

    // Param is passed by value, moved
    pub fn set_shippingregion(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shippingregion = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shippingregion(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shippingregion
    }

    // Take field
    pub fn take_shippingregion(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shippingregion, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgUpdateItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shippingcost = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.localpickup)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shippingregion)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shippingcost != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shippingcost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.localpickup.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.localpickup);
        }
        for value in &self.shippingregion {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        if self.shippingcost != 0 {
            os.write_int64(3, self.shippingcost)?;
        }
        if !self.localpickup.is_empty() {
            os.write_string(4, &self.localpickup)?;
        }
        for v in &self.shippingregion {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateItem {
        MsgUpdateItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgUpdateItem| { &m.seller },
                |m: &mut MsgUpdateItem| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgUpdateItem| { &m.id },
                |m: &mut MsgUpdateItem| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shippingcost",
                |m: &MsgUpdateItem| { &m.shippingcost },
                |m: &mut MsgUpdateItem| { &mut m.shippingcost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localpickup",
                |m: &MsgUpdateItem| { &m.localpickup },
                |m: &mut MsgUpdateItem| { &mut m.localpickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shippingregion",
                |m: &MsgUpdateItem| { &m.shippingregion },
                |m: &mut MsgUpdateItem| { &mut m.shippingregion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUpdateItem>(
                "MsgUpdateItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUpdateItem {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateItem::new)
    }
}

impl ::protobuf::Clear for MsgUpdateItem {
    fn clear(&mut self) {
        self.seller.clear();
        self.id = 0;
        self.shippingcost = 0;
        self.localpickup.clear();
        self.shippingregion.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUpdateItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDeleteItem {
    // message fields
    pub seller: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDeleteItem {
    fn default() -> &'a MsgDeleteItem {
        <MsgDeleteItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeleteItem {
    pub fn new() -> MsgDeleteItem {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgDeleteItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDeleteItem {
        MsgDeleteItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgDeleteItem| { &m.seller },
                |m: &mut MsgDeleteItem| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgDeleteItem| { &m.id },
                |m: &mut MsgDeleteItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDeleteItem>(
                "MsgDeleteItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDeleteItem {
        static instance: ::protobuf::rt::LazyV2<MsgDeleteItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDeleteItem::new)
    }
}

impl ::protobuf::Clear for MsgDeleteItem {
    fn clear(&mut self) {
        self.seller.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDeleteItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeleteItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRevealEstimation {
    // message fields
    pub creator: ::std::string::String,
    pub itemid: u64,
    pub revealmsg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRevealEstimation {
    fn default() -> &'a MsgRevealEstimation {
        <MsgRevealEstimation as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevealEstimation {
    pub fn new() -> MsgRevealEstimation {
        ::std::default::Default::default()
    }

    // string creator = 1;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // bytes revealmsg = 3;


    pub fn get_revealmsg(&self) -> &[u8] {
        &self.revealmsg
    }
    pub fn clear_revealmsg(&mut self) {
        self.revealmsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_revealmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.revealmsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revealmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.revealmsg
    }

    // Take field
    pub fn take_revealmsg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.revealmsg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgRevealEstimation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.revealmsg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.revealmsg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.revealmsg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if !self.revealmsg.is_empty() {
            os.write_bytes(3, &self.revealmsg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRevealEstimation {
        MsgRevealEstimation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &MsgRevealEstimation| { &m.creator },
                |m: &mut MsgRevealEstimation| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgRevealEstimation| { &m.itemid },
                |m: &mut MsgRevealEstimation| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "revealmsg",
                |m: &MsgRevealEstimation| { &m.revealmsg },
                |m: &mut MsgRevealEstimation| { &mut m.revealmsg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRevealEstimation>(
                "MsgRevealEstimation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRevealEstimation {
        static instance: ::protobuf::rt::LazyV2<MsgRevealEstimation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRevealEstimation::new)
    }
}

impl ::protobuf::Clear for MsgRevealEstimation {
    fn clear(&mut self) {
        self.creator.clear();
        self.itemid = 0;
        self.revealmsg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRevealEstimation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevealEstimation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemTransferable {
    // message fields
    pub seller: ::std::string::String,
    pub transferable: bool,
    pub itemid: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemTransferable {
    fn default() -> &'a MsgItemTransferable {
        <MsgItemTransferable as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemTransferable {
    pub fn new() -> MsgItemTransferable {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // bool transferable = 2;


    pub fn get_transferable(&self) -> bool {
        self.transferable
    }
    pub fn clear_transferable(&mut self) {
        self.transferable = false;
    }

    // Param is passed by value, moved
    pub fn set_transferable(&mut self, v: bool) {
        self.transferable = v;
    }

    // uint64 itemid = 3;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }
}

impl ::protobuf::Message for MsgItemTransferable {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.transferable = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.transferable != false {
            my_size += 2;
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.transferable != false {
            os.write_bool(2, self.transferable)?;
        }
        if self.itemid != 0 {
            os.write_uint64(3, self.itemid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemTransferable {
        MsgItemTransferable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemTransferable| { &m.seller },
                |m: &mut MsgItemTransferable| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "transferable",
                |m: &MsgItemTransferable| { &m.transferable },
                |m: &mut MsgItemTransferable| { &mut m.transferable },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemTransferable| { &m.itemid },
                |m: &mut MsgItemTransferable| { &mut m.itemid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemTransferable>(
                "MsgItemTransferable",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemTransferable {
        static instance: ::protobuf::rt::LazyV2<MsgItemTransferable> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemTransferable::new)
    }
}

impl ::protobuf::Clear for MsgItemTransferable {
    fn clear(&mut self) {
        self.seller.clear();
        self.transferable = false;
        self.itemid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemTransferable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemTransferable {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemShipping {
    // message fields
    pub seller: ::std::string::String,
    pub tracking: bool,
    pub itemid: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemShipping {
    fn default() -> &'a MsgItemShipping {
        <MsgItemShipping as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemShipping {
    pub fn new() -> MsgItemShipping {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // bool tracking = 2;


    pub fn get_tracking(&self) -> bool {
        self.tracking
    }
    pub fn clear_tracking(&mut self) {
        self.tracking = false;
    }

    // Param is passed by value, moved
    pub fn set_tracking(&mut self, v: bool) {
        self.tracking = v;
    }

    // uint64 itemid = 3;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }
}

impl ::protobuf::Message for MsgItemShipping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tracking = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.tracking != false {
            my_size += 2;
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.tracking != false {
            os.write_bool(2, self.tracking)?;
        }
        if self.itemid != 0 {
            os.write_uint64(3, self.itemid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemShipping {
        MsgItemShipping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemShipping| { &m.seller },
                |m: &mut MsgItemShipping| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tracking",
                |m: &MsgItemShipping| { &m.tracking },
                |m: &mut MsgItemShipping| { &mut m.tracking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemShipping| { &m.itemid },
                |m: &mut MsgItemShipping| { &mut m.itemid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemShipping>(
                "MsgItemShipping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemShipping {
        static instance: ::protobuf::rt::LazyV2<MsgItemShipping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemShipping::new)
    }
}

impl ::protobuf::Clear for MsgItemShipping {
    fn clear(&mut self) {
        self.seller.clear();
        self.tracking = false;
        self.itemid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemShipping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemShipping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemResell {
    // message fields
    pub seller: ::std::string::String,
    pub itemid: u64,
    pub shippingcost: i64,
    pub discount: i64,
    pub localpickup: ::std::string::String,
    pub shippingregion: ::protobuf::RepeatedField<::std::string::String>,
    pub note: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemResell {
    fn default() -> &'a MsgItemResell {
        <MsgItemResell as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemResell {
    pub fn new() -> MsgItemResell {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // int64 shippingcost = 3;


    pub fn get_shippingcost(&self) -> i64 {
        self.shippingcost
    }
    pub fn clear_shippingcost(&mut self) {
        self.shippingcost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shippingcost(&mut self, v: i64) {
        self.shippingcost = v;
    }

    // int64 discount = 4;


    pub fn get_discount(&self) -> i64 {
        self.discount
    }
    pub fn clear_discount(&mut self) {
        self.discount = 0;
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: i64) {
        self.discount = v;
    }

    // string localpickup = 5;


    pub fn get_localpickup(&self) -> &str {
        &self.localpickup
    }
    pub fn clear_localpickup(&mut self) {
        self.localpickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_localpickup(&mut self, v: ::std::string::String) {
        self.localpickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localpickup(&mut self) -> &mut ::std::string::String {
        &mut self.localpickup
    }

    // Take field
    pub fn take_localpickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.localpickup, ::std::string::String::new())
    }

    // repeated string shippingregion = 6;


    pub fn get_shippingregion(&self) -> &[::std::string::String] {
        &self.shippingregion
    }
    pub fn clear_shippingregion(&mut self) {
        self.shippingregion.clear();
    }

    // Param is passed by value, moved
    pub fn set_shippingregion(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shippingregion = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shippingregion(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shippingregion
    }

    // Take field
    pub fn take_shippingregion(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shippingregion, ::protobuf::RepeatedField::new())
    }

    // string note = 7;


    pub fn get_note(&self) -> &str {
        &self.note
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        &mut self.note
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgItemResell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shippingcost = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.discount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.localpickup)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shippingregion)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shippingcost != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shippingcost, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.discount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.discount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.localpickup.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.localpickup);
        }
        for value in &self.shippingregion {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.note);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if self.shippingcost != 0 {
            os.write_int64(3, self.shippingcost)?;
        }
        if self.discount != 0 {
            os.write_int64(4, self.discount)?;
        }
        if !self.localpickup.is_empty() {
            os.write_string(5, &self.localpickup)?;
        }
        for v in &self.shippingregion {
            os.write_string(6, &v)?;
        };
        if !self.note.is_empty() {
            os.write_string(7, &self.note)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemResell {
        MsgItemResell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemResell| { &m.seller },
                |m: &mut MsgItemResell| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemResell| { &m.itemid },
                |m: &mut MsgItemResell| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shippingcost",
                |m: &MsgItemResell| { &m.shippingcost },
                |m: &mut MsgItemResell| { &mut m.shippingcost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "discount",
                |m: &MsgItemResell| { &m.discount },
                |m: &mut MsgItemResell| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localpickup",
                |m: &MsgItemResell| { &m.localpickup },
                |m: &mut MsgItemResell| { &mut m.localpickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shippingregion",
                |m: &MsgItemResell| { &m.shippingregion },
                |m: &mut MsgItemResell| { &mut m.shippingregion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "note",
                |m: &MsgItemResell| { &m.note },
                |m: &mut MsgItemResell| { &mut m.note },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemResell>(
                "MsgItemResell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemResell {
        static instance: ::protobuf::rt::LazyV2<MsgItemResell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemResell::new)
    }
}

impl ::protobuf::Clear for MsgItemResell {
    fn clear(&mut self) {
        self.seller.clear();
        self.itemid = 0;
        self.shippingcost = 0;
        self.discount = 0;
        self.localpickup.clear();
        self.shippingregion.clear();
        self.note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemResell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemResell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub MaxActivePeriod: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration MaxActivePeriod = 1;


    pub fn get_MaxActivePeriod(&self) -> &::protobuf::well_known_types::Duration {
        self.MaxActivePeriod.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_MaxActivePeriod(&mut self) {
        self.MaxActivePeriod.clear();
    }

    pub fn has_MaxActivePeriod(&self) -> bool {
        self.MaxActivePeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_MaxActivePeriod(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.MaxActivePeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_MaxActivePeriod(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.MaxActivePeriod.is_none() {
            self.MaxActivePeriod.set_default();
        }
        self.MaxActivePeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_MaxActivePeriod(&mut self) -> ::protobuf::well_known_types::Duration {
        self.MaxActivePeriod.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.MaxActivePeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.MaxActivePeriod)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.MaxActivePeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.MaxActivePeriod.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "MaxActivePeriod",
                |m: &Params| { &m.MaxActivePeriod },
                |m: &mut Params| { &mut m.MaxActivePeriod },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.MaxActivePeriod.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgTokenizeItem {
    // message fields
    pub sender: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgTokenizeItem {
    fn default() -> &'a MsgTokenizeItem {
        <MsgTokenizeItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgTokenizeItem {
    pub fn new() -> MsgTokenizeItem {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // uint64 id = 3;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgTokenizeItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if self.id != 0 {
            os.write_uint64(3, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgTokenizeItem {
        MsgTokenizeItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgTokenizeItem| { &m.sender },
                |m: &mut MsgTokenizeItem| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgTokenizeItem| { &m.id },
                |m: &mut MsgTokenizeItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgTokenizeItem>(
                "MsgTokenizeItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgTokenizeItem {
        static instance: ::protobuf::rt::LazyV2<MsgTokenizeItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgTokenizeItem::new)
    }
}

impl ::protobuf::Clear for MsgTokenizeItem {
    fn clear(&mut self) {
        self.sender.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgTokenizeItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgTokenizeItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUnTokenizeItem {
    // message fields
    pub sender: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUnTokenizeItem {
    fn default() -> &'a MsgUnTokenizeItem {
        <MsgUnTokenizeItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgUnTokenizeItem {
    pub fn new() -> MsgUnTokenizeItem {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // uint64 id = 3;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgUnTokenizeItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if self.id != 0 {
            os.write_uint64(3, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUnTokenizeItem {
        MsgUnTokenizeItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgUnTokenizeItem| { &m.sender },
                |m: &mut MsgUnTokenizeItem| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgUnTokenizeItem| { &m.id },
                |m: &mut MsgUnTokenizeItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUnTokenizeItem>(
                "MsgUnTokenizeItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUnTokenizeItem {
        static instance: ::protobuf::rt::LazyV2<MsgUnTokenizeItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUnTokenizeItem::new)
    }
}

impl ::protobuf::Clear for MsgUnTokenizeItem {
    fn clear(&mut self) {
        self.sender.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUnTokenizeItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUnTokenizeItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nitem.proto\x12\x12trstlabs.trst.trst\x1a\x1fgoogle/protobuf/timestam\
    p.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x14gogoproto/gogo.prot\
    o\"\xcb\x08\n\x04Item\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\x04R\x02id\x12\x14\n\x05title\x18\x03\
    \x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x04\x20\x01(\tR\x0bde\
    scription\x12\"\n\x0cshippingcost\x18\x05\x20\x01(\x03R\x0cshippingcost\
    \x12\x20\n\x0blocalpickup\x18\x06\x20\x01(\tR\x0blocalpickup\x12(\n\x0fe\
    stimationcount\x18\x07\x20\x01(\x03R\x0festimationcount\x12$\n\rbestesti\
    mator\x18\x08\x20\x01(\tR\rbestestimator\x12(\n\x0flowestestimator\x18\t\
    \x20\x01(\tR\x0flowestestimator\x12*\n\x10highestestimator\x18\n\x20\x01\
    (\tR\x10highestestimator\x12(\n\x0festimationprice\x18\x0b\x20\x01(\x03R\
    \x0festimationprice\x12$\n\restimatorlist\x18\x0c\x20\x03(\tR\restimator\
    list\x12&\n\x0eestimationlist\x18\r\x20\x03(\x03R\x0eestimationlist\x12\
    \"\n\x0ctransferable\x18\x0e\x20\x01(\x08R\x0ctransferable\x12\x14\n\x05\
    buyer\x18\x0f\x20\x01(\tR\x05buyer\x12\x1a\n\x08tracking\x18\x10\x20\x01\
    (\x08R\x08tracking\x12\x16\n\x06status\x18\x11\x20\x01(\tR\x06status\x12\
    \x1a\n\x08comments\x18\x12\x20\x03(\tR\x08comments\x12\x12\n\x04tags\x18\
    \x13\x20\x03(\tR\x04tags\x12\x14\n\x05flags\x18\x14\x20\x01(\x03R\x05fla\
    gs\x12\x1c\n\tcondition\x18\x15\x20\x01(\x03R\tcondition\x12&\n\x0eshipp\
    ingregion\x18\x16\x20\x03(\tR\x0eshippingregion\x12\x16\n\x06rating\x18\
    \x17\x20\x01(\x03R\x06rating\x12$\n\rdepositamount\x18\x18\x20\x01(\x03R\
    \rdepositamount\x12\x18\n\x07creator\x18\x19\x20\x01(\tR\x07creator\x12\
    \x12\n\x04note\x18\x1a\x20\x01(\tR\x04note\x12\x1a\n\x08discount\x18\x1b\
    \x20\x01(\x03R\x08discount\x12D\n\nsubmittime\x18\x1c\x20\x01(\x0b2\x1a.\
    google.protobuf.TimestampR\nsubmittimeB\x08\x90\xdf\x1f\x01\xc8\xde\x1f\
    \0\x12>\n\x07endtime\x18\x1d\x20\x01(\x0b2\x1a.google.protobuf.Timestamp\
    R\x07endtimeB\x08\x90\xdf\x1f\x01\xc8\xde\x1f\0\x12\x1a\n\x08contract\
    \x18\x1e\x20\x01(\tR\x08contract\x12(\n\x0festimationtotal\x18\x1f\x20\
    \x01(\x03R\x0festimationtotal\x12\x16\n\x06photos\x18\x20\x20\x03(\tR\
    \x06photos\x12\x19\n\x08is_token\x18!\x20\x01(\x08R\x07isToken\"\x83\x03\
    \n\rMsgCreateItem\x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\
    \x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12\x20\n\x0bdescriptio\
    n\x18\x03\x20\x01(\tR\x0bdescription\x12\"\n\x0cshippingcost\x18\x04\x20\
    \x01(\x03R\x0cshippingcost\x12\x20\n\x0blocalpickup\x18\x05\x20\x01(\tR\
    \x0blocalpickup\x12(\n\x0festimationcount\x18\x06\x20\x01(\x03R\x0festim\
    ationcount\x12\x12\n\x04tags\x18\x07\x20\x03(\tR\x04tags\x12\x1c\n\tcond\
    ition\x18\x08\x20\x01(\x03R\tcondition\x12&\n\x0eshippingregion\x18\t\
    \x20\x03(\tR\x0eshippingregion\x12$\n\rdepositamount\x18\n\x20\x01(\x03R\
    \rdepositamount\x12\x18\n\x07initmsg\x18\x0b\x20\x01(\x0cR\x07initmsg\
    \x12\x16\n\x06photos\x18\x0c\x20\x03(\tR\x06photos\"\xa5\x01\n\rMsgUpdat\
    eItem\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\x12\x0e\n\x02id\
    \x18\x02\x20\x01(\x04R\x02id\x12\"\n\x0cshippingcost\x18\x03\x20\x01(\
    \x03R\x0cshippingcost\x12\x20\n\x0blocalpickup\x18\x04\x20\x01(\tR\x0blo\
    calpickup\x12&\n\x0eshippingregion\x18\x05\x20\x03(\tR\x0eshippingregion\
    \"7\n\rMsgDeleteItem\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\x04R\x02id\"e\n\x13MsgRevealEstimation\
    \x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\x12\x16\n\x06itemid\
    \x18\x02\x20\x01(\x04R\x06itemid\x12\x1c\n\trevealmsg\x18\x03\x20\x01(\
    \x0cR\trevealmsg\"i\n\x13MsgItemTransferable\x12\x16\n\x06seller\x18\x01\
    \x20\x01(\tR\x06seller\x12\"\n\x0ctransferable\x18\x02\x20\x01(\x08R\x0c\
    transferable\x12\x16\n\x06itemid\x18\x03\x20\x01(\x04R\x06itemid\"]\n\
    \x0fMsgItemShipping\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\
    \x12\x1a\n\x08tracking\x18\x02\x20\x01(\x08R\x08tracking\x12\x16\n\x06it\
    emid\x18\x03\x20\x01(\x04R\x06itemid\"\xdd\x01\n\rMsgItemResell\x12\x16\
    \n\x06seller\x18\x01\x20\x01(\tR\x06seller\x12\x16\n\x06itemid\x18\x02\
    \x20\x01(\x04R\x06itemid\x12\"\n\x0cshippingcost\x18\x03\x20\x01(\x03R\
    \x0cshippingcost\x12\x1a\n\x08discount\x18\x04\x20\x01(\x03R\x08discount\
    \x12\x20\n\x0blocalpickup\x18\x05\x20\x01(\tR\x0blocalpickup\x12&\n\x0es\
    hippingregion\x18\x06\x20\x03(\tR\x0eshippingregion\x12\x12\n\x04note\
    \x18\x07\x20\x01(\tR\x04note\"|\n\x06Params\x12l\n\x0fMaxActivePeriod\
    \x18\x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0fMaxActivePeriodB\
    '\xc8\xde\x1f\0\x98\xdf\x1f\x01\xea\xde\x1f\x1bmax_active_period,omitemp\
    ty:\x04\x98\xa0\x1f\0\"9\n\x0fMsgTokenizeItem\x12\x16\n\x06sender\x18\
    \x01\x20\x01(\tR\x06sender\x12\x0e\n\x02id\x18\x03\x20\x01(\x04R\x02id\"\
    ;\n\x11MsgUnTokenizeItem\x12\x16\n\x06sender\x18\x01\x20\x01(\tR\x06send\
    er\x12\x0e\n\x02id\x18\x03\x20\x01(\x04R\x02idB'Z%github.com/trstlabs/tr\
    st/x/item/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
