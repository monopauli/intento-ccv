// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `item.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Item {
    // message fields
    pub creator: ::std::string::String,
    pub id: u64,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub status: ::std::string::String,
    pub estimation: ::protobuf::SingularPtrField<Estimation>,
    pub listing_duration: ::protobuf::SingularPtrField<ListingDuration>,
    pub transfer: ::protobuf::SingularPtrField<Transfer>,
    pub properties: ::protobuf::SingularPtrField<Properties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Item {
    fn default() -> &'a Item {
        <Item as ::protobuf::Message>::default_instance()
    }
}

impl Item {
    pub fn new() -> Item {
        ::std::default::Default::default()
    }

    // string creator = 1;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // uint64 id = 3;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // string title = 4;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 5;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string status = 6;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // .trstlabs.trst.trst.Estimation estimation = 7;


    pub fn get_estimation(&self) -> &Estimation {
        self.estimation.as_ref().unwrap_or_else(|| <Estimation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_estimation(&mut self) {
        self.estimation.clear();
    }

    pub fn has_estimation(&self) -> bool {
        self.estimation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_estimation(&mut self, v: Estimation) {
        self.estimation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimation(&mut self) -> &mut Estimation {
        if self.estimation.is_none() {
            self.estimation.set_default();
        }
        self.estimation.as_mut().unwrap()
    }

    // Take field
    pub fn take_estimation(&mut self) -> Estimation {
        self.estimation.take().unwrap_or_else(|| Estimation::new())
    }

    // .trstlabs.trst.trst.ListingDuration listing_duration = 8;


    pub fn get_listing_duration(&self) -> &ListingDuration {
        self.listing_duration.as_ref().unwrap_or_else(|| <ListingDuration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_listing_duration(&mut self) {
        self.listing_duration.clear();
    }

    pub fn has_listing_duration(&self) -> bool {
        self.listing_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_listing_duration(&mut self, v: ListingDuration) {
        self.listing_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listing_duration(&mut self) -> &mut ListingDuration {
        if self.listing_duration.is_none() {
            self.listing_duration.set_default();
        }
        self.listing_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_listing_duration(&mut self) -> ListingDuration {
        self.listing_duration.take().unwrap_or_else(|| ListingDuration::new())
    }

    // .trstlabs.trst.trst.Transfer transfer = 9;


    pub fn get_transfer(&self) -> &Transfer {
        self.transfer.as_ref().unwrap_or_else(|| <Transfer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transfer(&mut self) {
        self.transfer.clear();
    }

    pub fn has_transfer(&self) -> bool {
        self.transfer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transfer(&mut self, v: Transfer) {
        self.transfer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transfer(&mut self) -> &mut Transfer {
        if self.transfer.is_none() {
            self.transfer.set_default();
        }
        self.transfer.as_mut().unwrap()
    }

    // Take field
    pub fn take_transfer(&mut self) -> Transfer {
        self.transfer.take().unwrap_or_else(|| Transfer::new())
    }

    // .trstlabs.trst.trst.Properties properties = 10;


    pub fn get_properties(&self) -> &Properties {
        self.properties.as_ref().unwrap_or_else(|| <Properties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    pub fn has_properties(&self) -> bool {
        self.properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: Properties) {
        self.properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_properties(&mut self) -> &mut Properties {
        if self.properties.is_none() {
            self.properties.set_default();
        }
        self.properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_properties(&mut self) -> Properties {
        self.properties.take().unwrap_or_else(|| Properties::new())
    }
}

impl ::protobuf::Message for Item {
    fn is_initialized(&self) -> bool {
        for v in &self.estimation {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.listing_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transfer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.estimation)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.listing_duration)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transfer)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.description);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.status);
        }
        if let Some(ref v) = self.estimation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.listing_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transfer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if self.id != 0 {
            os.write_uint64(3, self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(4, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(5, &self.description)?;
        }
        if !self.status.is_empty() {
            os.write_string(6, &self.status)?;
        }
        if let Some(ref v) = self.estimation.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.listing_duration.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transfer.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.properties.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Item {
        Item::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &Item| { &m.creator },
                |m: &mut Item| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Item| { &m.id },
                |m: &mut Item| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Item| { &m.title },
                |m: &mut Item| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Item| { &m.description },
                |m: &mut Item| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &Item| { &m.status },
                |m: &mut Item| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Estimation>>(
                "estimation",
                |m: &Item| { &m.estimation },
                |m: &mut Item| { &mut m.estimation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ListingDuration>>(
                "listing_duration",
                |m: &Item| { &m.listing_duration },
                |m: &mut Item| { &mut m.listing_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transfer>>(
                "transfer",
                |m: &Item| { &m.transfer },
                |m: &mut Item| { &mut m.transfer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Properties>>(
                "properties",
                |m: &Item| { &m.properties },
                |m: &mut Item| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Item>(
                "Item",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Item {
        static instance: ::protobuf::rt::LazyV2<Item> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Item::new)
    }
}

impl ::protobuf::Clear for Item {
    fn clear(&mut self) {
        self.creator.clear();
        self.id = 0;
        self.title.clear();
        self.description.clear();
        self.status.clear();
        self.estimation.clear();
        self.listing_duration.clear();
        self.transfer.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Item {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Estimation {
    // message fields
    pub estimation_price: i64,
    pub best_estimator: ::std::string::String,
    pub estimation_count: i64,
    pub estimation_total: i64,
    pub estimator_list: ::protobuf::RepeatedField<::std::string::String>,
    pub estimation_list: ::std::vec::Vec<i64>,
    pub comments: ::protobuf::RepeatedField<::std::string::String>,
    pub deposit_amount: i64,
    pub contract: ::std::string::String,
    pub flags: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Estimation {
    fn default() -> &'a Estimation {
        <Estimation as ::protobuf::Message>::default_instance()
    }
}

impl Estimation {
    pub fn new() -> Estimation {
        ::std::default::Default::default()
    }

    // int64 estimation_price = 1;


    pub fn get_estimation_price(&self) -> i64 {
        self.estimation_price
    }
    pub fn clear_estimation_price(&mut self) {
        self.estimation_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimation_price(&mut self, v: i64) {
        self.estimation_price = v;
    }

    // string best_estimator = 2;


    pub fn get_best_estimator(&self) -> &str {
        &self.best_estimator
    }
    pub fn clear_best_estimator(&mut self) {
        self.best_estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_best_estimator(&mut self, v: ::std::string::String) {
        self.best_estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_best_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.best_estimator
    }

    // Take field
    pub fn take_best_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.best_estimator, ::std::string::String::new())
    }

    // int64 estimation_count = 3;


    pub fn get_estimation_count(&self) -> i64 {
        self.estimation_count
    }
    pub fn clear_estimation_count(&mut self) {
        self.estimation_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimation_count(&mut self, v: i64) {
        self.estimation_count = v;
    }

    // int64 estimation_total = 4;


    pub fn get_estimation_total(&self) -> i64 {
        self.estimation_total
    }
    pub fn clear_estimation_total(&mut self) {
        self.estimation_total = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimation_total(&mut self, v: i64) {
        self.estimation_total = v;
    }

    // repeated string estimator_list = 5;


    pub fn get_estimator_list(&self) -> &[::std::string::String] {
        &self.estimator_list
    }
    pub fn clear_estimator_list(&mut self) {
        self.estimator_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator_list(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.estimator_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_estimator_list(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.estimator_list
    }

    // Take field
    pub fn take_estimator_list(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.estimator_list, ::protobuf::RepeatedField::new())
    }

    // repeated int64 estimation_list = 6;


    pub fn get_estimation_list(&self) -> &[i64] {
        &self.estimation_list
    }
    pub fn clear_estimation_list(&mut self) {
        self.estimation_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimation_list(&mut self, v: ::std::vec::Vec<i64>) {
        self.estimation_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_estimation_list(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.estimation_list
    }

    // Take field
    pub fn take_estimation_list(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.estimation_list, ::std::vec::Vec::new())
    }

    // repeated string comments = 7;


    pub fn get_comments(&self) -> &[::std::string::String] {
        &self.comments
    }
    pub fn clear_comments(&mut self) {
        self.comments.clear();
    }

    // Param is passed by value, moved
    pub fn set_comments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.comments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_comments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.comments
    }

    // Take field
    pub fn take_comments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.comments, ::protobuf::RepeatedField::new())
    }

    // int64 deposit_amount = 8;


    pub fn get_deposit_amount(&self) -> i64 {
        self.deposit_amount
    }
    pub fn clear_deposit_amount(&mut self) {
        self.deposit_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_amount(&mut self, v: i64) {
        self.deposit_amount = v;
    }

    // string contract = 9;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // int64 flags = 10;


    pub fn get_flags(&self) -> i64 {
        self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: i64) {
        self.flags = v;
    }
}

impl ::protobuf::Message for Estimation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimation_price = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.best_estimator)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimation_count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimation_total = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.estimator_list)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.estimation_list)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.comments)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_amount = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.flags = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.estimation_price != 0 {
            my_size += ::protobuf::rt::value_size(1, self.estimation_price, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.best_estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.best_estimator);
        }
        if self.estimation_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.estimation_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.estimation_total != 0 {
            my_size += ::protobuf::rt::value_size(4, self.estimation_total, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.estimator_list {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.estimation_list {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.comments {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if self.deposit_amount != 0 {
            my_size += ::protobuf::rt::value_size(8, self.deposit_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.contract);
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::value_size(10, self.flags, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.estimation_price != 0 {
            os.write_int64(1, self.estimation_price)?;
        }
        if !self.best_estimator.is_empty() {
            os.write_string(2, &self.best_estimator)?;
        }
        if self.estimation_count != 0 {
            os.write_int64(3, self.estimation_count)?;
        }
        if self.estimation_total != 0 {
            os.write_int64(4, self.estimation_total)?;
        }
        for v in &self.estimator_list {
            os.write_string(5, &v)?;
        };
        for v in &self.estimation_list {
            os.write_int64(6, *v)?;
        };
        for v in &self.comments {
            os.write_string(7, &v)?;
        };
        if self.deposit_amount != 0 {
            os.write_int64(8, self.deposit_amount)?;
        }
        if !self.contract.is_empty() {
            os.write_string(9, &self.contract)?;
        }
        if self.flags != 0 {
            os.write_int64(10, self.flags)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Estimation {
        Estimation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation_price",
                |m: &Estimation| { &m.estimation_price },
                |m: &mut Estimation| { &mut m.estimation_price },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "best_estimator",
                |m: &Estimation| { &m.best_estimator },
                |m: &mut Estimation| { &mut m.best_estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation_count",
                |m: &Estimation| { &m.estimation_count },
                |m: &mut Estimation| { &mut m.estimation_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation_total",
                |m: &Estimation| { &m.estimation_total },
                |m: &mut Estimation| { &mut m.estimation_total },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator_list",
                |m: &Estimation| { &m.estimator_list },
                |m: &mut Estimation| { &mut m.estimator_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation_list",
                |m: &Estimation| { &m.estimation_list },
                |m: &mut Estimation| { &mut m.estimation_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comments",
                |m: &Estimation| { &m.comments },
                |m: &mut Estimation| { &mut m.comments },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deposit_amount",
                |m: &Estimation| { &m.deposit_amount },
                |m: &mut Estimation| { &mut m.deposit_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &Estimation| { &m.contract },
                |m: &mut Estimation| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "flags",
                |m: &Estimation| { &m.flags },
                |m: &mut Estimation| { &mut m.flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Estimation>(
                "Estimation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Estimation {
        static instance: ::protobuf::rt::LazyV2<Estimation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Estimation::new)
    }
}

impl ::protobuf::Clear for Estimation {
    fn clear(&mut self) {
        self.estimation_price = 0;
        self.best_estimator.clear();
        self.estimation_count = 0;
        self.estimation_total = 0;
        self.estimator_list.clear();
        self.estimation_list.clear();
        self.comments.clear();
        self.deposit_amount = 0;
        self.contract.clear();
        self.flags = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Estimation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Estimation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListingDuration {
    // message fields
    pub submit_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListingDuration {
    fn default() -> &'a ListingDuration {
        <ListingDuration as ::protobuf::Message>::default_instance()
    }
}

impl ListingDuration {
    pub fn new() -> ListingDuration {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp submit_time = 1;


    pub fn get_submit_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.submit_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_submit_time(&mut self) {
        self.submit_time.clear();
    }

    pub fn has_submit_time(&self) -> bool {
        self.submit_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_submit_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.submit_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_submit_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.submit_time.is_none() {
            self.submit_time.set_default();
        }
        self.submit_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_submit_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.submit_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 2;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for ListingDuration {
    fn is_initialized(&self) -> bool {
        for v in &self.submit_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.submit_time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.submit_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.submit_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListingDuration {
        ListingDuration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "submit_time",
                |m: &ListingDuration| { &m.submit_time },
                |m: &mut ListingDuration| { &mut m.submit_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &ListingDuration| { &m.end_time },
                |m: &mut ListingDuration| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListingDuration>(
                "ListingDuration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListingDuration {
        static instance: ::protobuf::rt::LazyV2<ListingDuration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListingDuration::new)
    }
}

impl ::protobuf::Clear for ListingDuration {
    fn clear(&mut self) {
        self.submit_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListingDuration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListingDuration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transfer {
    // message fields
    pub shipping_cost: i64,
    pub local_pickup: ::std::string::String,
    pub tracking: bool,
    pub shipping_region: ::protobuf::RepeatedField<::std::string::String>,
    pub rating: i64,
    pub note: ::std::string::String,
    pub discount: i64,
    pub buyer: ::std::string::String,
    pub seller: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transfer {
    fn default() -> &'a Transfer {
        <Transfer as ::protobuf::Message>::default_instance()
    }
}

impl Transfer {
    pub fn new() -> Transfer {
        ::std::default::Default::default()
    }

    // int64 shipping_cost = 1;


    pub fn get_shipping_cost(&self) -> i64 {
        self.shipping_cost
    }
    pub fn clear_shipping_cost(&mut self) {
        self.shipping_cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shipping_cost(&mut self, v: i64) {
        self.shipping_cost = v;
    }

    // string local_pickup = 2;


    pub fn get_local_pickup(&self) -> &str {
        &self.local_pickup
    }
    pub fn clear_local_pickup(&mut self) {
        self.local_pickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_pickup(&mut self, v: ::std::string::String) {
        self.local_pickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_pickup(&mut self) -> &mut ::std::string::String {
        &mut self.local_pickup
    }

    // Take field
    pub fn take_local_pickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_pickup, ::std::string::String::new())
    }

    // bool tracking = 3;


    pub fn get_tracking(&self) -> bool {
        self.tracking
    }
    pub fn clear_tracking(&mut self) {
        self.tracking = false;
    }

    // Param is passed by value, moved
    pub fn set_tracking(&mut self, v: bool) {
        self.tracking = v;
    }

    // repeated string shipping_region = 4;


    pub fn get_shipping_region(&self) -> &[::std::string::String] {
        &self.shipping_region
    }
    pub fn clear_shipping_region(&mut self) {
        self.shipping_region.clear();
    }

    // Param is passed by value, moved
    pub fn set_shipping_region(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shipping_region = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shipping_region(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shipping_region
    }

    // Take field
    pub fn take_shipping_region(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shipping_region, ::protobuf::RepeatedField::new())
    }

    // int64 rating = 5;


    pub fn get_rating(&self) -> i64 {
        self.rating
    }
    pub fn clear_rating(&mut self) {
        self.rating = 0;
    }

    // Param is passed by value, moved
    pub fn set_rating(&mut self, v: i64) {
        self.rating = v;
    }

    // string note = 6;


    pub fn get_note(&self) -> &str {
        &self.note
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        &mut self.note
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note, ::std::string::String::new())
    }

    // int64 discount = 7;


    pub fn get_discount(&self) -> i64 {
        self.discount
    }
    pub fn clear_discount(&mut self) {
        self.discount = 0;
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: i64) {
        self.discount = v;
    }

    // string buyer = 8;


    pub fn get_buyer(&self) -> &str {
        &self.buyer
    }
    pub fn clear_buyer(&mut self) {
        self.buyer.clear();
    }

    // Param is passed by value, moved
    pub fn set_buyer(&mut self, v: ::std::string::String) {
        self.buyer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buyer(&mut self) -> &mut ::std::string::String {
        &mut self.buyer
    }

    // Take field
    pub fn take_buyer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buyer, ::std::string::String::new())
    }

    // string seller = 9;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Transfer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shipping_cost = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.local_pickup)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tracking = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shipping_region)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.rating = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.discount = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buyer)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shipping_cost != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shipping_cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_pickup.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.local_pickup);
        }
        if self.tracking != false {
            my_size += 2;
        }
        for value in &self.shipping_region {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.rating != 0 {
            my_size += ::protobuf::rt::value_size(5, self.rating, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.note);
        }
        if self.discount != 0 {
            my_size += ::protobuf::rt::value_size(7, self.discount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.buyer.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buyer);
        }
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.seller);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shipping_cost != 0 {
            os.write_int64(1, self.shipping_cost)?;
        }
        if !self.local_pickup.is_empty() {
            os.write_string(2, &self.local_pickup)?;
        }
        if self.tracking != false {
            os.write_bool(3, self.tracking)?;
        }
        for v in &self.shipping_region {
            os.write_string(4, &v)?;
        };
        if self.rating != 0 {
            os.write_int64(5, self.rating)?;
        }
        if !self.note.is_empty() {
            os.write_string(6, &self.note)?;
        }
        if self.discount != 0 {
            os.write_int64(7, self.discount)?;
        }
        if !self.buyer.is_empty() {
            os.write_string(8, &self.buyer)?;
        }
        if !self.seller.is_empty() {
            os.write_string(9, &self.seller)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transfer {
        Transfer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shipping_cost",
                |m: &Transfer| { &m.shipping_cost },
                |m: &mut Transfer| { &mut m.shipping_cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "local_pickup",
                |m: &Transfer| { &m.local_pickup },
                |m: &mut Transfer| { &mut m.local_pickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tracking",
                |m: &Transfer| { &m.tracking },
                |m: &mut Transfer| { &mut m.tracking },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shipping_region",
                |m: &Transfer| { &m.shipping_region },
                |m: &mut Transfer| { &mut m.shipping_region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "rating",
                |m: &Transfer| { &m.rating },
                |m: &mut Transfer| { &mut m.rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "note",
                |m: &Transfer| { &m.note },
                |m: &mut Transfer| { &mut m.note },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "discount",
                |m: &Transfer| { &m.discount },
                |m: &mut Transfer| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buyer",
                |m: &Transfer| { &m.buyer },
                |m: &mut Transfer| { &mut m.buyer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &Transfer| { &m.seller },
                |m: &mut Transfer| { &mut m.seller },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transfer>(
                "Transfer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transfer {
        static instance: ::protobuf::rt::LazyV2<Transfer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transfer::new)
    }
}

impl ::protobuf::Clear for Transfer {
    fn clear(&mut self) {
        self.shipping_cost = 0;
        self.local_pickup.clear();
        self.tracking = false;
        self.shipping_region.clear();
        self.rating = 0;
        self.note.clear();
        self.discount = 0;
        self.buyer.clear();
        self.seller.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transfer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Properties {
    // message fields
    pub condition: i64,
    pub photos: ::protobuf::RepeatedField<::std::string::String>,
    pub is_token: bool,
    pub estimation_only: bool,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub token_uri: ::std::string::String,
    pub transferable: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Properties {
    fn default() -> &'a Properties {
        <Properties as ::protobuf::Message>::default_instance()
    }
}

impl Properties {
    pub fn new() -> Properties {
        ::std::default::Default::default()
    }

    // int64 condition = 1;


    pub fn get_condition(&self) -> i64 {
        self.condition
    }
    pub fn clear_condition(&mut self) {
        self.condition = 0;
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: i64) {
        self.condition = v;
    }

    // repeated string photos = 2;


    pub fn get_photos(&self) -> &[::std::string::String] {
        &self.photos
    }
    pub fn clear_photos(&mut self) {
        self.photos.clear();
    }

    // Param is passed by value, moved
    pub fn set_photos(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.photos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_photos(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.photos
    }

    // Take field
    pub fn take_photos(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.photos, ::protobuf::RepeatedField::new())
    }

    // bool is_token = 3;


    pub fn get_is_token(&self) -> bool {
        self.is_token
    }
    pub fn clear_is_token(&mut self) {
        self.is_token = false;
    }

    // Param is passed by value, moved
    pub fn set_is_token(&mut self, v: bool) {
        self.is_token = v;
    }

    // bool estimation_only = 4;


    pub fn get_estimation_only(&self) -> bool {
        self.estimation_only
    }
    pub fn clear_estimation_only(&mut self) {
        self.estimation_only = false;
    }

    // Param is passed by value, moved
    pub fn set_estimation_only(&mut self, v: bool) {
        self.estimation_only = v;
    }

    // repeated string tags = 5;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // string token_uri = 6;


    pub fn get_token_uri(&self) -> &str {
        &self.token_uri
    }
    pub fn clear_token_uri(&mut self) {
        self.token_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_uri(&mut self, v: ::std::string::String) {
        self.token_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_uri(&mut self) -> &mut ::std::string::String {
        &mut self.token_uri
    }

    // Take field
    pub fn take_token_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_uri, ::std::string::String::new())
    }

    // bool transferable = 7;


    pub fn get_transferable(&self) -> bool {
        self.transferable
    }
    pub fn clear_transferable(&mut self) {
        self.transferable = false;
    }

    // Param is passed by value, moved
    pub fn set_transferable(&mut self, v: bool) {
        self.transferable = v;
    }
}

impl ::protobuf::Message for Properties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.condition = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.photos)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_token = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.estimation_only = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_uri)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.transferable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.condition != 0 {
            my_size += ::protobuf::rt::value_size(1, self.condition, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.photos {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.is_token != false {
            my_size += 2;
        }
        if self.estimation_only != false {
            my_size += 2;
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.token_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.token_uri);
        }
        if self.transferable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.condition != 0 {
            os.write_int64(1, self.condition)?;
        }
        for v in &self.photos {
            os.write_string(2, &v)?;
        };
        if self.is_token != false {
            os.write_bool(3, self.is_token)?;
        }
        if self.estimation_only != false {
            os.write_bool(4, self.estimation_only)?;
        }
        for v in &self.tags {
            os.write_string(5, &v)?;
        };
        if !self.token_uri.is_empty() {
            os.write_string(6, &self.token_uri)?;
        }
        if self.transferable != false {
            os.write_bool(7, self.transferable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Properties {
        Properties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "condition",
                |m: &Properties| { &m.condition },
                |m: &mut Properties| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photos",
                |m: &Properties| { &m.photos },
                |m: &mut Properties| { &mut m.photos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_token",
                |m: &Properties| { &m.is_token },
                |m: &mut Properties| { &mut m.is_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "estimation_only",
                |m: &Properties| { &m.estimation_only },
                |m: &mut Properties| { &mut m.estimation_only },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &Properties| { &m.tags },
                |m: &mut Properties| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_uri",
                |m: &Properties| { &m.token_uri },
                |m: &mut Properties| { &mut m.token_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "transferable",
                |m: &Properties| { &m.transferable },
                |m: &mut Properties| { &mut m.transferable },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Properties>(
                "Properties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Properties {
        static instance: ::protobuf::rt::LazyV2<Properties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Properties::new)
    }
}

impl ::protobuf::Clear for Properties {
    fn clear(&mut self) {
        self.condition = 0;
        self.photos.clear();
        self.is_token = false;
        self.estimation_only = false;
        self.tags.clear();
        self.token_uri.clear();
        self.transferable = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Properties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Properties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateItem {
    // message fields
    pub creator: ::std::string::String,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub shipping_cost: i64,
    pub local_pickup: ::std::string::String,
    pub estimation_count: i64,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub condition: i64,
    pub shipping_region: ::protobuf::RepeatedField<::std::string::String>,
    pub deposit_amount: i64,
    pub init_msg: ::std::vec::Vec<u8>,
    pub auto_msg: ::std::vec::Vec<u8>,
    pub photos: ::protobuf::RepeatedField<::std::string::String>,
    pub token_uri: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateItem {
    fn default() -> &'a MsgCreateItem {
        <MsgCreateItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateItem {
    pub fn new() -> MsgCreateItem {
        ::std::default::Default::default()
    }

    // string creator = 1;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // int64 shipping_cost = 4;


    pub fn get_shipping_cost(&self) -> i64 {
        self.shipping_cost
    }
    pub fn clear_shipping_cost(&mut self) {
        self.shipping_cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shipping_cost(&mut self, v: i64) {
        self.shipping_cost = v;
    }

    // string local_pickup = 5;


    pub fn get_local_pickup(&self) -> &str {
        &self.local_pickup
    }
    pub fn clear_local_pickup(&mut self) {
        self.local_pickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_pickup(&mut self, v: ::std::string::String) {
        self.local_pickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_pickup(&mut self) -> &mut ::std::string::String {
        &mut self.local_pickup
    }

    // Take field
    pub fn take_local_pickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_pickup, ::std::string::String::new())
    }

    // int64 estimation_count = 6;


    pub fn get_estimation_count(&self) -> i64 {
        self.estimation_count
    }
    pub fn clear_estimation_count(&mut self) {
        self.estimation_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimation_count(&mut self, v: i64) {
        self.estimation_count = v;
    }

    // repeated string tags = 7;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // int64 condition = 8;


    pub fn get_condition(&self) -> i64 {
        self.condition
    }
    pub fn clear_condition(&mut self) {
        self.condition = 0;
    }

    // Param is passed by value, moved
    pub fn set_condition(&mut self, v: i64) {
        self.condition = v;
    }

    // repeated string shipping_region = 9;


    pub fn get_shipping_region(&self) -> &[::std::string::String] {
        &self.shipping_region
    }
    pub fn clear_shipping_region(&mut self) {
        self.shipping_region.clear();
    }

    // Param is passed by value, moved
    pub fn set_shipping_region(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shipping_region = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shipping_region(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shipping_region
    }

    // Take field
    pub fn take_shipping_region(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shipping_region, ::protobuf::RepeatedField::new())
    }

    // int64 deposit_amount = 10;


    pub fn get_deposit_amount(&self) -> i64 {
        self.deposit_amount
    }
    pub fn clear_deposit_amount(&mut self) {
        self.deposit_amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit_amount(&mut self, v: i64) {
        self.deposit_amount = v;
    }

    // bytes init_msg = 11;


    pub fn get_init_msg(&self) -> &[u8] {
        &self.init_msg
    }
    pub fn clear_init_msg(&mut self) {
        self.init_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_init_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.init_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_init_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.init_msg
    }

    // Take field
    pub fn take_init_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.init_msg, ::std::vec::Vec::new())
    }

    // bytes auto_msg = 12;


    pub fn get_auto_msg(&self) -> &[u8] {
        &self.auto_msg
    }
    pub fn clear_auto_msg(&mut self) {
        self.auto_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_auto_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.auto_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auto_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.auto_msg
    }

    // Take field
    pub fn take_auto_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.auto_msg, ::std::vec::Vec::new())
    }

    // repeated string photos = 13;


    pub fn get_photos(&self) -> &[::std::string::String] {
        &self.photos
    }
    pub fn clear_photos(&mut self) {
        self.photos.clear();
    }

    // Param is passed by value, moved
    pub fn set_photos(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.photos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_photos(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.photos
    }

    // Take field
    pub fn take_photos(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.photos, ::protobuf::RepeatedField::new())
    }

    // string token_uri = 14;


    pub fn get_token_uri(&self) -> &str {
        &self.token_uri
    }
    pub fn clear_token_uri(&mut self) {
        self.token_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_uri(&mut self, v: ::std::string::String) {
        self.token_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_uri(&mut self) -> &mut ::std::string::String {
        &mut self.token_uri
    }

    // Take field
    pub fn take_token_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_uri, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgCreateItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shipping_cost = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.local_pickup)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimation_count = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.condition = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shipping_region)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit_amount = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.init_msg)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.auto_msg)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.photos)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_uri)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.shipping_cost != 0 {
            my_size += ::protobuf::rt::value_size(4, self.shipping_cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_pickup.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.local_pickup);
        }
        if self.estimation_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.estimation_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if self.condition != 0 {
            my_size += ::protobuf::rt::value_size(8, self.condition, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shipping_region {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if self.deposit_amount != 0 {
            my_size += ::protobuf::rt::value_size(10, self.deposit_amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.init_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.init_msg);
        }
        if !self.auto_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.auto_msg);
        }
        for value in &self.photos {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        if !self.token_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.token_uri);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.shipping_cost != 0 {
            os.write_int64(4, self.shipping_cost)?;
        }
        if !self.local_pickup.is_empty() {
            os.write_string(5, &self.local_pickup)?;
        }
        if self.estimation_count != 0 {
            os.write_int64(6, self.estimation_count)?;
        }
        for v in &self.tags {
            os.write_string(7, &v)?;
        };
        if self.condition != 0 {
            os.write_int64(8, self.condition)?;
        }
        for v in &self.shipping_region {
            os.write_string(9, &v)?;
        };
        if self.deposit_amount != 0 {
            os.write_int64(10, self.deposit_amount)?;
        }
        if !self.init_msg.is_empty() {
            os.write_bytes(11, &self.init_msg)?;
        }
        if !self.auto_msg.is_empty() {
            os.write_bytes(12, &self.auto_msg)?;
        }
        for v in &self.photos {
            os.write_string(13, &v)?;
        };
        if !self.token_uri.is_empty() {
            os.write_string(14, &self.token_uri)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateItem {
        MsgCreateItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &MsgCreateItem| { &m.creator },
                |m: &mut MsgCreateItem| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &MsgCreateItem| { &m.title },
                |m: &mut MsgCreateItem| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &MsgCreateItem| { &m.description },
                |m: &mut MsgCreateItem| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shipping_cost",
                |m: &MsgCreateItem| { &m.shipping_cost },
                |m: &mut MsgCreateItem| { &mut m.shipping_cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "local_pickup",
                |m: &MsgCreateItem| { &m.local_pickup },
                |m: &mut MsgCreateItem| { &mut m.local_pickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation_count",
                |m: &MsgCreateItem| { &m.estimation_count },
                |m: &mut MsgCreateItem| { &mut m.estimation_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &MsgCreateItem| { &m.tags },
                |m: &mut MsgCreateItem| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "condition",
                |m: &MsgCreateItem| { &m.condition },
                |m: &mut MsgCreateItem| { &mut m.condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shipping_region",
                |m: &MsgCreateItem| { &m.shipping_region },
                |m: &mut MsgCreateItem| { &mut m.shipping_region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deposit_amount",
                |m: &MsgCreateItem| { &m.deposit_amount },
                |m: &mut MsgCreateItem| { &mut m.deposit_amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "init_msg",
                |m: &MsgCreateItem| { &m.init_msg },
                |m: &mut MsgCreateItem| { &mut m.init_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "auto_msg",
                |m: &MsgCreateItem| { &m.auto_msg },
                |m: &mut MsgCreateItem| { &mut m.auto_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photos",
                |m: &MsgCreateItem| { &m.photos },
                |m: &mut MsgCreateItem| { &mut m.photos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_uri",
                |m: &MsgCreateItem| { &m.token_uri },
                |m: &mut MsgCreateItem| { &mut m.token_uri },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateItem>(
                "MsgCreateItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateItem {
        static instance: ::protobuf::rt::LazyV2<MsgCreateItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateItem::new)
    }
}

impl ::protobuf::Clear for MsgCreateItem {
    fn clear(&mut self) {
        self.creator.clear();
        self.title.clear();
        self.description.clear();
        self.shipping_cost = 0;
        self.local_pickup.clear();
        self.estimation_count = 0;
        self.tags.clear();
        self.condition = 0;
        self.shipping_region.clear();
        self.deposit_amount = 0;
        self.init_msg.clear();
        self.auto_msg.clear();
        self.photos.clear();
        self.token_uri.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUpdateItem {
    // message fields
    pub seller: ::std::string::String,
    pub id: u64,
    pub shipping_cost: i64,
    pub local_pickup: ::std::string::String,
    pub shipping_region: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateItem {
    fn default() -> &'a MsgUpdateItem {
        <MsgUpdateItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateItem {
    pub fn new() -> MsgUpdateItem {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // int64 shipping_cost = 3;


    pub fn get_shipping_cost(&self) -> i64 {
        self.shipping_cost
    }
    pub fn clear_shipping_cost(&mut self) {
        self.shipping_cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shipping_cost(&mut self, v: i64) {
        self.shipping_cost = v;
    }

    // string local_pickup = 4;


    pub fn get_local_pickup(&self) -> &str {
        &self.local_pickup
    }
    pub fn clear_local_pickup(&mut self) {
        self.local_pickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_pickup(&mut self, v: ::std::string::String) {
        self.local_pickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_pickup(&mut self) -> &mut ::std::string::String {
        &mut self.local_pickup
    }

    // Take field
    pub fn take_local_pickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_pickup, ::std::string::String::new())
    }

    // repeated string shipping_region = 5;


    pub fn get_shipping_region(&self) -> &[::std::string::String] {
        &self.shipping_region
    }
    pub fn clear_shipping_region(&mut self) {
        self.shipping_region.clear();
    }

    // Param is passed by value, moved
    pub fn set_shipping_region(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shipping_region = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shipping_region(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shipping_region
    }

    // Take field
    pub fn take_shipping_region(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shipping_region, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgUpdateItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shipping_cost = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.local_pickup)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shipping_region)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shipping_cost != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shipping_cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_pickup.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.local_pickup);
        }
        for value in &self.shipping_region {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        if self.shipping_cost != 0 {
            os.write_int64(3, self.shipping_cost)?;
        }
        if !self.local_pickup.is_empty() {
            os.write_string(4, &self.local_pickup)?;
        }
        for v in &self.shipping_region {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateItem {
        MsgUpdateItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgUpdateItem| { &m.seller },
                |m: &mut MsgUpdateItem| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgUpdateItem| { &m.id },
                |m: &mut MsgUpdateItem| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shipping_cost",
                |m: &MsgUpdateItem| { &m.shipping_cost },
                |m: &mut MsgUpdateItem| { &mut m.shipping_cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "local_pickup",
                |m: &MsgUpdateItem| { &m.local_pickup },
                |m: &mut MsgUpdateItem| { &mut m.local_pickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shipping_region",
                |m: &MsgUpdateItem| { &m.shipping_region },
                |m: &mut MsgUpdateItem| { &mut m.shipping_region },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUpdateItem>(
                "MsgUpdateItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUpdateItem {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateItem::new)
    }
}

impl ::protobuf::Clear for MsgUpdateItem {
    fn clear(&mut self) {
        self.seller.clear();
        self.id = 0;
        self.shipping_cost = 0;
        self.local_pickup.clear();
        self.shipping_region.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUpdateItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDeleteItem {
    // message fields
    pub seller: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDeleteItem {
    fn default() -> &'a MsgDeleteItem {
        <MsgDeleteItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeleteItem {
    pub fn new() -> MsgDeleteItem {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgDeleteItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDeleteItem {
        MsgDeleteItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgDeleteItem| { &m.seller },
                |m: &mut MsgDeleteItem| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgDeleteItem| { &m.id },
                |m: &mut MsgDeleteItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDeleteItem>(
                "MsgDeleteItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDeleteItem {
        static instance: ::protobuf::rt::LazyV2<MsgDeleteItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDeleteItem::new)
    }
}

impl ::protobuf::Clear for MsgDeleteItem {
    fn clear(&mut self) {
        self.seller.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDeleteItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeleteItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRevealEstimation {
    // message fields
    pub creator: ::std::string::String,
    pub itemid: u64,
    pub reveal_msg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRevealEstimation {
    fn default() -> &'a MsgRevealEstimation {
        <MsgRevealEstimation as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevealEstimation {
    pub fn new() -> MsgRevealEstimation {
        ::std::default::Default::default()
    }

    // string creator = 1;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // bytes reveal_msg = 3;


    pub fn get_reveal_msg(&self) -> &[u8] {
        &self.reveal_msg
    }
    pub fn clear_reveal_msg(&mut self) {
        self.reveal_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_reveal_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.reveal_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reveal_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.reveal_msg
    }

    // Take field
    pub fn take_reveal_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.reveal_msg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgRevealEstimation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.reveal_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.creator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reveal_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.reveal_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.creator.is_empty() {
            os.write_string(1, &self.creator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if !self.reveal_msg.is_empty() {
            os.write_bytes(3, &self.reveal_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRevealEstimation {
        MsgRevealEstimation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &MsgRevealEstimation| { &m.creator },
                |m: &mut MsgRevealEstimation| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgRevealEstimation| { &m.itemid },
                |m: &mut MsgRevealEstimation| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "reveal_msg",
                |m: &MsgRevealEstimation| { &m.reveal_msg },
                |m: &mut MsgRevealEstimation| { &mut m.reveal_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRevealEstimation>(
                "MsgRevealEstimation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRevealEstimation {
        static instance: ::protobuf::rt::LazyV2<MsgRevealEstimation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRevealEstimation::new)
    }
}

impl ::protobuf::Clear for MsgRevealEstimation {
    fn clear(&mut self) {
        self.creator.clear();
        self.itemid = 0;
        self.reveal_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRevealEstimation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevealEstimation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemTransferable {
    // message fields
    pub seller: ::std::string::String,
    pub transferable_msg: ::std::vec::Vec<u8>,
    pub itemid: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemTransferable {
    fn default() -> &'a MsgItemTransferable {
        <MsgItemTransferable as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemTransferable {
    pub fn new() -> MsgItemTransferable {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // bytes transferable_msg = 2;


    pub fn get_transferable_msg(&self) -> &[u8] {
        &self.transferable_msg
    }
    pub fn clear_transferable_msg(&mut self) {
        self.transferable_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_transferable_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.transferable_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transferable_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transferable_msg
    }

    // Take field
    pub fn take_transferable_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transferable_msg, ::std::vec::Vec::new())
    }

    // uint64 itemid = 3;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }
}

impl ::protobuf::Message for MsgItemTransferable {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transferable_msg)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if !self.transferable_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transferable_msg);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if !self.transferable_msg.is_empty() {
            os.write_bytes(2, &self.transferable_msg)?;
        }
        if self.itemid != 0 {
            os.write_uint64(3, self.itemid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemTransferable {
        MsgItemTransferable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemTransferable| { &m.seller },
                |m: &mut MsgItemTransferable| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transferable_msg",
                |m: &MsgItemTransferable| { &m.transferable_msg },
                |m: &mut MsgItemTransferable| { &mut m.transferable_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemTransferable| { &m.itemid },
                |m: &mut MsgItemTransferable| { &mut m.itemid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemTransferable>(
                "MsgItemTransferable",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemTransferable {
        static instance: ::protobuf::rt::LazyV2<MsgItemTransferable> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemTransferable::new)
    }
}

impl ::protobuf::Clear for MsgItemTransferable {
    fn clear(&mut self) {
        self.seller.clear();
        self.transferable_msg.clear();
        self.itemid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemTransferable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemTransferable {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemShipping {
    // message fields
    pub seller: ::std::string::String,
    pub tracking: bool,
    pub itemid: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemShipping {
    fn default() -> &'a MsgItemShipping {
        <MsgItemShipping as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemShipping {
    pub fn new() -> MsgItemShipping {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // bool tracking = 2;


    pub fn get_tracking(&self) -> bool {
        self.tracking
    }
    pub fn clear_tracking(&mut self) {
        self.tracking = false;
    }

    // Param is passed by value, moved
    pub fn set_tracking(&mut self, v: bool) {
        self.tracking = v;
    }

    // uint64 itemid = 3;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }
}

impl ::protobuf::Message for MsgItemShipping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tracking = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.tracking != false {
            my_size += 2;
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.tracking != false {
            os.write_bool(2, self.tracking)?;
        }
        if self.itemid != 0 {
            os.write_uint64(3, self.itemid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemShipping {
        MsgItemShipping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemShipping| { &m.seller },
                |m: &mut MsgItemShipping| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tracking",
                |m: &MsgItemShipping| { &m.tracking },
                |m: &mut MsgItemShipping| { &mut m.tracking },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemShipping| { &m.itemid },
                |m: &mut MsgItemShipping| { &mut m.itemid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemShipping>(
                "MsgItemShipping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemShipping {
        static instance: ::protobuf::rt::LazyV2<MsgItemShipping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemShipping::new)
    }
}

impl ::protobuf::Clear for MsgItemShipping {
    fn clear(&mut self) {
        self.seller.clear();
        self.tracking = false;
        self.itemid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemShipping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemShipping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgItemResell {
    // message fields
    pub seller: ::std::string::String,
    pub itemid: u64,
    pub shipping_cost: i64,
    pub discount: i64,
    pub local_pickup: ::std::string::String,
    pub shipping_region: ::protobuf::RepeatedField<::std::string::String>,
    pub note: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgItemResell {
    fn default() -> &'a MsgItemResell {
        <MsgItemResell as ::protobuf::Message>::default_instance()
    }
}

impl MsgItemResell {
    pub fn new() -> MsgItemResell {
        ::std::default::Default::default()
    }

    // string seller = 1;


    pub fn get_seller(&self) -> &str {
        &self.seller
    }
    pub fn clear_seller(&mut self) {
        self.seller.clear();
    }

    // Param is passed by value, moved
    pub fn set_seller(&mut self, v: ::std::string::String) {
        self.seller = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seller(&mut self) -> &mut ::std::string::String {
        &mut self.seller
    }

    // Take field
    pub fn take_seller(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seller, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // int64 shipping_cost = 3;


    pub fn get_shipping_cost(&self) -> i64 {
        self.shipping_cost
    }
    pub fn clear_shipping_cost(&mut self) {
        self.shipping_cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_shipping_cost(&mut self, v: i64) {
        self.shipping_cost = v;
    }

    // int64 discount = 4;


    pub fn get_discount(&self) -> i64 {
        self.discount
    }
    pub fn clear_discount(&mut self) {
        self.discount = 0;
    }

    // Param is passed by value, moved
    pub fn set_discount(&mut self, v: i64) {
        self.discount = v;
    }

    // string local_pickup = 5;


    pub fn get_local_pickup(&self) -> &str {
        &self.local_pickup
    }
    pub fn clear_local_pickup(&mut self) {
        self.local_pickup.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_pickup(&mut self, v: ::std::string::String) {
        self.local_pickup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_pickup(&mut self) -> &mut ::std::string::String {
        &mut self.local_pickup
    }

    // Take field
    pub fn take_local_pickup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_pickup, ::std::string::String::new())
    }

    // repeated string shipping_region = 6;


    pub fn get_shipping_region(&self) -> &[::std::string::String] {
        &self.shipping_region
    }
    pub fn clear_shipping_region(&mut self) {
        self.shipping_region.clear();
    }

    // Param is passed by value, moved
    pub fn set_shipping_region(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.shipping_region = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shipping_region(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.shipping_region
    }

    // Take field
    pub fn take_shipping_region(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.shipping_region, ::protobuf::RepeatedField::new())
    }

    // string note = 7;


    pub fn get_note(&self) -> &str {
        &self.note
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        &mut self.note
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgItemResell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seller)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shipping_cost = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.discount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.local_pickup)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.shipping_region)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seller.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seller);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shipping_cost != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shipping_cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.discount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.discount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_pickup.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.local_pickup);
        }
        for value in &self.shipping_region {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.note);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seller.is_empty() {
            os.write_string(1, &self.seller)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if self.shipping_cost != 0 {
            os.write_int64(3, self.shipping_cost)?;
        }
        if self.discount != 0 {
            os.write_int64(4, self.discount)?;
        }
        if !self.local_pickup.is_empty() {
            os.write_string(5, &self.local_pickup)?;
        }
        for v in &self.shipping_region {
            os.write_string(6, &v)?;
        };
        if !self.note.is_empty() {
            os.write_string(7, &self.note)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgItemResell {
        MsgItemResell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seller",
                |m: &MsgItemResell| { &m.seller },
                |m: &mut MsgItemResell| { &mut m.seller },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgItemResell| { &m.itemid },
                |m: &mut MsgItemResell| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shipping_cost",
                |m: &MsgItemResell| { &m.shipping_cost },
                |m: &mut MsgItemResell| { &mut m.shipping_cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "discount",
                |m: &MsgItemResell| { &m.discount },
                |m: &mut MsgItemResell| { &mut m.discount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "local_pickup",
                |m: &MsgItemResell| { &m.local_pickup },
                |m: &mut MsgItemResell| { &mut m.local_pickup },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shipping_region",
                |m: &MsgItemResell| { &m.shipping_region },
                |m: &mut MsgItemResell| { &mut m.shipping_region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "note",
                |m: &MsgItemResell| { &m.note },
                |m: &mut MsgItemResell| { &mut m.note },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgItemResell>(
                "MsgItemResell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgItemResell {
        static instance: ::protobuf::rt::LazyV2<MsgItemResell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgItemResell::new)
    }
}

impl ::protobuf::Clear for MsgItemResell {
    fn clear(&mut self) {
        self.seller.clear();
        self.itemid = 0;
        self.shipping_cost = 0;
        self.discount = 0;
        self.local_pickup.clear();
        self.shipping_region.clear();
        self.note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgItemResell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgItemResell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub MaxActivePeriod: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub MaxEstimatorCreatorRatio: i64,
    pub MaxBuyerReward: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration MaxActivePeriod = 1;


    pub fn get_MaxActivePeriod(&self) -> &::protobuf::well_known_types::Duration {
        self.MaxActivePeriod.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_MaxActivePeriod(&mut self) {
        self.MaxActivePeriod.clear();
    }

    pub fn has_MaxActivePeriod(&self) -> bool {
        self.MaxActivePeriod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_MaxActivePeriod(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.MaxActivePeriod = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_MaxActivePeriod(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.MaxActivePeriod.is_none() {
            self.MaxActivePeriod.set_default();
        }
        self.MaxActivePeriod.as_mut().unwrap()
    }

    // Take field
    pub fn take_MaxActivePeriod(&mut self) -> ::protobuf::well_known_types::Duration {
        self.MaxActivePeriod.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // int64 MaxEstimatorCreatorRatio = 2;


    pub fn get_MaxEstimatorCreatorRatio(&self) -> i64 {
        self.MaxEstimatorCreatorRatio
    }
    pub fn clear_MaxEstimatorCreatorRatio(&mut self) {
        self.MaxEstimatorCreatorRatio = 0;
    }

    // Param is passed by value, moved
    pub fn set_MaxEstimatorCreatorRatio(&mut self, v: i64) {
        self.MaxEstimatorCreatorRatio = v;
    }

    // int64 MaxBuyerReward = 3;


    pub fn get_MaxBuyerReward(&self) -> i64 {
        self.MaxBuyerReward
    }
    pub fn clear_MaxBuyerReward(&mut self) {
        self.MaxBuyerReward = 0;
    }

    // Param is passed by value, moved
    pub fn set_MaxBuyerReward(&mut self, v: i64) {
        self.MaxBuyerReward = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.MaxActivePeriod {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.MaxActivePeriod)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.MaxEstimatorCreatorRatio = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.MaxBuyerReward = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.MaxActivePeriod.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.MaxEstimatorCreatorRatio != 0 {
            my_size += ::protobuf::rt::value_size(2, self.MaxEstimatorCreatorRatio, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.MaxBuyerReward != 0 {
            my_size += ::protobuf::rt::value_size(3, self.MaxBuyerReward, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.MaxActivePeriod.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.MaxEstimatorCreatorRatio != 0 {
            os.write_int64(2, self.MaxEstimatorCreatorRatio)?;
        }
        if self.MaxBuyerReward != 0 {
            os.write_int64(3, self.MaxBuyerReward)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "MaxActivePeriod",
                |m: &Params| { &m.MaxActivePeriod },
                |m: &mut Params| { &mut m.MaxActivePeriod },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "MaxEstimatorCreatorRatio",
                |m: &Params| { &m.MaxEstimatorCreatorRatio },
                |m: &mut Params| { &mut m.MaxEstimatorCreatorRatio },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "MaxBuyerReward",
                |m: &Params| { &m.MaxBuyerReward },
                |m: &mut Params| { &mut m.MaxBuyerReward },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.MaxActivePeriod.clear();
        self.MaxEstimatorCreatorRatio = 0;
        self.MaxBuyerReward = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgTokenizeItem {
    // message fields
    pub sender: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgTokenizeItem {
    fn default() -> &'a MsgTokenizeItem {
        <MsgTokenizeItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgTokenizeItem {
    pub fn new() -> MsgTokenizeItem {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // uint64 id = 3;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgTokenizeItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if self.id != 0 {
            os.write_uint64(3, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgTokenizeItem {
        MsgTokenizeItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgTokenizeItem| { &m.sender },
                |m: &mut MsgTokenizeItem| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgTokenizeItem| { &m.id },
                |m: &mut MsgTokenizeItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgTokenizeItem>(
                "MsgTokenizeItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgTokenizeItem {
        static instance: ::protobuf::rt::LazyV2<MsgTokenizeItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgTokenizeItem::new)
    }
}

impl ::protobuf::Clear for MsgTokenizeItem {
    fn clear(&mut self) {
        self.sender.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgTokenizeItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgTokenizeItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUnTokenizeItem {
    // message fields
    pub sender: ::std::string::String,
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUnTokenizeItem {
    fn default() -> &'a MsgUnTokenizeItem {
        <MsgUnTokenizeItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgUnTokenizeItem {
    pub fn new() -> MsgUnTokenizeItem {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // uint64 id = 3;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for MsgUnTokenizeItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if self.id != 0 {
            os.write_uint64(3, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUnTokenizeItem {
        MsgUnTokenizeItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgUnTokenizeItem| { &m.sender },
                |m: &mut MsgUnTokenizeItem| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &MsgUnTokenizeItem| { &m.id },
                |m: &mut MsgUnTokenizeItem| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUnTokenizeItem>(
                "MsgUnTokenizeItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUnTokenizeItem {
        static instance: ::protobuf::rt::LazyV2<MsgUnTokenizeItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUnTokenizeItem::new)
    }
}

impl ::protobuf::Clear for MsgUnTokenizeItem {
    fn clear(&mut self) {
        self.sender.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUnTokenizeItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUnTokenizeItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nitem.proto\x12\x12trstlabs.trst.trst\x1a\x1fgoogle/protobuf/timestam\
    p.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x14gogoproto/gogo.prot\
    o\"\x8a\x03\n\x04Item\x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creato\
    r\x12\x0e\n\x02id\x18\x03\x20\x01(\x04R\x02id\x12\x14\n\x05title\x18\x04\
    \x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x05\x20\x01(\tR\x0bde\
    scription\x12\x16\n\x06status\x18\x06\x20\x01(\tR\x06status\x12>\n\nesti\
    mation\x18\x07\x20\x01(\x0b2\x1e.trstlabs.trst.trst.EstimationR\nestimat\
    ion\x12N\n\x10listing_duration\x18\x08\x20\x01(\x0b2#.trstlabs.trst.trst\
    .ListingDurationR\x0flistingDuration\x128\n\x08transfer\x18\t\x20\x01(\
    \x0b2\x1c.trstlabs.trst.trst.TransferR\x08transfer\x12>\n\nproperties\
    \x18\n\x20\x01(\x0b2\x1e.trstlabs.trst.trst.PropertiesR\nproperties\"\
    \xf9\x02\n\nEstimation\x12)\n\x10estimation_price\x18\x01\x20\x01(\x03R\
    \x0festimationPrice\x12%\n\x0ebest_estimator\x18\x02\x20\x01(\tR\rbestEs\
    timator\x12)\n\x10estimation_count\x18\x03\x20\x01(\x03R\x0festimationCo\
    unt\x12)\n\x10estimation_total\x18\x04\x20\x01(\x03R\x0festimationTotal\
    \x12%\n\x0eestimator_list\x18\x05\x20\x03(\tR\restimatorList\x12'\n\x0fe\
    stimation_list\x18\x06\x20\x03(\x03R\x0eestimationList\x12\x1a\n\x08comm\
    ents\x18\x07\x20\x03(\tR\x08comments\x12%\n\x0edeposit_amount\x18\x08\
    \x20\x01(\x03R\rdepositAmount\x12\x1a\n\x08contract\x18\t\x20\x01(\tR\
    \x08contract\x12\x14\n\x05flags\x18\n\x20\x01(\x03R\x05flags\"\x99\x01\n\
    \x0fListingDuration\x12E\n\x0bsubmit_time\x18\x01\x20\x01(\x0b2\x1a.goog\
    le.protobuf.TimestampR\nsubmitTimeB\x08\x90\xdf\x1f\x01\xc8\xde\x1f\0\
    \x12?\n\x08end_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x07endTimeB\x08\x90\xdf\x1f\x01\xc8\xde\x1f\0\"\x8d\x02\n\x08Transfer\
    \x12#\n\rshipping_cost\x18\x01\x20\x01(\x03R\x0cshippingCost\x12!\n\x0cl\
    ocal_pickup\x18\x02\x20\x01(\tR\x0blocalPickup\x12\x1a\n\x08tracking\x18\
    \x03\x20\x01(\x08R\x08tracking\x12'\n\x0fshipping_region\x18\x04\x20\x03\
    (\tR\x0eshippingRegion\x12\x16\n\x06rating\x18\x05\x20\x01(\x03R\x06rati\
    ng\x12\x12\n\x04note\x18\x06\x20\x01(\tR\x04note\x12\x1a\n\x08discount\
    \x18\x07\x20\x01(\x03R\x08discount\x12\x14\n\x05buyer\x18\x08\x20\x01(\t\
    R\x05buyer\x12\x16\n\x06seller\x18\t\x20\x01(\tR\x06seller\"\xdb\x01\n\n\
    Properties\x12\x1c\n\tcondition\x18\x01\x20\x01(\x03R\tcondition\x12\x16\
    \n\x06photos\x18\x02\x20\x03(\tR\x06photos\x12\x19\n\x08is_token\x18\x03\
    \x20\x01(\x08R\x07isToken\x12'\n\x0festimation_only\x18\x04\x20\x01(\x08\
    R\x0eestimationOnly\x12\x12\n\x04tags\x18\x05\x20\x03(\tR\x04tags\x12\
    \x1b\n\ttoken_uri\x18\x06\x20\x01(\tR\x08tokenUri\x12\"\n\x0ctransferabl\
    e\x18\x07\x20\x01(\x08R\x0ctransferable\"\xc1\x03\n\rMsgCreateItem\x12\
    \x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\x12\x14\n\x05title\x18\
    \x02\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\
    \x0bdescription\x12#\n\rshipping_cost\x18\x04\x20\x01(\x03R\x0cshippingC\
    ost\x12!\n\x0clocal_pickup\x18\x05\x20\x01(\tR\x0blocalPickup\x12)\n\x10\
    estimation_count\x18\x06\x20\x01(\x03R\x0festimationCount\x12\x12\n\x04t\
    ags\x18\x07\x20\x03(\tR\x04tags\x12\x1c\n\tcondition\x18\x08\x20\x01(\
    \x03R\tcondition\x12'\n\x0fshipping_region\x18\t\x20\x03(\tR\x0eshipping\
    Region\x12%\n\x0edeposit_amount\x18\n\x20\x01(\x03R\rdepositAmount\x12\
    \x19\n\x08init_msg\x18\x0b\x20\x01(\x0cR\x07initMsg\x12\x19\n\x08auto_ms\
    g\x18\x0c\x20\x01(\x0cR\x07autoMsg\x12\x16\n\x06photos\x18\r\x20\x03(\tR\
    \x06photos\x12\x1b\n\ttoken_uri\x18\x0e\x20\x01(\tR\x08tokenUri\"\xa8\
    \x01\n\rMsgUpdateItem\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\x04R\x02id\x12#\n\rshipping_cost\x18\
    \x03\x20\x01(\x03R\x0cshippingCost\x12!\n\x0clocal_pickup\x18\x04\x20\
    \x01(\tR\x0blocalPickup\x12'\n\x0fshipping_region\x18\x05\x20\x03(\tR\
    \x0eshippingRegion\"7\n\rMsgDeleteItem\x12\x16\n\x06seller\x18\x01\x20\
    \x01(\tR\x06seller\x12\x0e\n\x02id\x18\x02\x20\x01(\x04R\x02id\"f\n\x13M\
    sgRevealEstimation\x12\x18\n\x07creator\x18\x01\x20\x01(\tR\x07creator\
    \x12\x16\n\x06itemid\x18\x02\x20\x01(\x04R\x06itemid\x12\x1d\n\nreveal_m\
    sg\x18\x03\x20\x01(\x0cR\trevealMsg\"p\n\x13MsgItemTransferable\x12\x16\
    \n\x06seller\x18\x01\x20\x01(\tR\x06seller\x12)\n\x10transferable_msg\
    \x18\x02\x20\x01(\x0cR\x0ftransferableMsg\x12\x16\n\x06itemid\x18\x03\
    \x20\x01(\x04R\x06itemid\"]\n\x0fMsgItemShipping\x12\x16\n\x06seller\x18\
    \x01\x20\x01(\tR\x06seller\x12\x1a\n\x08tracking\x18\x02\x20\x01(\x08R\
    \x08tracking\x12\x16\n\x06itemid\x18\x03\x20\x01(\x04R\x06itemid\"\xe0\
    \x01\n\rMsgItemResell\x12\x16\n\x06seller\x18\x01\x20\x01(\tR\x06seller\
    \x12\x16\n\x06itemid\x18\x02\x20\x01(\x04R\x06itemid\x12#\n\rshipping_co\
    st\x18\x03\x20\x01(\x03R\x0cshippingCost\x12\x1a\n\x08discount\x18\x04\
    \x20\x01(\x03R\x08discount\x12!\n\x0clocal_pickup\x18\x05\x20\x01(\tR\
    \x0blocalPickup\x12'\n\x0fshipping_region\x18\x06\x20\x03(\tR\x0eshippin\
    gRegion\x12\x12\n\x04note\x18\x07\x20\x01(\tR\x04note\"\xe0\x01\n\x06Par\
    ams\x12l\n\x0fMaxActivePeriod\x18\x01\x20\x01(\x0b2\x19.google.protobuf.\
    DurationR\x0fMaxActivePeriodB'\xc8\xde\x1f\0\x98\xdf\x1f\x01\xea\xde\x1f\
    \x1bmax_active_period,omitempty\x12:\n\x18MaxEstimatorCreatorRatio\x18\
    \x02\x20\x01(\x03R\x18MaxEstimatorCreatorRatio\x12&\n\x0eMaxBuyerReward\
    \x18\x03\x20\x01(\x03R\x0eMaxBuyerReward:\x04\x98\xa0\x1f\0\"9\n\x0fMsgT\
    okenizeItem\x12\x16\n\x06sender\x18\x01\x20\x01(\tR\x06sender\x12\x0e\n\
    \x02id\x18\x03\x20\x01(\x04R\x02id\";\n\x11MsgUnTokenizeItem\x12\x16\n\
    \x06sender\x18\x01\x20\x01(\tR\x06sender\x12\x0e\n\x02id\x18\x03\x20\x01\
    (\x04R\x02idB'Z%github.com/trstlabs/trst/x/item/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
