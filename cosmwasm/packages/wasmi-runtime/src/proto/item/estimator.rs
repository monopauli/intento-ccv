// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `estimator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Estimator {
    // message fields
    pub estimator: ::std::string::String,
    pub itemid: u64,
    pub estimation: i64,
    pub deposit: ::protobuf::SingularPtrField<super::coin::Coin>,
    pub interested: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Estimator {
    fn default() -> &'a Estimator {
        <Estimator as ::protobuf::Message>::default_instance()
    }
}

impl Estimator {
    pub fn new() -> Estimator {
        ::std::default::Default::default()
    }

    // string estimator = 1;


    pub fn get_estimator(&self) -> &str {
        &self.estimator
    }
    pub fn clear_estimator(&mut self) {
        self.estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator(&mut self, v: ::std::string::String) {
        self.estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.estimator
    }

    // Take field
    pub fn take_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.estimator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // int64 estimation = 3;


    pub fn get_estimation(&self) -> i64 {
        self.estimation
    }
    pub fn clear_estimation(&mut self) {
        self.estimation = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimation(&mut self, v: i64) {
        self.estimation = v;
    }

    // .cosmos.base.v1beta1.Coin deposit = 4;


    pub fn get_deposit(&self) -> &super::coin::Coin {
        self.deposit.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    pub fn has_deposit(&self) -> bool {
        self.deposit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: super::coin::Coin) {
        self.deposit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut super::coin::Coin {
        if self.deposit.is_none() {
            self.deposit.set_default();
        }
        self.deposit.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit(&mut self) -> super::coin::Coin {
        self.deposit.take().unwrap_or_else(|| super::coin::Coin::new())
    }

    // bool interested = 5;


    pub fn get_interested(&self) -> bool {
        self.interested
    }
    pub fn clear_interested(&mut self) {
        self.interested = false;
    }

    // Param is passed by value, moved
    pub fn set_interested(&mut self, v: bool) {
        self.interested = v;
    }
}

impl ::protobuf::Message for Estimator {
    fn is_initialized(&self) -> bool {
        for v in &self.deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.estimator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.estimation = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.interested = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.estimator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.estimation != 0 {
            my_size += ::protobuf::rt::value_size(3, self.estimation, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.interested != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.estimator.is_empty() {
            os.write_string(1, &self.estimator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if self.estimation != 0 {
            os.write_int64(3, self.estimation)?;
        }
        if let Some(ref v) = self.deposit.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.interested != false {
            os.write_bool(5, self.interested)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Estimator {
        Estimator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator",
                |m: &Estimator| { &m.estimator },
                |m: &mut Estimator| { &mut m.estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &Estimator| { &m.itemid },
                |m: &mut Estimator| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "estimation",
                |m: &Estimator| { &m.estimation },
                |m: &mut Estimator| { &mut m.estimation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "deposit",
                |m: &Estimator| { &m.deposit },
                |m: &mut Estimator| { &mut m.deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "interested",
                |m: &Estimator| { &m.interested },
                |m: &mut Estimator| { &mut m.interested },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Estimator>(
                "Estimator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Estimator {
        static instance: ::protobuf::rt::LazyV2<Estimator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Estimator::new)
    }
}

impl ::protobuf::Clear for Estimator {
    fn clear(&mut self) {
        self.estimator.clear();
        self.itemid = 0;
        self.estimation = 0;
        self.deposit.clear();
        self.interested = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Estimator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Estimator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateEstimation {
    // message fields
    pub estimator: ::std::string::String,
    pub estimate_msg: ::std::vec::Vec<u8>,
    pub itemid: u64,
    pub deposit: i64,
    pub interested: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateEstimation {
    fn default() -> &'a MsgCreateEstimation {
        <MsgCreateEstimation as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateEstimation {
    pub fn new() -> MsgCreateEstimation {
        ::std::default::Default::default()
    }

    // string estimator = 1;


    pub fn get_estimator(&self) -> &str {
        &self.estimator
    }
    pub fn clear_estimator(&mut self) {
        self.estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator(&mut self, v: ::std::string::String) {
        self.estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.estimator
    }

    // Take field
    pub fn take_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.estimator, ::std::string::String::new())
    }

    // bytes estimate_msg = 2;


    pub fn get_estimate_msg(&self) -> &[u8] {
        &self.estimate_msg
    }
    pub fn clear_estimate_msg(&mut self) {
        self.estimate_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimate_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.estimate_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimate_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.estimate_msg
    }

    // Take field
    pub fn take_estimate_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.estimate_msg, ::std::vec::Vec::new())
    }

    // uint64 itemid = 3;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // int64 deposit = 4;


    pub fn get_deposit(&self) -> i64 {
        self.deposit
    }
    pub fn clear_deposit(&mut self) {
        self.deposit = 0;
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: i64) {
        self.deposit = v;
    }

    // bool interested = 5;


    pub fn get_interested(&self) -> bool {
        self.interested
    }
    pub fn clear_interested(&mut self) {
        self.interested = false;
    }

    // Param is passed by value, moved
    pub fn set_interested(&mut self, v: bool) {
        self.interested = v;
    }
}

impl ::protobuf::Message for MsgCreateEstimation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.estimator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.estimate_msg)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.deposit = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.interested = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.estimator);
        }
        if !self.estimate_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.estimate_msg);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.deposit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.deposit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interested != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.estimator.is_empty() {
            os.write_string(1, &self.estimator)?;
        }
        if !self.estimate_msg.is_empty() {
            os.write_bytes(2, &self.estimate_msg)?;
        }
        if self.itemid != 0 {
            os.write_uint64(3, self.itemid)?;
        }
        if self.deposit != 0 {
            os.write_int64(4, self.deposit)?;
        }
        if self.interested != false {
            os.write_bool(5, self.interested)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateEstimation {
        MsgCreateEstimation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator",
                |m: &MsgCreateEstimation| { &m.estimator },
                |m: &mut MsgCreateEstimation| { &mut m.estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "estimate_msg",
                |m: &MsgCreateEstimation| { &m.estimate_msg },
                |m: &mut MsgCreateEstimation| { &mut m.estimate_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgCreateEstimation| { &m.itemid },
                |m: &mut MsgCreateEstimation| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "deposit",
                |m: &MsgCreateEstimation| { &m.deposit },
                |m: &mut MsgCreateEstimation| { &mut m.deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "interested",
                |m: &MsgCreateEstimation| { &m.interested },
                |m: &mut MsgCreateEstimation| { &mut m.interested },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateEstimation>(
                "MsgCreateEstimation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateEstimation {
        static instance: ::protobuf::rt::LazyV2<MsgCreateEstimation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateEstimation::new)
    }
}

impl ::protobuf::Clear for MsgCreateEstimation {
    fn clear(&mut self) {
        self.estimator.clear();
        self.estimate_msg.clear();
        self.itemid = 0;
        self.deposit = 0;
        self.interested = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateEstimation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateEstimation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUpdateLike {
    // message fields
    pub estimator: ::std::string::String,
    pub itemid: u64,
    pub interested: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateLike {
    fn default() -> &'a MsgUpdateLike {
        <MsgUpdateLike as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateLike {
    pub fn new() -> MsgUpdateLike {
        ::std::default::Default::default()
    }

    // string estimator = 1;


    pub fn get_estimator(&self) -> &str {
        &self.estimator
    }
    pub fn clear_estimator(&mut self) {
        self.estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator(&mut self, v: ::std::string::String) {
        self.estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.estimator
    }

    // Take field
    pub fn take_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.estimator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // bool interested = 3;


    pub fn get_interested(&self) -> bool {
        self.interested
    }
    pub fn clear_interested(&mut self) {
        self.interested = false;
    }

    // Param is passed by value, moved
    pub fn set_interested(&mut self, v: bool) {
        self.interested = v;
    }
}

impl ::protobuf::Message for MsgUpdateLike {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.estimator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.interested = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.estimator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.interested != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.estimator.is_empty() {
            os.write_string(1, &self.estimator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if self.interested != false {
            os.write_bool(3, self.interested)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateLike {
        MsgUpdateLike::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator",
                |m: &MsgUpdateLike| { &m.estimator },
                |m: &mut MsgUpdateLike| { &mut m.estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgUpdateLike| { &m.itemid },
                |m: &mut MsgUpdateLike| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "interested",
                |m: &MsgUpdateLike| { &m.interested },
                |m: &mut MsgUpdateLike| { &mut m.interested },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUpdateLike>(
                "MsgUpdateLike",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUpdateLike {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateLike> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateLike::new)
    }
}

impl ::protobuf::Clear for MsgUpdateLike {
    fn clear(&mut self) {
        self.estimator.clear();
        self.itemid = 0;
        self.interested = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUpdateLike {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateLike {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDeleteEstimation {
    // message fields
    pub estimator: ::std::string::String,
    pub itemid: u64,
    pub delete_msg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDeleteEstimation {
    fn default() -> &'a MsgDeleteEstimation {
        <MsgDeleteEstimation as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeleteEstimation {
    pub fn new() -> MsgDeleteEstimation {
        ::std::default::Default::default()
    }

    // string estimator = 1;


    pub fn get_estimator(&self) -> &str {
        &self.estimator
    }
    pub fn clear_estimator(&mut self) {
        self.estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator(&mut self, v: ::std::string::String) {
        self.estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.estimator
    }

    // Take field
    pub fn take_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.estimator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // bytes delete_msg = 3;


    pub fn get_delete_msg(&self) -> &[u8] {
        &self.delete_msg
    }
    pub fn clear_delete_msg(&mut self) {
        self.delete_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_delete_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.delete_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delete_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.delete_msg
    }

    // Take field
    pub fn take_delete_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.delete_msg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgDeleteEstimation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.estimator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.delete_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.estimator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.delete_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.delete_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.estimator.is_empty() {
            os.write_string(1, &self.estimator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if !self.delete_msg.is_empty() {
            os.write_bytes(3, &self.delete_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDeleteEstimation {
        MsgDeleteEstimation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator",
                |m: &MsgDeleteEstimation| { &m.estimator },
                |m: &mut MsgDeleteEstimation| { &mut m.estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgDeleteEstimation| { &m.itemid },
                |m: &mut MsgDeleteEstimation| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "delete_msg",
                |m: &MsgDeleteEstimation| { &m.delete_msg },
                |m: &mut MsgDeleteEstimation| { &mut m.delete_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDeleteEstimation>(
                "MsgDeleteEstimation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDeleteEstimation {
        static instance: ::protobuf::rt::LazyV2<MsgDeleteEstimation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDeleteEstimation::new)
    }
}

impl ::protobuf::Clear for MsgDeleteEstimation {
    fn clear(&mut self) {
        self.estimator.clear();
        self.itemid = 0;
        self.delete_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDeleteEstimation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeleteEstimation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgFlagItem {
    // message fields
    pub estimator: ::std::string::String,
    pub itemid: u64,
    pub flag_msg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgFlagItem {
    fn default() -> &'a MsgFlagItem {
        <MsgFlagItem as ::protobuf::Message>::default_instance()
    }
}

impl MsgFlagItem {
    pub fn new() -> MsgFlagItem {
        ::std::default::Default::default()
    }

    // string estimator = 1;


    pub fn get_estimator(&self) -> &str {
        &self.estimator
    }
    pub fn clear_estimator(&mut self) {
        self.estimator.clear();
    }

    // Param is passed by value, moved
    pub fn set_estimator(&mut self, v: ::std::string::String) {
        self.estimator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_estimator(&mut self) -> &mut ::std::string::String {
        &mut self.estimator
    }

    // Take field
    pub fn take_estimator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.estimator, ::std::string::String::new())
    }

    // uint64 itemid = 2;


    pub fn get_itemid(&self) -> u64 {
        self.itemid
    }
    pub fn clear_itemid(&mut self) {
        self.itemid = 0;
    }

    // Param is passed by value, moved
    pub fn set_itemid(&mut self, v: u64) {
        self.itemid = v;
    }

    // bytes flag_msg = 3;


    pub fn get_flag_msg(&self) -> &[u8] {
        &self.flag_msg
    }
    pub fn clear_flag_msg(&mut self) {
        self.flag_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_flag_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.flag_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flag_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.flag_msg
    }

    // Take field
    pub fn take_flag_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.flag_msg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgFlagItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.estimator)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.itemid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.flag_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.estimator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.estimator);
        }
        if self.itemid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.itemid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.flag_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.flag_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.estimator.is_empty() {
            os.write_string(1, &self.estimator)?;
        }
        if self.itemid != 0 {
            os.write_uint64(2, self.itemid)?;
        }
        if !self.flag_msg.is_empty() {
            os.write_bytes(3, &self.flag_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgFlagItem {
        MsgFlagItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "estimator",
                |m: &MsgFlagItem| { &m.estimator },
                |m: &mut MsgFlagItem| { &mut m.estimator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "itemid",
                |m: &MsgFlagItem| { &m.itemid },
                |m: &mut MsgFlagItem| { &mut m.itemid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "flag_msg",
                |m: &MsgFlagItem| { &m.flag_msg },
                |m: &mut MsgFlagItem| { &mut m.flag_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgFlagItem>(
                "MsgFlagItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgFlagItem {
        static instance: ::protobuf::rt::LazyV2<MsgFlagItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgFlagItem::new)
    }
}

impl ::protobuf::Clear for MsgFlagItem {
    fn clear(&mut self) {
        self.estimator.clear();
        self.itemid = 0;
        self.flag_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgFlagItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgFlagItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0festimator.proto\x12\x12trstlabs.trst.trst\x1a\x14gogoproto/gogo.pr\
    oto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xbc\x01\n\tEstimator\x12\x1c\
    \n\testimator\x18\x01\x20\x01(\tR\testimator\x12\x16\n\x06itemid\x18\x02\
    \x20\x01(\x04R\x06itemid\x12\x1e\n\nestimation\x18\x03\x20\x01(\x03R\nes\
    timation\x129\n\x07deposit\x18\x04\x20\x01(\x0b2\x19.cosmos.base.v1beta1\
    .CoinR\x07depositB\x04\xc8\xde\x1f\0\x12\x1e\n\ninterested\x18\x05\x20\
    \x01(\x08R\ninterested\"\xa8\x01\n\x13MsgCreateEstimation\x12\x1c\n\test\
    imator\x18\x01\x20\x01(\tR\testimator\x12!\n\x0cestimate_msg\x18\x02\x20\
    \x01(\x0cR\x0bestimateMsg\x12\x16\n\x06itemid\x18\x03\x20\x01(\x04R\x06i\
    temid\x12\x18\n\x07deposit\x18\x04\x20\x01(\x03R\x07deposit\x12\x1e\n\ni\
    nterested\x18\x05\x20\x01(\x08R\ninterested\"e\n\rMsgUpdateLike\x12\x1c\
    \n\testimator\x18\x01\x20\x01(\tR\testimator\x12\x16\n\x06itemid\x18\x02\
    \x20\x01(\x04R\x06itemid\x12\x1e\n\ninterested\x18\x03\x20\x01(\x08R\nin\
    terested\"j\n\x13MsgDeleteEstimation\x12\x1c\n\testimator\x18\x01\x20\
    \x01(\tR\testimator\x12\x16\n\x06itemid\x18\x02\x20\x01(\x04R\x06itemid\
    \x12\x1d\n\ndelete_msg\x18\x03\x20\x01(\x0cR\tdeleteMsg\"^\n\x0bMsgFlagI\
    tem\x12\x1c\n\testimator\x18\x01\x20\x01(\tR\testimator\x12\x16\n\x06ite\
    mid\x18\x02\x20\x01(\x04R\x06itemid\x12\x19\n\x08flag_msg\x18\x03\x20\
    \x01(\x0cR\x07flagMsgB'Z%github.com/trstlabs/trst/x/item/typesb\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
