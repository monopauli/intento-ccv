// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/gov/v1beta1/gov.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct WeightedVoteOption {
    // message fields
    pub option: VoteOption,
    pub weight: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WeightedVoteOption {
    fn default() -> &'a WeightedVoteOption {
        <WeightedVoteOption as ::protobuf::Message>::default_instance()
    }
}

impl WeightedVoteOption {
    pub fn new() -> WeightedVoteOption {
        ::std::default::Default::default()
    }

    // .cosmos.gov.v1beta1.VoteOption option = 1;


    pub fn get_option(&self) -> VoteOption {
        self.option
    }
    pub fn clear_option(&mut self) {
        self.option = VoteOption::VOTE_OPTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: VoteOption) {
        self.option = v;
    }

    // string weight = 2;


    pub fn get_weight(&self) -> &str {
        &self.weight
    }
    pub fn clear_weight(&mut self) {
        self.weight.clear();
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: ::std::string::String) {
        self.weight = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weight(&mut self) -> &mut ::std::string::String {
        &mut self.weight
    }

    // Take field
    pub fn take_weight(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weight, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WeightedVoteOption {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.option, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weight)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.option != VoteOption::VOTE_OPTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.option);
        }
        if !self.weight.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.weight);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.option != VoteOption::VOTE_OPTION_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.option))?;
        }
        if !self.weight.is_empty() {
            os.write_string(2, &self.weight)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WeightedVoteOption {
        WeightedVoteOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VoteOption>>(
                "option",
                |m: &WeightedVoteOption| { &m.option },
                |m: &mut WeightedVoteOption| { &mut m.option },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weight",
                |m: &WeightedVoteOption| { &m.weight },
                |m: &mut WeightedVoteOption| { &mut m.weight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WeightedVoteOption>(
                "WeightedVoteOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WeightedVoteOption {
        static instance: ::protobuf::rt::LazyV2<WeightedVoteOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WeightedVoteOption::new)
    }
}

impl ::protobuf::Clear for WeightedVoteOption {
    fn clear(&mut self) {
        self.option = VoteOption::VOTE_OPTION_UNSPECIFIED;
        self.weight.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WeightedVoteOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WeightedVoteOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TextProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TextProposal {
    fn default() -> &'a TextProposal {
        <TextProposal as ::protobuf::Message>::default_instance()
    }
}

impl TextProposal {
    pub fn new() -> TextProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TextProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TextProposal {
        TextProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &TextProposal| { &m.title },
                |m: &mut TextProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &TextProposal| { &m.description },
                |m: &mut TextProposal| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TextProposal>(
                "TextProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TextProposal {
        static instance: ::protobuf::rt::LazyV2<TextProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TextProposal::new)
    }
}

impl ::protobuf::Clear for TextProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TextProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Deposit {
    // message fields
    pub proposal_id: u64,
    pub depositor: ::std::string::String,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Deposit {
    fn default() -> &'a Deposit {
        <Deposit as ::protobuf::Message>::default_instance()
    }
}

impl Deposit {
    pub fn new() -> Deposit {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // string depositor = 2;


    pub fn get_depositor(&self) -> &str {
        &self.depositor
    }
    pub fn clear_depositor(&mut self) {
        self.depositor.clear();
    }

    // Param is passed by value, moved
    pub fn set_depositor(&mut self, v: ::std::string::String) {
        self.depositor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_depositor(&mut self) -> &mut ::std::string::String {
        &mut self.depositor
    }

    // Take field
    pub fn take_depositor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.depositor, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Deposit {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.depositor)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        for v in &self.amount {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Deposit {
        Deposit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &Deposit| { &m.proposal_id },
                |m: &mut Deposit| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "depositor",
                |m: &Deposit| { &m.depositor },
                |m: &mut Deposit| { &mut m.depositor },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &Deposit| { &m.amount },
                |m: &mut Deposit| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Deposit>(
                "Deposit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Deposit {
        static instance: ::protobuf::rt::LazyV2<Deposit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Deposit::new)
    }
}

impl ::protobuf::Clear for Deposit {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.depositor.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Deposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Deposit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Proposal {
    // message fields
    pub proposal_id: u64,
    pub content: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub status: ProposalStatus,
    pub final_tally_result: ::protobuf::SingularPtrField<TallyResult>,
    pub submit_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub deposit_end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub total_deposit: ::protobuf::RepeatedField<super::coin::Coin>,
    pub voting_start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub voting_end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Proposal {
    fn default() -> &'a Proposal {
        <Proposal as ::protobuf::Message>::default_instance()
    }
}

impl Proposal {
    pub fn new() -> Proposal {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // .google.protobuf.Any content = 2;


    pub fn get_content(&self) -> &::protobuf::well_known_types::Any {
        self.content.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    pub fn has_content(&self) -> bool {
        self.content.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::protobuf::well_known_types::Any) {
        self.content = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.content.is_none() {
            self.content.set_default();
        }
        self.content.as_mut().unwrap()
    }

    // Take field
    pub fn take_content(&mut self) -> ::protobuf::well_known_types::Any {
        self.content.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .cosmos.gov.v1beta1.ProposalStatus status = 3;


    pub fn get_status(&self) -> ProposalStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ProposalStatus) {
        self.status = v;
    }

    // .cosmos.gov.v1beta1.TallyResult final_tally_result = 4;


    pub fn get_final_tally_result(&self) -> &TallyResult {
        self.final_tally_result.as_ref().unwrap_or_else(|| <TallyResult as ::protobuf::Message>::default_instance())
    }
    pub fn clear_final_tally_result(&mut self) {
        self.final_tally_result.clear();
    }

    pub fn has_final_tally_result(&self) -> bool {
        self.final_tally_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_final_tally_result(&mut self, v: TallyResult) {
        self.final_tally_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_tally_result(&mut self) -> &mut TallyResult {
        if self.final_tally_result.is_none() {
            self.final_tally_result.set_default();
        }
        self.final_tally_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_final_tally_result(&mut self) -> TallyResult {
        self.final_tally_result.take().unwrap_or_else(|| TallyResult::new())
    }

    // .google.protobuf.Timestamp submit_time = 5;


    pub fn get_submit_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.submit_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_submit_time(&mut self) {
        self.submit_time.clear();
    }

    pub fn has_submit_time(&self) -> bool {
        self.submit_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_submit_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.submit_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_submit_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.submit_time.is_none() {
            self.submit_time.set_default();
        }
        self.submit_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_submit_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.submit_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp deposit_end_time = 6;


    pub fn get_deposit_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.deposit_end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit_end_time(&mut self) {
        self.deposit_end_time.clear();
    }

    pub fn has_deposit_end_time(&self) -> bool {
        self.deposit_end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.deposit_end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.deposit_end_time.is_none() {
            self.deposit_end_time.set_default();
        }
        self.deposit_end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.deposit_end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated .cosmos.base.v1beta1.Coin total_deposit = 7;


    pub fn get_total_deposit(&self) -> &[super::coin::Coin] {
        &self.total_deposit
    }
    pub fn clear_total_deposit(&mut self) {
        self.total_deposit.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_deposit(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.total_deposit = v;
    }

    // Mutable pointer to the field.
    pub fn mut_total_deposit(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.total_deposit
    }

    // Take field
    pub fn take_total_deposit(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.total_deposit, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp voting_start_time = 8;


    pub fn get_voting_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.voting_start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_voting_start_time(&mut self) {
        self.voting_start_time.clear();
    }

    pub fn has_voting_start_time(&self) -> bool {
        self.voting_start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voting_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.voting_start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voting_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.voting_start_time.is_none() {
            self.voting_start_time.set_default();
        }
        self.voting_start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_voting_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.voting_start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp voting_end_time = 9;


    pub fn get_voting_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.voting_end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_voting_end_time(&mut self) {
        self.voting_end_time.clear();
    }

    pub fn has_voting_end_time(&self) -> bool {
        self.voting_end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voting_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.voting_end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voting_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.voting_end_time.is_none() {
            self.voting_end_time.set_default();
        }
        self.voting_end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_voting_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.voting_end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Proposal {
    fn is_initialized(&self) -> bool {
        for v in &self.content {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.final_tally_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.submit_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deposit_end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.total_deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.voting_start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.voting_end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.final_tally_result)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.submit_time)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit_end_time)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.total_deposit)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voting_start_time)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voting_end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.status != ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.status);
        }
        if let Some(ref v) = self.final_tally_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.submit_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.deposit_end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.total_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.voting_start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.voting_end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if let Some(ref v) = self.content.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.status != ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.final_tally_result.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.submit_time.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.deposit_end_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.total_deposit {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.voting_start_time.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.voting_end_time.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proposal {
        Proposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &Proposal| { &m.proposal_id },
                |m: &mut Proposal| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "content",
                |m: &Proposal| { &m.content },
                |m: &mut Proposal| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProposalStatus>>(
                "status",
                |m: &Proposal| { &m.status },
                |m: &mut Proposal| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TallyResult>>(
                "final_tally_result",
                |m: &Proposal| { &m.final_tally_result },
                |m: &mut Proposal| { &mut m.final_tally_result },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "submit_time",
                |m: &Proposal| { &m.submit_time },
                |m: &mut Proposal| { &mut m.submit_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "deposit_end_time",
                |m: &Proposal| { &m.deposit_end_time },
                |m: &mut Proposal| { &mut m.deposit_end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "total_deposit",
                |m: &Proposal| { &m.total_deposit },
                |m: &mut Proposal| { &mut m.total_deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "voting_start_time",
                |m: &Proposal| { &m.voting_start_time },
                |m: &mut Proposal| { &mut m.voting_start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "voting_end_time",
                |m: &Proposal| { &m.voting_end_time },
                |m: &mut Proposal| { &mut m.voting_end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Proposal>(
                "Proposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Proposal {
        static instance: ::protobuf::rt::LazyV2<Proposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Proposal::new)
    }
}

impl ::protobuf::Clear for Proposal {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.content.clear();
        self.status = ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED;
        self.final_tally_result.clear();
        self.submit_time.clear();
        self.deposit_end_time.clear();
        self.total_deposit.clear();
        self.voting_start_time.clear();
        self.voting_end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TallyResult {
    // message fields
    pub yes: ::std::string::String,
    pub abstain: ::std::string::String,
    pub no: ::std::string::String,
    pub no_with_veto: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TallyResult {
    fn default() -> &'a TallyResult {
        <TallyResult as ::protobuf::Message>::default_instance()
    }
}

impl TallyResult {
    pub fn new() -> TallyResult {
        ::std::default::Default::default()
    }

    // string yes = 1;


    pub fn get_yes(&self) -> &str {
        &self.yes
    }
    pub fn clear_yes(&mut self) {
        self.yes.clear();
    }

    // Param is passed by value, moved
    pub fn set_yes(&mut self, v: ::std::string::String) {
        self.yes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_yes(&mut self) -> &mut ::std::string::String {
        &mut self.yes
    }

    // Take field
    pub fn take_yes(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.yes, ::std::string::String::new())
    }

    // string abstain = 2;


    pub fn get_abstain(&self) -> &str {
        &self.abstain
    }
    pub fn clear_abstain(&mut self) {
        self.abstain.clear();
    }

    // Param is passed by value, moved
    pub fn set_abstain(&mut self, v: ::std::string::String) {
        self.abstain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abstain(&mut self) -> &mut ::std::string::String {
        &mut self.abstain
    }

    // Take field
    pub fn take_abstain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.abstain, ::std::string::String::new())
    }

    // string no = 3;


    pub fn get_no(&self) -> &str {
        &self.no
    }
    pub fn clear_no(&mut self) {
        self.no.clear();
    }

    // Param is passed by value, moved
    pub fn set_no(&mut self, v: ::std::string::String) {
        self.no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_no(&mut self) -> &mut ::std::string::String {
        &mut self.no
    }

    // Take field
    pub fn take_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.no, ::std::string::String::new())
    }

    // string no_with_veto = 4;


    pub fn get_no_with_veto(&self) -> &str {
        &self.no_with_veto
    }
    pub fn clear_no_with_veto(&mut self) {
        self.no_with_veto.clear();
    }

    // Param is passed by value, moved
    pub fn set_no_with_veto(&mut self, v: ::std::string::String) {
        self.no_with_veto = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_no_with_veto(&mut self) -> &mut ::std::string::String {
        &mut self.no_with_veto
    }

    // Take field
    pub fn take_no_with_veto(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.no_with_veto, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TallyResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.yes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.abstain)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.no)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.no_with_veto)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.yes.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.yes);
        }
        if !self.abstain.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.abstain);
        }
        if !self.no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.no);
        }
        if !self.no_with_veto.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.no_with_veto);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.yes.is_empty() {
            os.write_string(1, &self.yes)?;
        }
        if !self.abstain.is_empty() {
            os.write_string(2, &self.abstain)?;
        }
        if !self.no.is_empty() {
            os.write_string(3, &self.no)?;
        }
        if !self.no_with_veto.is_empty() {
            os.write_string(4, &self.no_with_veto)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TallyResult {
        TallyResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "yes",
                |m: &TallyResult| { &m.yes },
                |m: &mut TallyResult| { &mut m.yes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "abstain",
                |m: &TallyResult| { &m.abstain },
                |m: &mut TallyResult| { &mut m.abstain },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "no",
                |m: &TallyResult| { &m.no },
                |m: &mut TallyResult| { &mut m.no },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "no_with_veto",
                |m: &TallyResult| { &m.no_with_veto },
                |m: &mut TallyResult| { &mut m.no_with_veto },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TallyResult>(
                "TallyResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TallyResult {
        static instance: ::protobuf::rt::LazyV2<TallyResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TallyResult::new)
    }
}

impl ::protobuf::Clear for TallyResult {
    fn clear(&mut self) {
        self.yes.clear();
        self.abstain.clear();
        self.no.clear();
        self.no_with_veto.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TallyResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TallyResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Vote {
    // message fields
    pub proposal_id: u64,
    pub voter: ::std::string::String,
    pub option: VoteOption,
    pub options: ::protobuf::RepeatedField<WeightedVoteOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vote {
    fn default() -> &'a Vote {
        <Vote as ::protobuf::Message>::default_instance()
    }
}

impl Vote {
    pub fn new() -> Vote {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // string voter = 2;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }

    // .cosmos.gov.v1beta1.VoteOption option = 3;


    pub fn get_option(&self) -> VoteOption {
        self.option
    }
    pub fn clear_option(&mut self) {
        self.option = VoteOption::VOTE_OPTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: VoteOption) {
        self.option = v;
    }

    // repeated .cosmos.gov.v1beta1.WeightedVoteOption options = 4;


    pub fn get_options(&self) -> &[WeightedVoteOption] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::protobuf::RepeatedField<WeightedVoteOption>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::protobuf::RepeatedField<WeightedVoteOption> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::protobuf::RepeatedField<WeightedVoteOption> {
        ::std::mem::replace(&mut self.options, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Vote {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.option, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if self.option != VoteOption::VOTE_OPTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.option);
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if self.option != VoteOption::VOTE_OPTION_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.option))?;
        }
        for v in &self.options {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vote {
        Vote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &Vote| { &m.proposal_id },
                |m: &mut Vote| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voter",
                |m: &Vote| { &m.voter },
                |m: &mut Vote| { &mut m.voter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VoteOption>>(
                "option",
                |m: &Vote| { &m.option },
                |m: &mut Vote| { &mut m.option },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WeightedVoteOption>>(
                "options",
                |m: &Vote| { &m.options },
                |m: &mut Vote| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vote>(
                "Vote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vote {
        static instance: ::protobuf::rt::LazyV2<Vote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vote::new)
    }
}

impl ::protobuf::Clear for Vote {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.option = VoteOption::VOTE_OPTION_UNSPECIFIED;
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DepositParams {
    // message fields
    pub min_deposit: ::protobuf::RepeatedField<super::coin::Coin>,
    pub max_deposit_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DepositParams {
    fn default() -> &'a DepositParams {
        <DepositParams as ::protobuf::Message>::default_instance()
    }
}

impl DepositParams {
    pub fn new() -> DepositParams {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin min_deposit = 1;


    pub fn get_min_deposit(&self) -> &[super::coin::Coin] {
        &self.min_deposit
    }
    pub fn clear_min_deposit(&mut self) {
        self.min_deposit.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_deposit(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.min_deposit = v;
    }

    // Mutable pointer to the field.
    pub fn mut_min_deposit(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.min_deposit
    }

    // Take field
    pub fn take_min_deposit(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.min_deposit, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration max_deposit_period = 2;


    pub fn get_max_deposit_period(&self) -> &::protobuf::well_known_types::Duration {
        self.max_deposit_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_deposit_period(&mut self) {
        self.max_deposit_period.clear();
    }

    pub fn has_max_deposit_period(&self) -> bool {
        self.max_deposit_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_deposit_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_deposit_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_deposit_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_deposit_period.is_none() {
            self.max_deposit_period.set_default();
        }
        self.max_deposit_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_deposit_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_deposit_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for DepositParams {
    fn is_initialized(&self) -> bool {
        for v in &self.min_deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_deposit_period {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.min_deposit)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_deposit_period)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.min_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.max_deposit_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.min_deposit {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.max_deposit_period.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DepositParams {
        DepositParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "min_deposit",
                |m: &DepositParams| { &m.min_deposit },
                |m: &mut DepositParams| { &mut m.min_deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_deposit_period",
                |m: &DepositParams| { &m.max_deposit_period },
                |m: &mut DepositParams| { &mut m.max_deposit_period },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DepositParams>(
                "DepositParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DepositParams {
        static instance: ::protobuf::rt::LazyV2<DepositParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DepositParams::new)
    }
}

impl ::protobuf::Clear for DepositParams {
    fn clear(&mut self) {
        self.min_deposit.clear();
        self.max_deposit_period.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DepositParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DepositParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VotingParams {
    // message fields
    pub voting_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VotingParams {
    fn default() -> &'a VotingParams {
        <VotingParams as ::protobuf::Message>::default_instance()
    }
}

impl VotingParams {
    pub fn new() -> VotingParams {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration voting_period = 1;


    pub fn get_voting_period(&self) -> &::protobuf::well_known_types::Duration {
        self.voting_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_voting_period(&mut self) {
        self.voting_period.clear();
    }

    pub fn has_voting_period(&self) -> bool {
        self.voting_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voting_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.voting_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voting_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.voting_period.is_none() {
            self.voting_period.set_default();
        }
        self.voting_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_voting_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.voting_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for VotingParams {
    fn is_initialized(&self) -> bool {
        for v in &self.voting_period {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voting_period)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.voting_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.voting_period.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VotingParams {
        VotingParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "voting_period",
                |m: &VotingParams| { &m.voting_period },
                |m: &mut VotingParams| { &mut m.voting_period },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VotingParams>(
                "VotingParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VotingParams {
        static instance: ::protobuf::rt::LazyV2<VotingParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VotingParams::new)
    }
}

impl ::protobuf::Clear for VotingParams {
    fn clear(&mut self) {
        self.voting_period.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VotingParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VotingParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TallyParams {
    // message fields
    pub quorum: ::std::vec::Vec<u8>,
    pub threshold: ::std::vec::Vec<u8>,
    pub veto_threshold: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TallyParams {
    fn default() -> &'a TallyParams {
        <TallyParams as ::protobuf::Message>::default_instance()
    }
}

impl TallyParams {
    pub fn new() -> TallyParams {
        ::std::default::Default::default()
    }

    // bytes quorum = 1;


    pub fn get_quorum(&self) -> &[u8] {
        &self.quorum
    }
    pub fn clear_quorum(&mut self) {
        self.quorum.clear();
    }

    // Param is passed by value, moved
    pub fn set_quorum(&mut self, v: ::std::vec::Vec<u8>) {
        self.quorum = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quorum(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.quorum
    }

    // Take field
    pub fn take_quorum(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.quorum, ::std::vec::Vec::new())
    }

    // bytes threshold = 2;


    pub fn get_threshold(&self) -> &[u8] {
        &self.threshold
    }
    pub fn clear_threshold(&mut self) {
        self.threshold.clear();
    }

    // Param is passed by value, moved
    pub fn set_threshold(&mut self, v: ::std::vec::Vec<u8>) {
        self.threshold = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_threshold(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.threshold
    }

    // Take field
    pub fn take_threshold(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.threshold, ::std::vec::Vec::new())
    }

    // bytes veto_threshold = 3;


    pub fn get_veto_threshold(&self) -> &[u8] {
        &self.veto_threshold
    }
    pub fn clear_veto_threshold(&mut self) {
        self.veto_threshold.clear();
    }

    // Param is passed by value, moved
    pub fn set_veto_threshold(&mut self, v: ::std::vec::Vec<u8>) {
        self.veto_threshold = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_veto_threshold(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.veto_threshold
    }

    // Take field
    pub fn take_veto_threshold(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.veto_threshold, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TallyParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.quorum)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.threshold)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.veto_threshold)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.quorum.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.quorum);
        }
        if !self.threshold.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.threshold);
        }
        if !self.veto_threshold.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.veto_threshold);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.quorum.is_empty() {
            os.write_bytes(1, &self.quorum)?;
        }
        if !self.threshold.is_empty() {
            os.write_bytes(2, &self.threshold)?;
        }
        if !self.veto_threshold.is_empty() {
            os.write_bytes(3, &self.veto_threshold)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TallyParams {
        TallyParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "quorum",
                |m: &TallyParams| { &m.quorum },
                |m: &mut TallyParams| { &mut m.quorum },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "threshold",
                |m: &TallyParams| { &m.threshold },
                |m: &mut TallyParams| { &mut m.threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "veto_threshold",
                |m: &TallyParams| { &m.veto_threshold },
                |m: &mut TallyParams| { &mut m.veto_threshold },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TallyParams>(
                "TallyParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TallyParams {
        static instance: ::protobuf::rt::LazyV2<TallyParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TallyParams::new)
    }
}

impl ::protobuf::Clear for TallyParams {
    fn clear(&mut self) {
        self.quorum.clear();
        self.threshold.clear();
        self.veto_threshold.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TallyParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TallyParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VoteOption {
    VOTE_OPTION_UNSPECIFIED = 0,
    VOTE_OPTION_YES = 1,
    VOTE_OPTION_ABSTAIN = 2,
    VOTE_OPTION_NO = 3,
    VOTE_OPTION_NO_WITH_VETO = 4,
}

impl ::protobuf::ProtobufEnum for VoteOption {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VoteOption> {
        match value {
            0 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_YES),
            2 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_ABSTAIN),
            3 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_NO),
            4 => ::std::option::Option::Some(VoteOption::VOTE_OPTION_NO_WITH_VETO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VoteOption] = &[
            VoteOption::VOTE_OPTION_UNSPECIFIED,
            VoteOption::VOTE_OPTION_YES,
            VoteOption::VOTE_OPTION_ABSTAIN,
            VoteOption::VOTE_OPTION_NO,
            VoteOption::VOTE_OPTION_NO_WITH_VETO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VoteOption>("VoteOption", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VoteOption {
}

impl ::std::default::Default for VoteOption {
    fn default() -> Self {
        VoteOption::VOTE_OPTION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ProposalStatus {
    PROPOSAL_STATUS_UNSPECIFIED = 0,
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
    PROPOSAL_STATUS_VOTING_PERIOD = 2,
    PROPOSAL_STATUS_PASSED = 3,
    PROPOSAL_STATUS_REJECTED = 4,
    PROPOSAL_STATUS_FAILED = 5,
}

impl ::protobuf::ProtobufEnum for ProposalStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProposalStatus> {
        match value {
            0 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_DEPOSIT_PERIOD),
            2 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_VOTING_PERIOD),
            3 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_PASSED),
            4 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_REJECTED),
            5 => ::std::option::Option::Some(ProposalStatus::PROPOSAL_STATUS_FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProposalStatus] = &[
            ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED,
            ProposalStatus::PROPOSAL_STATUS_DEPOSIT_PERIOD,
            ProposalStatus::PROPOSAL_STATUS_VOTING_PERIOD,
            ProposalStatus::PROPOSAL_STATUS_PASSED,
            ProposalStatus::PROPOSAL_STATUS_REJECTED,
            ProposalStatus::PROPOSAL_STATUS_FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProposalStatus>("ProposalStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProposalStatus {
}

impl ::std::default::Default for ProposalStatus {
    fn default() -> Self {
        ProposalStatus::PROPOSAL_STATUS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ProposalStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccosmos/gov/v1beta1/gov.proto\x12\x12cosmos.gov.v1beta1\x1a\x1ecosm\
    os/base/v1beta1/coin.proto\x1a\x14gogoproto/gogo.proto\x1a\x19cosmos_pro\
    to/cosmos.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/pro\
    tobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\"\xa5\x01\n\x12Wei\
    ghtedVoteOption\x126\n\x06option\x18\x01\x20\x01(\x0e2\x1e.cosmos.gov.v1\
    beta1.VoteOptionR\x06option\x12W\n\x06weight\x18\x02\x20\x01(\tR\x06weig\
    htB?\xf2\xde\x1f\ryaml:\"weight\"\xda\xde\x1f&github.com/cosmos/cosmos-s\
    dk/types.Dec\xc8\xde\x1f\0\"W\n\x0cTextProposal\x12\x14\n\x05title\x18\
    \x01\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\
    \x0bdescription:\x0f\xd2\xb4-\x07Content\xe8\xa0\x1f\x01\"\xcf\x01\n\x07\
    Deposit\x127\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB\x16\xf2\
    \xde\x1f\x12yaml:\"proposal_id\"\x12\x1c\n\tdepositor\x18\x02\x20\x01(\t\
    R\tdepositor\x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1be\
    ta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coi\
    ns\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xf6\x06\n\x08Proposa\
    l\x124\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB\x13\xf2\xde\
    \x1f\tyaml:\"id\"\xea\xde\x1f\x02id\x12;\n\x07content\x18\x02\x20\x01(\
    \x0b2\x14.google.protobuf.AnyR\x07contentB\x0b\xca\xb4-\x07Content\x12V\
    \n\x06status\x18\x03\x20\x01(\x0e2\".cosmos.gov.v1beta1.ProposalStatusR\
    \x06statusB\x1a\xf2\xde\x1f\x16yaml:\"proposal_status\"\x12p\n\x12final_\
    tally_result\x18\x04\x20\x01(\x0b2\x1f.cosmos.gov.v1beta1.TallyResultR\
    \x10finalTallyResultB!\xf2\xde\x1f\x19yaml:\"final_tally_result\"\xc8\
    \xde\x1f\0\x12[\n\x0bsubmit_time\x18\x05\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\nsubmitTimeB\x1e\xf2\xde\x1f\x12yaml:\"submit_time\"\x90\
    \xdf\x1f\x01\xc8\xde\x1f\0\x12i\n\x10deposit_end_time\x18\x06\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x0edepositEndTimeB#\xf2\xde\x1f\x17\
    yaml:\"deposit_end_time\"\x90\xdf\x1f\x01\xc8\xde\x1f\0\x12\x88\x01\n\rt\
    otal_deposit\x18\x07\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0ctota\
    lDepositBH\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\
    \x1f\0\xf2\xde\x1f\x14yaml:\"total_deposit\"\x12l\n\x11voting_start_time\
    \x18\x08\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0fvotingStartTime\
    B$\xf2\xde\x1f\x18yaml:\"voting_start_time\"\x90\xdf\x1f\x01\xc8\xde\x1f\
    \0\x12f\n\x0fvoting_end_time\x18\t\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\rvotingEndTimeB\"\xf2\xde\x1f\x16yaml:\"voting_end_time\"\x90\
    \xdf\x1f\x01\xc8\xde\x1f\0:\x04\xe8\xa0\x1f\x01\"\xc8\x02\n\x0bTallyResu\
    lt\x12@\n\x03yes\x18\x01\x20\x01(\tR\x03yesB.\xda\xde\x1f&github.com/cos\
    mos/cosmos-sdk/types.Int\xc8\xde\x1f\0\x12H\n\x07abstain\x18\x02\x20\x01\
    (\tR\x07abstainB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\
    \xde\x1f\0\x12>\n\x02no\x18\x03\x20\x01(\tR\x02noB.\xda\xde\x1f&github.c\
    om/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\x12g\n\x0cno_with_veto\x18\
    \x04\x20\x01(\tR\nnoWithVetoBE\xf2\xde\x1f\x13yaml:\"no_with_veto\"\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0:\x04\xe8\
    \xa0\x1f\x01\"\xe3\x01\n\x04Vote\x127\n\x0bproposal_id\x18\x01\x20\x01(\
    \x04R\nproposalIdB\x16\xf2\xde\x1f\x12yaml:\"proposal_id\"\x12\x14\n\x05\
    voter\x18\x02\x20\x01(\tR\x05voter\x12:\n\x06option\x18\x03\x20\x01(\x0e\
    2\x1e.cosmos.gov.v1beta1.VoteOptionR\x06optionB\x02\x18\x01\x12F\n\x07op\
    tions\x18\x04\x20\x03(\x0b2&.cosmos.gov.v1beta1.WeightedVoteOptionR\x07o\
    ptionsB\x04\xc8\xde\x1f\0:\x08\x98\xa0\x1f\0\xe8\xa0\x1f\0\"\xbe\x02\n\r\
    DepositParams\x12\x9b\x01\n\x0bmin_deposit\x18\x01\x20\x03(\x0b2\x19.cos\
    mos.base.v1beta1.CoinR\nminDepositB_\xf2\xde\x1f\x12yaml:\"min_deposit\"\
    \xc8\xde\x1f\0\xea\xde\x1f\x15min_deposit,omitempty\xaa\xdf\x1f(github.c\
    om/cosmos/cosmos-sdk/types.Coins\x12\x8e\x01\n\x12max_deposit_period\x18\
    \x02\x20\x01(\x0b2\x19.google.protobuf.DurationR\x10maxDepositPeriodBE\
    \xf2\xde\x1f\x19yaml:\"max_deposit_period\"\xc8\xde\x1f\0\x98\xdf\x1f\
    \x01\xea\xde\x1f\x1cmax_deposit_period,omitempty\"\x8b\x01\n\x0cVotingPa\
    rams\x12{\n\rvoting_period\x18\x01\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x0cvotingPeriodB;\xf2\xde\x1f\x14yaml:\"voting_period\"\xc8\xde\
    \x1f\0\x98\xdf\x1f\x01\xea\xde\x1f\x17voting_period,omitempty\"\xdb\x02\
    \n\x0bTallyParams\x12Z\n\x06quorum\x18\x01\x20\x01(\x0cR\x06quorumBB\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\xea\xde\
    \x1f\x10quorum,omitempty\x12c\n\tthreshold\x18\x02\x20\x01(\x0cR\tthresh\
    oldBE\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\
    \xea\xde\x1f\x13threshold,omitempty\x12\x8a\x01\n\x0eveto_threshold\x18\
    \x03\x20\x01(\x0cR\rvetoThresholdBc\xf2\xde\x1f\x15yaml:\"veto_threshold\
    \"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\xea\
    \xde\x1f\x18veto_threshold,omitempty*\xe6\x01\n\nVoteOption\x12,\n\x17VO\
    TE_OPTION_UNSPECIFIED\x10\0\x1a\x0f\x8a\x9d\x20\x0bOptionEmpty\x12\"\n\
    \x0fVOTE_OPTION_YES\x10\x01\x1a\r\x8a\x9d\x20\tOptionYes\x12*\n\x13VOTE_\
    OPTION_ABSTAIN\x10\x02\x1a\x11\x8a\x9d\x20\rOptionAbstain\x12\x20\n\x0eV\
    OTE_OPTION_NO\x10\x03\x1a\x0c\x8a\x9d\x20\x08OptionNo\x122\n\x18VOTE_OPT\
    ION_NO_WITH_VETO\x10\x04\x1a\x14\x8a\x9d\x20\x10OptionNoWithVeto\x1a\x04\
    \x88\xa3\x1e\0*\xcc\x02\n\x0eProposalStatus\x12.\n\x1bPROPOSAL_STATUS_UN\
    SPECIFIED\x10\0\x1a\r\x8a\x9d\x20\tStatusNil\x12;\n\x1ePROPOSAL_STATUS_D\
    EPOSIT_PERIOD\x10\x01\x1a\x17\x8a\x9d\x20\x13StatusDepositPeriod\x129\n\
    \x1dPROPOSAL_STATUS_VOTING_PERIOD\x10\x02\x1a\x16\x8a\x9d\x20\x12StatusV\
    otingPeriod\x12,\n\x16PROPOSAL_STATUS_PASSED\x10\x03\x1a\x10\x8a\x9d\x20\
    \x0cStatusPassed\x120\n\x18PROPOSAL_STATUS_REJECTED\x10\x04\x1a\x12\x8a\
    \x9d\x20\x0eStatusRejected\x12,\n\x16PROPOSAL_STATUS_FAILED\x10\x05\x1a\
    \x10\x8a\x9d\x20\x0cStatusFailed\x1a\x04\x88\xa3\x1e\0B6Z(github.com/cos\
    mos/cosmos-sdk/x/gov/types\xd8\xe1\x1e\0\xc8\xe1\x1e\0\x80\xe2\x1e\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
