// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/gov/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgSubmitProposal {
    // message fields
    pub content: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub initial_deposit: ::protobuf::RepeatedField<super::coin::Coin>,
    pub proposer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposal {
    fn default() -> &'a MsgSubmitProposal {
        <MsgSubmitProposal as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposal {
    pub fn new() -> MsgSubmitProposal {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any content = 1;


    pub fn get_content(&self) -> &::protobuf::well_known_types::Any {
        self.content.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    pub fn has_content(&self) -> bool {
        self.content.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::protobuf::well_known_types::Any) {
        self.content = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.content.is_none() {
            self.content.set_default();
        }
        self.content.as_mut().unwrap()
    }

    // Take field
    pub fn take_content(&mut self) -> ::protobuf::well_known_types::Any {
        self.content.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // repeated .cosmos.base.v1beta1.Coin initial_deposit = 2;


    pub fn get_initial_deposit(&self) -> &[super::coin::Coin] {
        &self.initial_deposit
    }
    pub fn clear_initial_deposit(&mut self) {
        self.initial_deposit.clear();
    }

    // Param is passed by value, moved
    pub fn set_initial_deposit(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.initial_deposit = v;
    }

    // Mutable pointer to the field.
    pub fn mut_initial_deposit(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.initial_deposit
    }

    // Take field
    pub fn take_initial_deposit(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.initial_deposit, ::protobuf::RepeatedField::new())
    }

    // string proposer = 3;


    pub fn get_proposer(&self) -> &str {
        &self.proposer
    }
    pub fn clear_proposer(&mut self) {
        self.proposer.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposer(&mut self, v: ::std::string::String) {
        self.proposer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer(&mut self) -> &mut ::std::string::String {
        &mut self.proposer
    }

    // Take field
    pub fn take_proposer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proposer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgSubmitProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.content {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.initial_deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.initial_deposit)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proposer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.initial_deposit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.proposer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.content.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.initial_deposit {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.proposer.is_empty() {
            os.write_string(3, &self.proposer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSubmitProposal {
        MsgSubmitProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "content",
                |m: &MsgSubmitProposal| { &m.content },
                |m: &mut MsgSubmitProposal| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "initial_deposit",
                |m: &MsgSubmitProposal| { &m.initial_deposit },
                |m: &mut MsgSubmitProposal| { &mut m.initial_deposit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "proposer",
                |m: &MsgSubmitProposal| { &m.proposer },
                |m: &mut MsgSubmitProposal| { &mut m.proposer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgSubmitProposal>(
                "MsgSubmitProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgSubmitProposal {
        static instance: ::protobuf::rt::LazyV2<MsgSubmitProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSubmitProposal::new)
    }
}

impl ::protobuf::Clear for MsgSubmitProposal {
    fn clear(&mut self) {
        self.content.clear();
        self.initial_deposit.clear();
        self.proposer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgSubmitProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgSubmitProposalResponse {
    // message fields
    pub proposal_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSubmitProposalResponse {
    fn default() -> &'a MsgSubmitProposalResponse {
        <MsgSubmitProposalResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitProposalResponse {
    pub fn new() -> MsgSubmitProposalResponse {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }
}

impl ::protobuf::Message for MsgSubmitProposalResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSubmitProposalResponse {
        MsgSubmitProposalResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &MsgSubmitProposalResponse| { &m.proposal_id },
                |m: &mut MsgSubmitProposalResponse| { &mut m.proposal_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgSubmitProposalResponse>(
                "MsgSubmitProposalResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgSubmitProposalResponse {
        static instance: ::protobuf::rt::LazyV2<MsgSubmitProposalResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSubmitProposalResponse::new)
    }
}

impl ::protobuf::Clear for MsgSubmitProposalResponse {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgSubmitProposalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitProposalResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgVote {
    // message fields
    pub proposal_id: u64,
    pub voter: ::std::string::String,
    pub option: super::gov::VoteOption,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgVote {
    fn default() -> &'a MsgVote {
        <MsgVote as ::protobuf::Message>::default_instance()
    }
}

impl MsgVote {
    pub fn new() -> MsgVote {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // string voter = 2;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }

    // .cosmos.gov.v1beta1.VoteOption option = 3;


    pub fn get_option(&self) -> super::gov::VoteOption {
        self.option
    }
    pub fn clear_option(&mut self) {
        self.option = super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: super::gov::VoteOption) {
        self.option = v;
    }
}

impl ::protobuf::Message for MsgVote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.option, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if self.option != super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.option);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if self.option != super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.option))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgVote {
        MsgVote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &MsgVote| { &m.proposal_id },
                |m: &mut MsgVote| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voter",
                |m: &MsgVote| { &m.voter },
                |m: &mut MsgVote| { &mut m.voter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::gov::VoteOption>>(
                "option",
                |m: &MsgVote| { &m.option },
                |m: &mut MsgVote| { &mut m.option },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgVote>(
                "MsgVote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgVote {
        static instance: ::protobuf::rt::LazyV2<MsgVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgVote::new)
    }
}

impl ::protobuf::Clear for MsgVote {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.option = super::gov::VoteOption::VOTE_OPTION_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgVoteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgVoteResponse {
    fn default() -> &'a MsgVoteResponse {
        <MsgVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteResponse {
    pub fn new() -> MsgVoteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgVoteResponse {
        MsgVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgVoteResponse>(
                "MsgVoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgVoteResponse {
        static instance: ::protobuf::rt::LazyV2<MsgVoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgVoteResponse::new)
    }
}

impl ::protobuf::Clear for MsgVoteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgVoteWeighted {
    // message fields
    pub proposal_id: u64,
    pub voter: ::std::string::String,
    pub options: ::protobuf::RepeatedField<super::gov::WeightedVoteOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgVoteWeighted {
    fn default() -> &'a MsgVoteWeighted {
        <MsgVoteWeighted as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteWeighted {
    pub fn new() -> MsgVoteWeighted {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // string voter = 2;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }

    // repeated .cosmos.gov.v1beta1.WeightedVoteOption options = 3;


    pub fn get_options(&self) -> &[super::gov::WeightedVoteOption] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::protobuf::RepeatedField<super::gov::WeightedVoteOption>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::protobuf::RepeatedField<super::gov::WeightedVoteOption> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::protobuf::RepeatedField<super::gov::WeightedVoteOption> {
        ::std::mem::replace(&mut self.options, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgVoteWeighted {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        for v in &self.options {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgVoteWeighted {
        MsgVoteWeighted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &MsgVoteWeighted| { &m.proposal_id },
                |m: &mut MsgVoteWeighted| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voter",
                |m: &MsgVoteWeighted| { &m.voter },
                |m: &mut MsgVoteWeighted| { &mut m.voter },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gov::WeightedVoteOption>>(
                "options",
                |m: &MsgVoteWeighted| { &m.options },
                |m: &mut MsgVoteWeighted| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgVoteWeighted>(
                "MsgVoteWeighted",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgVoteWeighted {
        static instance: ::protobuf::rt::LazyV2<MsgVoteWeighted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgVoteWeighted::new)
    }
}

impl ::protobuf::Clear for MsgVoteWeighted {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.voter.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgVoteWeighted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteWeighted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgVoteWeightedResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgVoteWeightedResponse {
    fn default() -> &'a MsgVoteWeightedResponse {
        <MsgVoteWeightedResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgVoteWeightedResponse {
    pub fn new() -> MsgVoteWeightedResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgVoteWeightedResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgVoteWeightedResponse {
        MsgVoteWeightedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgVoteWeightedResponse>(
                "MsgVoteWeightedResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgVoteWeightedResponse {
        static instance: ::protobuf::rt::LazyV2<MsgVoteWeightedResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgVoteWeightedResponse::new)
    }
}

impl ::protobuf::Clear for MsgVoteWeightedResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgVoteWeightedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgVoteWeightedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDeposit {
    // message fields
    pub proposal_id: u64,
    pub depositor: ::std::string::String,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDeposit {
    fn default() -> &'a MsgDeposit {
        <MsgDeposit as ::protobuf::Message>::default_instance()
    }
}

impl MsgDeposit {
    pub fn new() -> MsgDeposit {
        ::std::default::Default::default()
    }

    // uint64 proposal_id = 1;


    pub fn get_proposal_id(&self) -> u64 {
        self.proposal_id
    }
    pub fn clear_proposal_id(&mut self) {
        self.proposal_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposal_id(&mut self, v: u64) {
        self.proposal_id = v;
    }

    // string depositor = 2;


    pub fn get_depositor(&self) -> &str {
        &self.depositor
    }
    pub fn clear_depositor(&mut self) {
        self.depositor.clear();
    }

    // Param is passed by value, moved
    pub fn set_depositor(&mut self, v: ::std::string::String) {
        self.depositor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_depositor(&mut self) -> &mut ::std::string::String {
        &mut self.depositor
    }

    // Take field
    pub fn take_depositor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.depositor, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgDeposit {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.proposal_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.depositor)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposal_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposal_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.proposal_id != 0 {
            os.write_uint64(1, self.proposal_id)?;
        }
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        for v in &self.amount {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDeposit {
        MsgDeposit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "proposal_id",
                |m: &MsgDeposit| { &m.proposal_id },
                |m: &mut MsgDeposit| { &mut m.proposal_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "depositor",
                |m: &MsgDeposit| { &m.depositor },
                |m: &mut MsgDeposit| { &mut m.depositor },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgDeposit| { &m.amount },
                |m: &mut MsgDeposit| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDeposit>(
                "MsgDeposit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDeposit {
        static instance: ::protobuf::rt::LazyV2<MsgDeposit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDeposit::new)
    }
}

impl ::protobuf::Clear for MsgDeposit {
    fn clear(&mut self) {
        self.proposal_id = 0;
        self.depositor.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDeposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDeposit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDepositResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDepositResponse {
    fn default() -> &'a MsgDepositResponse {
        <MsgDepositResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDepositResponse {
    pub fn new() -> MsgDepositResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgDepositResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDepositResponse {
        MsgDepositResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDepositResponse>(
                "MsgDepositResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDepositResponse {
        static instance: ::protobuf::rt::LazyV2<MsgDepositResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDepositResponse::new)
    }
}

impl ::protobuf::Clear for MsgDepositResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDepositResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDepositResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bcosmos/gov/v1beta1/tx.proto\x12\x12cosmos.gov.v1beta1\x1a\x1ecosmo\
    s/base/v1beta1/coin.proto\x1a\x1ccosmos/gov/v1beta1/gov.proto\x1a\x19cos\
    mos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x19google/protobu\
    f/any.proto\"\x8f\x02\n\x11MsgSubmitProposal\x12;\n\x07content\x18\x01\
    \x20\x01(\x0b2\x14.google.protobuf.AnyR\x07contentB\x0b\xca\xb4-\x07Cont\
    ent\x12\x8e\x01\n\x0finitial_deposit\x18\x02\x20\x03(\x0b2\x19.cosmos.ba\
    se.v1beta1.CoinR\x0einitialDepositBJ\xaa\xdf\x1f(github.com/cosmos/cosmo\
    s-sdk/types.Coins\xc8\xde\x1f\0\xf2\xde\x1f\x16yaml:\"initial_deposit\"\
    \x12\x1a\n\x08proposer\x18\x03\x20\x01(\tR\x08proposer:\x10\xe8\xa0\x1f\
    \0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"c\n\x19MsgSubmitProposalRe\
    sponse\x12F\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB%\xf2\xde\
    \x1f\x12yaml:\"proposal_id\"\xea\xde\x1f\x0bproposal_id\"\xb1\x01\n\x07M\
    sgVote\x12F\n\x0bproposal_id\x18\x01\x20\x01(\x04R\nproposalIdB%\xf2\xde\
    \x1f\x12yaml:\"proposal_id\"\xea\xde\x1f\x0bproposal_id\x12\x14\n\x05vot\
    er\x18\x02\x20\x01(\tR\x05voter\x126\n\x06option\x18\x03\x20\x01(\x0e2\
    \x1e.cosmos.gov.v1beta1.VoteOptionR\x06option:\x10\xe8\xa0\x1f\0\x80\xdc\
    \x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"\x11\n\x0fMsgVoteResponse\"\xba\x01\
    \n\x0fMsgVoteWeighted\x127\n\x0bproposal_id\x18\x01\x20\x01(\x04R\npropo\
    salIdB\x16\xf2\xde\x1f\x12yaml:\"proposal_id\"\x12\x14\n\x05voter\x18\
    \x02\x20\x01(\tR\x05voter\x12F\n\x07options\x18\x03\x20\x03(\x0b2&.cosmo\
    s.gov.v1beta1.WeightedVoteOptionR\x07optionsB\x04\xc8\xde\x1f\0:\x10\xe8\
    \xa0\x1f\0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\"\x19\n\x17MsgVoteW\
    eightedResponse\"\xe9\x01\n\nMsgDeposit\x12F\n\x0bproposal_id\x18\x01\
    \x20\x01(\x04R\nproposalIdB%\xf2\xde\x1f\x12yaml:\"proposal_id\"\xea\xde\
    \x1f\x0bproposal_id\x12\x1c\n\tdepositor\x18\x02\x20\x01(\tR\tdepositor\
    \x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\
    \x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\
    \xde\x1f\0:\x10\xe8\xa0\x1f\0\x80\xdc\x20\0\x98\xa0\x1f\0\x88\xa0\x1f\0\
    \"\x14\n\x12MsgDepositResponse2\xec\x02\n\x03Msg\x12f\n\x0eSubmitProposa\
    l\x12%.cosmos.gov.v1beta1.MsgSubmitProposal\x1a-.cosmos.gov.v1beta1.MsgS\
    ubmitProposalResponse\x12H\n\x04Vote\x12\x1b.cosmos.gov.v1beta1.MsgVote\
    \x1a#.cosmos.gov.v1beta1.MsgVoteResponse\x12`\n\x0cVoteWeighted\x12#.cos\
    mos.gov.v1beta1.MsgVoteWeighted\x1a+.cosmos.gov.v1beta1.MsgVoteWeightedR\
    esponse\x12Q\n\x07Deposit\x12\x1e.cosmos.gov.v1beta1.MsgDeposit\x1a&.cos\
    mos.gov.v1beta1.MsgDepositResponseB*Z(github.com/cosmos/cosmos-sdk/x/gov\
    /typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
