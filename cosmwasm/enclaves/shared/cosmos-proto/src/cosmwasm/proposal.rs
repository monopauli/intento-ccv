// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `compute/v1beta1/proposal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct StoreCodeProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub run_as: ::std::string::String,
    pub wasm_byte_code: ::std::vec::Vec<u8>,
    pub contract_title: ::std::string::String,
    pub contract_description: ::std::string::String,
    pub contract_duration: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreCodeProposal {
    fn default() -> &'a StoreCodeProposal {
        <StoreCodeProposal as ::protobuf::Message>::default_instance()
    }
}

impl StoreCodeProposal {
    pub fn new() -> StoreCodeProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string run_as = 3;


    pub fn get_run_as(&self) -> &str {
        &self.run_as
    }
    pub fn clear_run_as(&mut self) {
        self.run_as.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_as(&mut self, v: ::std::string::String) {
        self.run_as = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_as(&mut self) -> &mut ::std::string::String {
        &mut self.run_as
    }

    // Take field
    pub fn take_run_as(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.run_as, ::std::string::String::new())
    }

    // bytes wasm_byte_code = 4;


    pub fn get_wasm_byte_code(&self) -> &[u8] {
        &self.wasm_byte_code
    }
    pub fn clear_wasm_byte_code(&mut self) {
        self.wasm_byte_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_code
    }

    // Take field
    pub fn take_wasm_byte_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_code, ::std::vec::Vec::new())
    }

    // string contract_title = 5;


    pub fn get_contract_title(&self) -> &str {
        &self.contract_title
    }
    pub fn clear_contract_title(&mut self) {
        self.contract_title.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_title(&mut self, v: ::std::string::String) {
        self.contract_title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_title(&mut self) -> &mut ::std::string::String {
        &mut self.contract_title
    }

    // Take field
    pub fn take_contract_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_title, ::std::string::String::new())
    }

    // string contract_description = 6;


    pub fn get_contract_description(&self) -> &str {
        &self.contract_description
    }
    pub fn clear_contract_description(&mut self) {
        self.contract_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_description(&mut self, v: ::std::string::String) {
        self.contract_description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_description(&mut self) -> &mut ::std::string::String {
        &mut self.contract_description
    }

    // Take field
    pub fn take_contract_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_description, ::std::string::String::new())
    }

    // string contract_duration = 7;


    pub fn get_contract_duration(&self) -> &str {
        &self.contract_duration
    }
    pub fn clear_contract_duration(&mut self) {
        self.contract_duration.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_duration(&mut self, v: ::std::string::String) {
        self.contract_duration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_duration(&mut self) -> &mut ::std::string::String {
        &mut self.contract_duration
    }

    // Take field
    pub fn take_contract_duration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_duration, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StoreCodeProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.run_as)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_title)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_description)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_duration)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.run_as.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.run_as);
        }
        if !self.wasm_byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.wasm_byte_code);
        }
        if !self.contract_title.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.contract_title);
        }
        if !self.contract_description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.contract_description);
        }
        if !self.contract_duration.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.contract_duration);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.run_as.is_empty() {
            os.write_string(3, &self.run_as)?;
        }
        if !self.wasm_byte_code.is_empty() {
            os.write_bytes(4, &self.wasm_byte_code)?;
        }
        if !self.contract_title.is_empty() {
            os.write_string(5, &self.contract_title)?;
        }
        if !self.contract_description.is_empty() {
            os.write_string(6, &self.contract_description)?;
        }
        if !self.contract_duration.is_empty() {
            os.write_string(7, &self.contract_duration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreCodeProposal {
        StoreCodeProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &StoreCodeProposal| { &m.title },
                |m: &mut StoreCodeProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &StoreCodeProposal| { &m.description },
                |m: &mut StoreCodeProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "run_as",
                |m: &StoreCodeProposal| { &m.run_as },
                |m: &mut StoreCodeProposal| { &mut m.run_as },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "wasm_byte_code",
                |m: &StoreCodeProposal| { &m.wasm_byte_code },
                |m: &mut StoreCodeProposal| { &mut m.wasm_byte_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_title",
                |m: &StoreCodeProposal| { &m.contract_title },
                |m: &mut StoreCodeProposal| { &mut m.contract_title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_description",
                |m: &StoreCodeProposal| { &m.contract_description },
                |m: &mut StoreCodeProposal| { &mut m.contract_description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_duration",
                |m: &StoreCodeProposal| { &m.contract_duration },
                |m: &mut StoreCodeProposal| { &mut m.contract_duration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StoreCodeProposal>(
                "StoreCodeProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StoreCodeProposal {
        static instance: ::protobuf::rt::LazyV2<StoreCodeProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StoreCodeProposal::new)
    }
}

impl ::protobuf::Clear for StoreCodeProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.run_as.clear();
        self.wasm_byte_code.clear();
        self.contract_title.clear();
        self.contract_description.clear();
        self.contract_duration.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StoreCodeProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreCodeProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstantiateContractProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub run_as: ::std::string::String,
    pub proposer: ::std::string::String,
    pub code_id: u64,
    pub contract_id: ::std::string::String,
    pub init_msg: ::std::vec::Vec<u8>,
    pub auto_msg: ::std::vec::Vec<u8>,
    pub init_funds: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstantiateContractProposal {
    fn default() -> &'a InstantiateContractProposal {
        <InstantiateContractProposal as ::protobuf::Message>::default_instance()
    }
}

impl InstantiateContractProposal {
    pub fn new() -> InstantiateContractProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string run_as = 3;


    pub fn get_run_as(&self) -> &str {
        &self.run_as
    }
    pub fn clear_run_as(&mut self) {
        self.run_as.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_as(&mut self, v: ::std::string::String) {
        self.run_as = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_as(&mut self) -> &mut ::std::string::String {
        &mut self.run_as
    }

    // Take field
    pub fn take_run_as(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.run_as, ::std::string::String::new())
    }

    // string proposer = 4;


    pub fn get_proposer(&self) -> &str {
        &self.proposer
    }
    pub fn clear_proposer(&mut self) {
        self.proposer.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposer(&mut self, v: ::std::string::String) {
        self.proposer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer(&mut self) -> &mut ::std::string::String {
        &mut self.proposer
    }

    // Take field
    pub fn take_proposer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proposer, ::std::string::String::new())
    }

    // uint64 code_id = 5;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }

    // string contract_id = 6;


    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }
    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    // bytes init_msg = 7;


    pub fn get_init_msg(&self) -> &[u8] {
        &self.init_msg
    }
    pub fn clear_init_msg(&mut self) {
        self.init_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_init_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.init_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_init_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.init_msg
    }

    // Take field
    pub fn take_init_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.init_msg, ::std::vec::Vec::new())
    }

    // bytes auto_msg = 8;


    pub fn get_auto_msg(&self) -> &[u8] {
        &self.auto_msg
    }
    pub fn clear_auto_msg(&mut self) {
        self.auto_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_auto_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.auto_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auto_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.auto_msg
    }

    // Take field
    pub fn take_auto_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.auto_msg, ::std::vec::Vec::new())
    }

    // repeated .cosmos.base.v1beta1.Coin init_funds = 9;


    pub fn get_init_funds(&self) -> &[super::coin::Coin] {
        &self.init_funds
    }
    pub fn clear_init_funds(&mut self) {
        self.init_funds.clear();
    }

    // Param is passed by value, moved
    pub fn set_init_funds(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.init_funds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_init_funds(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.init_funds
    }

    // Take field
    pub fn take_init_funds(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.init_funds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InstantiateContractProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.init_funds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.run_as)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proposer)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.init_msg)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.auto_msg)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.init_funds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.run_as.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.run_as);
        }
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.proposer);
        }
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.contract_id);
        }
        if !self.init_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.init_msg);
        }
        if !self.auto_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.auto_msg);
        }
        for value in &self.init_funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.run_as.is_empty() {
            os.write_string(3, &self.run_as)?;
        }
        if !self.proposer.is_empty() {
            os.write_string(4, &self.proposer)?;
        }
        if self.code_id != 0 {
            os.write_uint64(5, self.code_id)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(6, &self.contract_id)?;
        }
        if !self.init_msg.is_empty() {
            os.write_bytes(7, &self.init_msg)?;
        }
        if !self.auto_msg.is_empty() {
            os.write_bytes(8, &self.auto_msg)?;
        }
        for v in &self.init_funds {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstantiateContractProposal {
        InstantiateContractProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &InstantiateContractProposal| { &m.title },
                |m: &mut InstantiateContractProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &InstantiateContractProposal| { &m.description },
                |m: &mut InstantiateContractProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "run_as",
                |m: &InstantiateContractProposal| { &m.run_as },
                |m: &mut InstantiateContractProposal| { &mut m.run_as },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "proposer",
                |m: &InstantiateContractProposal| { &m.proposer },
                |m: &mut InstantiateContractProposal| { &mut m.proposer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &InstantiateContractProposal| { &m.code_id },
                |m: &mut InstantiateContractProposal| { &mut m.code_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_id",
                |m: &InstantiateContractProposal| { &m.contract_id },
                |m: &mut InstantiateContractProposal| { &mut m.contract_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "init_msg",
                |m: &InstantiateContractProposal| { &m.init_msg },
                |m: &mut InstantiateContractProposal| { &mut m.init_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "auto_msg",
                |m: &InstantiateContractProposal| { &m.auto_msg },
                |m: &mut InstantiateContractProposal| { &mut m.auto_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "init_funds",
                |m: &InstantiateContractProposal| { &m.init_funds },
                |m: &mut InstantiateContractProposal| { &mut m.init_funds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstantiateContractProposal>(
                "InstantiateContractProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstantiateContractProposal {
        static instance: ::protobuf::rt::LazyV2<InstantiateContractProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstantiateContractProposal::new)
    }
}

impl ::protobuf::Clear for InstantiateContractProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.run_as.clear();
        self.proposer.clear();
        self.code_id = 0;
        self.contract_id.clear();
        self.init_msg.clear();
        self.auto_msg.clear();
        self.init_funds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstantiateContractProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstantiateContractProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteContractProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub run_as: ::std::string::String,
    pub proposer: ::std::string::String,
    pub contract: ::std::string::String,
    pub msg: ::std::vec::Vec<u8>,
    pub sent_funds: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteContractProposal {
    fn default() -> &'a ExecuteContractProposal {
        <ExecuteContractProposal as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteContractProposal {
    pub fn new() -> ExecuteContractProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string run_as = 3;


    pub fn get_run_as(&self) -> &str {
        &self.run_as
    }
    pub fn clear_run_as(&mut self) {
        self.run_as.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_as(&mut self, v: ::std::string::String) {
        self.run_as = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_as(&mut self) -> &mut ::std::string::String {
        &mut self.run_as
    }

    // Take field
    pub fn take_run_as(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.run_as, ::std::string::String::new())
    }

    // string proposer = 4;


    pub fn get_proposer(&self) -> &str {
        &self.proposer
    }
    pub fn clear_proposer(&mut self) {
        self.proposer.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposer(&mut self, v: ::std::string::String) {
        self.proposer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer(&mut self) -> &mut ::std::string::String {
        &mut self.proposer
    }

    // Take field
    pub fn take_proposer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proposer, ::std::string::String::new())
    }

    // string contract = 5;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // bytes msg = 6;


    pub fn get_msg(&self) -> &[u8] {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.msg, ::std::vec::Vec::new())
    }

    // repeated .cosmos.base.v1beta1.Coin sent_funds = 7;


    pub fn get_sent_funds(&self) -> &[super::coin::Coin] {
        &self.sent_funds
    }
    pub fn clear_sent_funds(&mut self) {
        self.sent_funds.clear();
    }

    // Param is passed by value, moved
    pub fn set_sent_funds(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.sent_funds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sent_funds(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.sent_funds
    }

    // Take field
    pub fn take_sent_funds(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.sent_funds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExecuteContractProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.sent_funds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.run_as)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proposer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.msg)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sent_funds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.run_as.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.run_as);
        }
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.proposer);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.contract);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.msg);
        }
        for value in &self.sent_funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.run_as.is_empty() {
            os.write_string(3, &self.run_as)?;
        }
        if !self.proposer.is_empty() {
            os.write_string(4, &self.proposer)?;
        }
        if !self.contract.is_empty() {
            os.write_string(5, &self.contract)?;
        }
        if !self.msg.is_empty() {
            os.write_bytes(6, &self.msg)?;
        }
        for v in &self.sent_funds {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteContractProposal {
        ExecuteContractProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &ExecuteContractProposal| { &m.title },
                |m: &mut ExecuteContractProposal| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ExecuteContractProposal| { &m.description },
                |m: &mut ExecuteContractProposal| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "run_as",
                |m: &ExecuteContractProposal| { &m.run_as },
                |m: &mut ExecuteContractProposal| { &mut m.run_as },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "proposer",
                |m: &ExecuteContractProposal| { &m.proposer },
                |m: &mut ExecuteContractProposal| { &mut m.proposer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &ExecuteContractProposal| { &m.contract },
                |m: &mut ExecuteContractProposal| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "msg",
                |m: &ExecuteContractProposal| { &m.msg },
                |m: &mut ExecuteContractProposal| { &mut m.msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "sent_funds",
                |m: &ExecuteContractProposal| { &m.sent_funds },
                |m: &mut ExecuteContractProposal| { &mut m.sent_funds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecuteContractProposal>(
                "ExecuteContractProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecuteContractProposal {
        static instance: ::protobuf::rt::LazyV2<ExecuteContractProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecuteContractProposal::new)
    }
}

impl ::protobuf::Clear for ExecuteContractProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.run_as.clear();
        self.proposer.clear();
        self.contract.clear();
        self.msg.clear();
        self.sent_funds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteContractProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteContractProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ecompute/v1beta1/proposal.proto\x12\x16trst.x.compute.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xa1\x02\
    \n\x11StoreCodeProposal\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12\x15\n\
    \x06run_as\x18\x03\x20\x01(\tR\x05runAs\x126\n\x0ewasm_byte_code\x18\x04\
    \x20\x01(\x0cR\x0cwasmByteCodeB\x10\xe2\xde\x1f\x0cWASMByteCode\x12%\n\
    \x0econtract_title\x18\x05\x20\x01(\tR\rcontractTitle\x121\n\x14contract\
    _description\x18\x06\x20\x01(\tR\x13contractDescription\x12+\n\x11contra\
    ct_duration\x18\x07\x20\x01(\tR\x10contractDuration\"\xf0\x02\n\x1bInsta\
    ntiateContractProposal\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12\x15\n\
    \x06run_as\x18\x03\x20\x01(\tR\x05runAs\x12\x1a\n\x08proposer\x18\x04\
    \x20\x01(\tR\x08proposer\x12#\n\x07code_id\x18\x05\x20\x01(\x04R\x06code\
    IdB\n\xe2\xde\x1f\x06CodeID\x12\x1f\n\x0bcontract_id\x18\x06\x20\x01(\tR\
    \ncontractId\x12\x19\n\x08init_msg\x18\x07\x20\x01(\x0cR\x07initMsg\x12\
    \x19\n\x08auto_msg\x18\x08\x20\x01(\x0cR\x07autoMsg\x12j\n\ninit_funds\
    \x18\t\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\tinitFundsB0\xaa\xdf\
    \x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\"\x9e\x02\n\
    \x17ExecuteContractProposal\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05ti\
    tle\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x12\x15\
    \n\x06run_as\x18\x03\x20\x01(\tR\x05runAs\x12\x1a\n\x08proposer\x18\x04\
    \x20\x01(\tR\x08proposer\x12\x1a\n\x08contract\x18\x05\x20\x01(\tR\x08co\
    ntract\x12\x10\n\x03msg\x18\x06\x20\x01(\x0cR\x03msg\x12j\n\nsent_funds\
    \x18\x07\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\tsentFundsB0\xaa\
    \xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0B?Z1githu\
    b.com/trstlabs/trst/x/compute/internal/types\xd8\xe1\x1e\0\xc8\xe1\x1e\0\
    \xa8\xe2\x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
