#ifndef enclave_ffi_types_h
#define enclave_ffi_types_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define ENCRYPTED_SEED_SIZE 48

#define PUBLIC_KEY_SIZE 32

/**
 * This type represents the possible error conditions that can be encountered in the
 * enclave while authenticating a new node in the network.
 */
typedef enum HealthCheckResult {
    HealthCheckResult_Success,
} HealthCheckResult;

/**
 * This type represents the possible error conditions that can be encountered in the
 * enclave while authenticating a new node in the network.
 */
typedef enum NodeAuthResult {
    NodeAuthResult_Success,
    NodeAuthResult_GroupOutOfDate,
    NodeAuthResult_SignatureInvalid,
    NodeAuthResult_SignatureRevoked,
    NodeAuthResult_GroupRevoked,
    NodeAuthResult_KeyRevoked,
    NodeAuthResult_SigrlVersionMismatch,
    NodeAuthResult_ConfigurationNeeded,
    NodeAuthResult_SwHardeningAndConfigurationNeeded,
    NodeAuthResult_BadQuoteStatus,
    NodeAuthResult_MrEnclaveMismatch,
    NodeAuthResult_MrSignerMismatch,
    NodeAuthResult_InvalidInput,
    NodeAuthResult_InvalidCert,
    NodeAuthResult_CantWriteToStorage,
    NodeAuthResult_MalformedPublicKey,
    NodeAuthResult_SeedEncryptionFailed,
    NodeAuthResult_MemorySafetyAllocationError,
    NodeAuthResult_Panic,
} NodeAuthResult;

/**
 * This type represent return statuses from ocalls.
 *
 */
typedef enum OcallReturn {
    /**
     * Ocall returned successfully.
     */
    OcallReturn_Success,
    /**
     * Ocall failed for some reason.
     * error parameters may be passed as out parameters.
     */
    OcallReturn_Failure,
    /**
     * A panic happened during the ocall.
     */
    OcallReturn_Panic,
} OcallReturn;

/**
 * This type represents an opaque pointer to a memory address in normal user space.
 */
typedef struct UserSpaceBuffer {
    void *ptr;
} UserSpaceBuffer;

/**
 * This type represents an opaque pointer to a memory address inside the enclave.
 */
typedef struct EnclaveBuffer {
    void *ptr;
} EnclaveBuffer;

/**
 * This struct holds a pointer to memory in userspace, that contains the storage
 */
typedef struct Ctx {
    void *data;
} Ctx;

/**
 * This type holds a pointer to a VmError that is boxed on the untrusted side
 */
typedef struct UntrustedVmError {
    void *ptr;
} UntrustedVmError;

/**
 * This type represents the possible error conditions that can be encountered in the enclave
 */
typedef enum EnclaveError_Tag {
    /**
     * An ocall failed to execute. This can happen because of three scenarios:
     * 1. A VmError was thrown during the execution of the ocall. In this case, `vm_error` will be non-null.
     * 2. An error happened that prevented the ocall from running correctly. This can happen because of
     *    caught memory-handling issues, or a failed ecall during an ocall. `vm_error` will be null.
     * 3. We failed to call the ocall due to an SGX fault. `vm_error` will be null.
     */
    EnclaveError_FailedOcall,
    EnclaveError_ValidationFailure,
    /**
     * The WASM code was invalid and could not be loaded.
     */
    EnclaveError_InvalidWasm,
    EnclaveError_CannotInitializeWasmMemory,
    /**
     * The WASM module contained a start section, which is not allowed.
     */
    EnclaveError_WasmModuleWithStart,
    /**
     * The WASM module contained floating point operations, which is not allowed.
     */
    EnclaveError_WasmModuleWithFP,
    /**
     * Fail to inject gas metering
     */
    EnclaveError_FailedGasMeteringInjection,
    EnclaveError_InternalError,
    /**
     * Ran out of gas
     */
    EnclaveError_OutOfGas,
    /**
     * Calling a function in the contract failed.
     */
    EnclaveError_FailedFunctionCall,
    /**
     * The contract panicked during execution.
     */
    EnclaveError_ContractPanicUnreachable,
    /**
     * The contract tried to access memory out of bounds.
     */
    EnclaveError_ContractPanicMemoryAccessOutOfBounds,
    /**
     * The contract tried to access a nonexistent resource.
     */
    EnclaveError_ContractPanicTableAccessOutOfBounds,
    /**
     * The contract tried to access an uninitialized resource.
     */
    EnclaveError_ContractPanicElemUninitialized,
    /**
     * The contract tried to divide by zero.
     */
    EnclaveError_ContractPanicDivisionByZero,
    /**
     * The contract tried to perform an invalid conversion to an integer.
     */
    EnclaveError_ContractPanicInvalidConversionToInt,
    /**
     * The contract has run out of space on the stack.
     */
    EnclaveError_ContractPanicStackOverflow,
    /**
     * The contract tried to call a function but expected an incorrect function signature.
     */
    EnclaveError_ContractPanicUnexpectedSignature,
    /**
     * Failed to seal data
     */
    EnclaveError_FailedSeal,
    EnclaveError_FailedUnseal,
    EnclaveError_FailedContractAuthentication,
    EnclaveError_FailedToDeserialize,
    EnclaveError_FailedToSerialize,
    EnclaveError_EncryptionError,
    EnclaveError_DecryptionError,
    EnclaveError_MemoryAllocationError,
    EnclaveError_MemorySafetyAllocationError,
    EnclaveError_MemoryReadError,
    EnclaveError_MemoryWriteError,
    EnclaveError_NotImplemented,
    EnclaveError_FailedTxVerification,
    EnclaveError_UnauthorizedWrite,
    /**
     * The host was caught trying to disrupt the enclave.
     * This can happen if e.g. the host provides invalid pointers as responses from ocalls.
     */
    EnclaveError_HostMisbehavior,
    EnclaveError_Panic,
    EnclaveError_OutOfMemory,
    EnclaveError_ExceededRecursionLimit,
    /**
     * Unexpected Error happened, no more details available
     */
    EnclaveError_Unknown,
} EnclaveError_Tag;

typedef struct EnclaveError_FailedOcall_Body {
    UntrustedVmError vm_error;
} EnclaveError_FailedOcall_Body;

typedef struct EnclaveError {
    EnclaveError_Tag tag;
    union {
        EnclaveError_FailedOcall_Body failed_ocall;
    };
} EnclaveError;

/**
 * This struct is returned from ecall_init.
 */
typedef enum InitResult_Tag {
    InitResult_Success,
    InitResult_Failure,
} InitResult_Tag;

typedef struct InitResult_Success_Body {
    /**
     * A pointer to the output of the calculation
     */
    UserSpaceBuffer output;
    /**
     * The contract_key for this contract.
     */
    uint8_t contract_key[64];
} InitResult_Success_Body;

typedef struct InitResult_Failure_Body {
    /**
     * The error that happened in the enclave
     */
    EnclaveError err;
} InitResult_Failure_Body;

typedef struct InitResult {
    InitResult_Tag tag;
    union {
        InitResult_Success_Body success;
        InitResult_Failure_Body failure;
    };
} InitResult;

/**
 * This struct is returned from ecall_handle.
 */
typedef enum HandleResult_Tag {
    HandleResult_Success,
    HandleResult_Failure,
} HandleResult_Tag;

typedef struct HandleResult_Success_Body {
    /**
     * A pointer to the output of the calculation
     */
    UserSpaceBuffer output;
} HandleResult_Success_Body;

typedef struct HandleResult_Failure_Body {
    /**
     * The error that happened in the enclave
     */
    EnclaveError err;
} HandleResult_Failure_Body;

typedef struct HandleResult {
    HandleResult_Tag tag;
    union {
        HandleResult_Success_Body success;
        HandleResult_Failure_Body failure;
    };
} HandleResult;

/**
 * This struct is returned from ecall_query.
 */
typedef enum QueryResult_Tag {
    QueryResult_Success,
    QueryResult_Failure,
} QueryResult_Tag;

typedef struct QueryResult_Success_Body {
    /**
     * A pointer to the output of the calculation
     */
    UserSpaceBuffer output;
} QueryResult_Success_Body;

typedef struct QueryResult_Failure_Body {
    /**
     * The error that happened in the enclave
     */
    EnclaveError err;
} QueryResult_Failure_Body;

typedef struct QueryResult {
    QueryResult_Tag tag;
    union {
        QueryResult_Success_Body success;
        QueryResult_Failure_Body failure;
    };
} QueryResult;

/**
 * This type describes parameters of the runtime that the node can configure for itself.
 */
typedef struct RuntimeConfiguration {
    /**
     * The amount of wasmi modules cached in an LRU cache inside the enclave.
     * This speeds up the execution of recently used modules, but has a significant
     * memory overhead.
     */
    uint8_t module_cache_size;
} RuntimeConfiguration;

#endif /* enclave_ffi_types_h */
