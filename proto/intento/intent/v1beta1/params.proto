syntax = "proto3";

package intento.intent.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";
option go_package = "github.com/trstlabs/intento/x/intent/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = true;

// Params defines the params for activeness of Flows on governance proposals.
message Params {
  option (gogoproto.goproto_stringer) = false;
  int64 FlowFundsCommission = 1;
  int64 FlowFlexFeeMul = 2;
  int64 FlowConstantFee = 3;
  repeated cosmos.base.v1beta1.Coin gas_fee_coins = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"gas_fee_coins\""
  ];
  //  Maximum period for self-executing Flow
  google.protobuf.Duration MaxFlowDuration = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "max_flow_duration,omitempty"
  ];
  //  Minimum period for self-executing Flow
  google.protobuf.Duration MinFlowDuration = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "min_flow_duration,omitempty"
  ];
  //  Minimum period for self-executing Flow
  google.protobuf.Duration MinFlowInterval = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "min_flow_interval,omitempty"
  ];
  // relayer rewards in uinto for each message type 0=SDK,1=Wasm, 2=Osmo.
  // Rewards are in uinto and topped up in the module account by alloc module.
  repeated int64 relayer_rewards = 9;
}
