syntax = "proto3";

package trst.autoibctx.v1beta1;

import "gogoproto/gogo.proto";
import "trst/autoibctx/v1beta1/types.proto";
import "trst/autoibctx/v1beta1/usage.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/trstlabs/trst/x/auto-ibc-tx/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

// Query defines the gRPC querier service.
service Query {
  // QueryInterchainAccountFromAddress returns the interchain account for given
  // owner address on a given connection pair
  rpc InterchainAccountFromAddress(QueryInterchainAccountFromAddressRequest)
      returns (QueryInterchainAccountFromAddressResponse) {
    option (google.api.http).get = "/auto-ibc-tx/v1beta1/address-to-ica";
  };
  // AutoTx returns the auto-executing interchain account tx
  rpc AutoTx(QueryAutoTxRequest) returns (QueryAutoTxResponse) {
    option (google.api.http).get = "/auto-ibc-tx/v1beta1/auto-tx/{id}";
  };
  // AutoTxHistory returns the auto tx history
  rpc AutoTxHistory(QueryAutoTxHistoryRequest) returns (QueryAutoTxHistoryResponse) {
  option (google.api.http).get = "/auto-ibc-tx/v1beta1/auto-tx-history/{id}";
  };
  // AutoTxs returns the all auto-executing interchain account messages
  rpc AutoTxs(QueryAutoTxsRequest) returns (QueryAutoTxsResponse) {
    option (google.api.http).get = "/auto-ibc-tx/v1beta1/auto-txs";
  };
  // AutoTxsForOwner returns the auto-executing interchain account messages for
  // given owner
  rpc AutoTxsForOwner(QueryAutoTxsForOwnerRequest)
      returns (QueryAutoTxsForOwnerResponse) {
    option (google.api.http).get =
        "/auto-ibc-tx/v1beta1/auto-txs-for-owner/{owner}";
  };
  // Params returns the total set of AutoIbcTx parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/auto-ibc-tx/v1beta1/params";
  };
  // AutoTxIbcTxUsage returns statistics on usage of IBC transactions
  rpc AutoTxIbcTxUsage(QueryAutoTxIbcUsageRequest)
      returns (QueryAutoTxIbcUsageResponse) {
    option (google.api.http).get = "/auto-ibc-tx/v1beta1/auto-tx-ibc-usage";
  };
}

// QueryInterchainAccountFromAddressRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressRequest {
  string owner = 1;
  string connection_id = 2 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
}

// QueryInterchainAccountFromAddressResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressResponse {
  string interchain_account_address = 1
      [ (gogoproto.moretags) = "yaml:\"interchain_account_address\"" ];
}

// QueryAutoTxRequest is the request type for the Query/AutoTxRequest RPC
message QueryAutoTxRequest { string id = 1; }

// QueryAutoTxResponse the response type for the Query/AutoTxRequest RPC
message QueryAutoTxResponse {
  AutoTxInfo auto_tx_info = 1 [ (gogoproto.nullable) = false ];
}

// QueryAutoTxHistoryRequest is the request type for the Query/QueryAutoTxHistoryRequest RPC
message QueryAutoTxHistoryRequest { 
  // id of the auto-tx
  string id = 1; 
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAutoTxHistoryResponse the response type for the Query/QueryAutoTxHistoryResponse RPC
message QueryAutoTxHistoryResponse {
  repeated AutoTxHistoryEntry history = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// QueryAutoTxsRequest is the request type for the Query/AutoTxsRequest RPC
message QueryAutoTxsRequest {
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAutoTxsResponse the response type for the Query/AutoTxsRequest RPCÏ€
message QueryAutoTxsResponse {
  repeated AutoTxInfo auto_tx_infos = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAutoTxsForOwnerRequest is the request type for the
// Query/AutoTxsForOwnerRequest RPC
message QueryAutoTxsForOwnerRequest {
  string owner = 1;
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAutoTxsForOwnerResponse the response type for the
// Query/AutoTxsForOwnerRequest RPC
message QueryAutoTxsForOwnerResponse {
  repeated AutoTxInfo auto_tx_infos = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryAutoIbcUsageRequest is the request type for the
// Query/QueryAutoIbcUsageRequest RPC
message QueryAutoTxIbcUsageRequest {
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAutoIbcUsageResponse the response type for the
// Query/QueryAutoIbcUsageResponse RPC
message QueryAutoTxIbcUsageResponse {
  repeated AutoTxIbcUsage auto_tx_ibc_usage = 1
      [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
