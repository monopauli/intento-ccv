syntax = "proto3";

package trst.autoibctx._v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/trstlabs/trst/x/auto-ibc-tx/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = true;

// AutoTxInfo stores the info for the auto executing interchain accounts transaction
message AutoTxInfo {
    uint64 tx_id = 1 [(gogoproto.customname) = "TxID"];
    string owner = 2;
    string label = 3;
    string fee_address = 4;
    repeated google.protobuf.Any msgs           = 5  [(cosmos_proto.accepts_interface) = "sdk.Msg"];
    google.protobuf.Duration interval = 6 [
    (gogoproto.nullable)    = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag)     = "interval,omitempty"
  ];
    google.protobuf.Timestamp start_time = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp exec_time = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp end_time = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated AutoTxHistoryEntry auto_tx_history = 10;
    string port_id = 11 [(gogoproto.customname) = "PortID"];
    string connection_id = 12 [(gogoproto.customname) = "ConnectionID"];
    //an array showing when AutoTx was updated
    repeated google.protobuf.Timestamp update_history = 13 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    ExecutionConditions conditions = 14;

    //if execution of depended tx has not happend yet
    //uint64 max_retries = 16;
}

// ExecutionConditions provides execution conditions for the AutoTx
message ExecutionConditions {
      //optional array of dependent AutoTxs that should be executed succesfully after their latest call before execution is allowed
      repeated uint64 needs_auto_txs_success = 1;
      //optional array of dependent autotxs that should fail after their latest call before execution is allowed
      repeated uint64 needs_auto_txs_failue = 2;
      // If true, will execute until we get a successful AutoTx, if false/unset will always execute
      bool stop_on_success = 3;
      // If true, will execute until successful AutoTx, if false/unset will always execute
      bool stop_on_fail = 4;
      //whether or not the latest msg responses should be saved
      bool save_msg_responses= 5;
      // if set to true, the AutoTx is not updatable
      bool non_updatable = 6;
  }

// AutoTxHistoryEntry provides a the history of AutoTx interchain tx call
message AutoTxHistoryEntry {
    google.protobuf.Timestamp  scheduled_exec_time = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp  actual_exec_time = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    cosmos.base.v1beta1.Coin exec_fee = 3 [(gogoproto.nullable) = false];
    // number of messages executed   
    int64 executed = 4;
    int64 time_outs = 5;
    // if an error takes place during execution
    string error = 6;
    //will be empty when save_msg_responses is false
    repeated google.protobuf.Any msg_responses           =7;

}

// Params defines the params for activeness of AutoTxs on governance proposals.
message Params {
  option (gogoproto.goproto_stringer) = false;
  int64 AutoTxFundsCommission = 1;
  int64 AutoTxFlexFeeMul = 2;
  int64 AutoTxConstantFee = 3;
  int64 RecurringAutoTxConstantFee = 4;
  //  Maximum period for self-executing AutoTx
  google.protobuf.Duration MaxAutoTxDuration = 5 [
        (gogoproto.nullable)    = false,
        (gogoproto.stdduration) = true,
        (gogoproto.jsontag)     = "max_auto_tx_duration,omitempty"
  ];
  //  Minimum period for self-executing AutoTx
  google.protobuf.Duration MinAutoTxDuration = 6 [
        (gogoproto.nullable)    = false,
        (gogoproto.stdduration) = true,
        (gogoproto.jsontag)     = "min_auto_tx_duration,omitempty"
  ];
  //  Minimum period for self-executing AutoTx
  google.protobuf.Duration MinAutoTxInterval = 8 [
        (gogoproto.nullable)    = false,
        (gogoproto.stdduration) = true,
        (gogoproto.jsontag)     = "min_auto_tx_interval,omitempty"
  ];
  //relayer rewards in utrst for each message type 0=SDK,1=Wasm, 2=Osmo. Rewards are in utrst and topped up in the module account by alloc module.
  repeated int64 relayer_rewards = 9;
}
