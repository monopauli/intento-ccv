name: Tests

on: [push]


jobs:
  Enclave-Unit-Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: |
          rustup component add rust-src clippy
          cd cosmwasm/enclaves/execute/
          rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Test enclave
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          export SGX_MODE=SW
          RUSTC_WRAPPER="$HOME/sccache" make enclave-tests
          make clean-enclave
  Build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.19" # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: |
          rustup component add rust-src clippy
          cd cosmwasm/enclaves/execute/
          rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Create fake api keys
        run: |
          mkdir -p ias_keys/sw_dummy
          mkdir -p ias_keys/develop
          echo "not_a_key" > ias_keys/sw_dummy/spid.txt
          echo "not_a_key" > ias_keys/develop/spid.txt
          echo "not_a_key" > ias_keys/sw_dummy/api_key.txt
          echo "not_a_key" > ias_keys/develop/api_key.txt
      - name: Install Requirements
        run: |
          rustup target add wasm32-unknown-unknown
          go install github.com/jteeuwen/go-bindata/go-bindata@latest
          go-bindata -version # check installation
          chmod +x ./scripts/install-wasm-tools.sh
          ./scripts/install-wasm-tools.sh
      - name: Build Executable
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          SGX_MODE=SW RUSTC_WRAPPER="$HOME/sccache" make build-linux
      - name: Build Contracts
        run: |
          make build-test-contracts
      - uses: actions/upload-artifact@v2
        with:
          name: trstd
          path: trstd
      - uses: actions/upload-artifact@v2
        with:
          name: v1-contract.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract/contract.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: enclave
          path: ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
      - uses: actions/upload-artifact@v2
        with:
          name: libgo_cosmwasm
          path: ./go-cosmwasm/api/libgo_cosmwasm.so

  Go-Tests:
    runs-on: ubuntu-20.04
    needs: Build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.19" # The Go version to download (if necessary) and use.
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - uses: actions/download-artifact@v2
        with:
          name: libgo_cosmwasm
      - uses: actions/download-artifact@v2
        with:
          name: enclave
      - uses: actions/download-artifact@v2
        with:
          name: v1-contract.wasm
          path: ./x/compute/internal/keeper/testdata/test-contract
      - name: Setup Files
        run: |
          cp libgo_cosmwasm.so ./go-cosmwasm/api/libgo_cosmwasm.so
          cp librust_cosmwasm_enclave.signed.so ./go-cosmwasm/librust_cosmwasm_enclave.signed.so
      - name: Test x/registration
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          go test -v ./x/registration/internal/...
      - name: Test x/auto-ibc-tx
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          cp librust_cosmwasm_enclave.signed.so ./x/auto-ibc-tx/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/trustlesshub/.sgx_secrets/
          go test -v ./x/auto-ibc-tx/...
      - name: Test x/alloc
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/alloc/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/trustlesshub/.sgx_secrets/
          go test -v ./x/alloc/keeper/...
      - name: Test x/claim
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/claim/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/trustlesshub/.sgx_secrets/
          go test -v ./x/claim/keeper/...
      - name: Test x/mint
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/mint/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/trustlesshub/.sgx_secrets/
          go test -v ./x/mint/keeper/...
      - name: Test x/compute
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          export SGX_MODE=SW
          cp librust_cosmwasm_enclave.signed.so ./x/compute/internal/keeper
          mkdir -p ias_keys/develop
          mkdir -p /opt/trustlesshub/.sgx_secrets/
          LOG_LEVEL=ERROR go test -v ./x/compute/client/...
          LOG_LEVEL=ERROR go test -p 1 -timeout 40m -v ./x/compute/internal/keeper/...
  Clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Intel's SGX SDK
        run: |
          mkdir -p "$HOME/.sgxsdk"
          cd "$HOME/.sgxsdk"
          SDK_BIN=sgx_linux_x64_sdk_2.9.101.2.bin
          wget https://download.01.org/intel-sgx/sgx-linux/2.9.1/distro/ubuntu18.04-server/"$SDK_BIN"
          chmod +x "$SDK_BIN"
          echo yes | ./"$SDK_BIN"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache xargo sysroot
        uses: actions/cache@v1
        with:
          path: ~/.xargo
          key: ${{ runner.os }}-xargo-sysroot
      - name: Cache build artifacts
        uses: actions/cache@v1
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache
      - run: |
          rustup component add rust-src clippy
          cd cosmwasm/enclaves/execute/
          rustup component add rust-src clippy
      - name: Install xargo
        run: |
          cd cosmwasm/enclaves/execute/
          cargo --version
          rustc --version  
          cargo +stable install xargo --version 0.3.25
          xargo --version
      - name: Download sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
          tar xf ./sccache-*.tar.gz
          mv ./sccache*/sccache "$HOME/sccache"
      - name: Clippy
        run: |
          source "$HOME/.sgxsdk/sgxsdk/environment"
          make vendor
          cd cosmwasm/enclaves/execute/
          SGX_MODE=SW make clippy
          SGX_MODE=HW make clippy
